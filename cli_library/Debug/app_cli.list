
app_cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080058f8  080058f8  000158f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000670  20000000  08005da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020670  2**0
                  CONTENTS
  8 .bss          000006d0  20000670  20000670  00020670  2**2
                  ALLOC
  9 ._user_heap_stack 00000200  20000d40  20000d40  00020670  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY
 11 .debug_info   00005aa1  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000e45  00000000  00000000  00026141  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000350  00000000  00000000  00026f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002e0  00000000  00000000  000272d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001b8c  00000000  00000000  000275b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000012a2  00000000  00000000  00029144  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002a3e6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001614  00000000  00000000  0002a464  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0002ba78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000670 	.word	0x20000670
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058e0 	.word	0x080058e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000674 	.word	0x20000674
 80001cc:	080058e0 	.word	0x080058e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */

  os_trace("hello world\n");
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <main+0x14>)
 8000eb6:	f001 fd95 	bl	80029e4 <app_debug_rtt>
  app_cli_start();
 8000eba:	f000 f985 	bl	80011c8 <app_cli_start>

  /* Infinite loop */
  while (1)
  {
	  app_cli_poll();
 8000ebe:	f000 f9d7 	bl	8001270 <app_cli_poll>
 8000ec2:	e7fc      	b.n	8000ebe <main+0xe>
 8000ec4:	080058f8 	.word	0x080058f8

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f000 f841 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f001 fdbf 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff ffd9 	bl	8000eb0 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000f04:	08005da0 	.word	0x08005da0
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	20000670 	.word	0x20000670
  ldr  r2, =_sbss
 8000f10:	20000670 	.word	0x20000670
  ldr  r3, = _ebss
 8000f14:	20000d40 	.word	0x20000d40

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>

08000f1a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <HardFault_Handler+0x4>

08000f2e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <UsageFault_Handler+0x4>

08000f40 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <SystemInit+0x60>)
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <SystemInit+0x60>)
 8000f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <SystemInit+0x64>)
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <SystemInit+0x64>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <SystemInit+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <SystemInit+0x64>)
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <SystemInit+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <SystemInit+0x64>)
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <SystemInit+0x68>)
 8000fb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fb4:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <SystemInit+0x64>)
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <SystemInit+0x64>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000fc6:	f000 f80d 	bl	8000fe4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fca:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <SystemInit+0x60>)
 8000fcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd0:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	24003010 	.word	0x24003010

08000fe4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ff2:	4a36      	ldr	r2, [pc, #216]	; (80010cc <SetSysClock+0xe8>)
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <SetSysClock+0xe8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <SetSysClock+0xe8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <SetSysClock+0x38>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800101a:	d1f0      	bne.n	8000ffe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <SetSysClock+0xe8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001028:	2301      	movs	r3, #1
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	e001      	b.n	8001032 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d142      	bne.n	80010be <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001038:	4a24      	ldr	r2, [pc, #144]	; (80010cc <SetSysClock+0xe8>)
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <SetSysClock+0xe8>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <SetSysClock+0xec>)
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <SetSysClock+0xec>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <SetSysClock+0xe8>)
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <SetSysClock+0xe8>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <SetSysClock+0xe8>)
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <SetSysClock+0xe8>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001062:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001064:	4a19      	ldr	r2, [pc, #100]	; (80010cc <SetSysClock+0xe8>)
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <SetSysClock+0xe8>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800106e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <SetSysClock+0xe8>)
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <SetSysClock+0xf0>)
 8001074:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <SetSysClock+0xe8>)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <SetSysClock+0xe8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001080:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001082:	bf00      	nop
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <SetSysClock+0xe8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f9      	beq.n	8001084 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <SetSysClock+0xf4>)
 8001092:	f240 7205 	movw	r2, #1797	; 0x705
 8001096:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <SetSysClock+0xe8>)
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <SetSysClock+0xe8>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80010a4:	4a09      	ldr	r2, [pc, #36]	; (80010cc <SetSysClock+0xe8>)
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <SetSysClock+0xe8>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80010b0:	bf00      	nop
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SetSysClock+0xe8>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d1f9      	bne.n	80010b2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000
 80010d4:	07405419 	.word	0x07405419
 80010d8:	40023c00 	.word	0x40023c00

080010dc <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80010e0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80010e4:	4905      	ldr	r1, [pc, #20]	; (80010fc <NVIC_SystemReset+0x20>)
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <NVIC_SystemReset+0x20>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <NVIC_SystemReset+0x24>)
 80010f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80010f2:	60cb      	str	r3, [r1, #12]
 80010f4:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
 80010f8:	e7fe      	b.n	80010f8 <NVIC_SystemReset+0x1c>
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	05fa0004 	.word	0x05fa0004

08001104 <rtt_custom_printf>:
//#include "DataDefine.h"
//#include "gsm.h"

#if PRINTF_OVER_RTT
int rtt_custom_printf(const char *format, ...)
{
 8001104:	b40f      	push	{r0, r1, r2, r3}
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
    int r;
    va_list ParamList;

    va_start(ParamList, format);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	603b      	str	r3, [r7, #0]
    r = SEGGER_RTT_vprintf(0, format, &ParamList);
 8001112:	463b      	mov	r3, r7
 8001114:	461a      	mov	r2, r3
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	2000      	movs	r0, #0
 800111a:	f001 fa95 	bl	8002648 <SEGGER_RTT_vprintf>
 800111e:	6078      	str	r0, [r7, #4]
    va_end(ParamList);

    return r;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800112c:	b004      	add	sp, #16
 800112e:	4770      	bx	lr

08001130 <app_cli_puts>:
    {"uart", "\tuart: Enable/disable uart\r\n", cli_uart_cmd, 1},
    {"uart", "\tuart: Enable/disable uart\r\n", cli_uart_cmd, 0},
};

void app_cli_puts(uint8_t *buf, uint32_t len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
#if PRINTF_OVER_RTT
    SEGGER_RTT_Write(0, buf, len);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	2000      	movs	r0, #0
 8001140:	f001 f8cc 	bl	80022dc <SEGGER_RTT_Write>
#else
    extern void app_debug_uart_print(uint8_t * data, uint32_t len);
    app_debug_uart_print(buf, len);
#endif
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <app_cli_gets>:

extern uint8_t get_debug_rx_data(void);
void app_cli_gets(uint8_t *buf, uint32_t len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
#if PRINTF_OVER_RTT
    for (uint32_t i = 0; i < len; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	e007      	b.n	800116c <app_cli_gets+0x20>
        buf[i] = 0xFF;
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4413      	add	r3, r2
 8001162:	22ff      	movs	r2, #255	; 0xff
 8001164:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++) {
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3f3      	bcc.n	800115c <app_cli_gets+0x10>
    }

    if (!SEGGER_RTT_HASDATA(0)) {
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <app_cli_gets+0x78>)
 8001176:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <app_cli_gets+0x78>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	429a      	cmp	r2, r3
 800117e:	d01d      	beq.n	80011bc <app_cli_gets+0x70>
        return;
    }

    int read = SEGGER_RTT_Read(0, buf, len);
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	2000      	movs	r0, #0
 8001186:	f001 f83f 	bl	8002208 <SEGGER_RTT_Read>
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]
    if (read > 0 && read < len) {
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd14      	ble.n	80011be <app_cli_gets+0x72>
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d210      	bcs.n	80011be <app_cli_gets+0x72>
        for (uint32_t i = read; i < len; i++) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e007      	b.n	80011b2 <app_cli_gets+0x66>
            buf[i] = 0xFF;
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4413      	add	r3, r2
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = read; i < len; i++) {
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	3301      	adds	r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3f3      	bcc.n	80011a2 <app_cli_gets+0x56>
 80011ba:	e000      	b.n	80011be <app_cli_gets+0x72>
        return;
 80011bc:	bf00      	nop
#else
    for (uint32_t i = 0; i < len; i++) {
        buf[i] = get_debug_rx_data();
    }
#endif
}
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000c88 	.word	0x20000c88

080011c8 <app_cli_start>:

void app_cli_start()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
    app_shell_set_context(&m_user_context);
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <app_cli_start+0x4c>)
 80011d0:	f000 f884 	bl	80012dc <app_shell_set_context>
    app_shell_init(&m_user_context, app_cli_puts, app_cli_gets,
 80011d4:	2300      	movs	r3, #0
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <app_cli_start+0x50>)
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <app_cli_start+0x54>)
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <app_cli_start+0x58>)
 80011e0:	4910      	ldr	r1, [pc, #64]	; (8001224 <app_cli_start+0x5c>)
 80011e2:	480c      	ldr	r0, [pc, #48]	; (8001214 <app_cli_start+0x4c>)
 80011e4:	f000 f84a 	bl	800127c <app_shell_init>
                   rtt_custom_printf, ">", false);

    /* Register CLI commands */
    for (int i = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e009      	b.n	8001202 <app_cli_start+0x3a>
         i < sizeof(cli_command_table) / sizeof(shell_command_context_t); i++) {
        app_shell_register_cmd(&cli_command_table[i]);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <app_cli_start+0x60>)
 80011f4:	4413      	add	r3, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fe32 	bl	8001e60 <app_shell_register_cmd>
         i < sizeof(cli_command_table) / sizeof(shell_command_context_t); i++) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3301      	adds	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
    for (int i = 0;
 8001204:	2b02      	cmp	r3, #2
 8001206:	d9f2      	bls.n	80011ee <app_cli_start+0x26>
    }

    /* Run CLI task */
    app_shell_task();
 8001208:	f000 f878 	bl	80012fc <app_shell_task>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000068c 	.word	0x2000068c
 8001218:	08005950 	.word	0x08005950
 800121c:	08001105 	.word	0x08001105
 8001220:	0800114d 	.word	0x0800114d
 8001224:	08001131 	.word	0x08001131
 8001228:	08005ac4 	.word	0x08005ac4

0800122c <cli_reset_system>:

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc,
                                char **argv)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
    os_trace("System reset\r\n");
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <cli_reset_system+0x20>)
 800123a:	f001 fbd3 	bl	80029e4 <app_debug_rtt>
    NVIC_SystemReset();
 800123e:	f7ff ff4d 	bl	80010dc <NVIC_SystemReset>
    return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	08005954 	.word	0x08005954

08001250 <cli_uart_cmd>:

static int32_t cli_uart_cmd(p_shell_context_t context, int32_t argc,
                            char **argv)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
    os_trace("uart command\r\n");
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <cli_uart_cmd+0x1c>)
 800125e:	f001 fbc1 	bl	80029e4 <app_debug_rtt>
    return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08005964 	.word	0x08005964

08001270 <app_cli_poll>:

/* run from main loop */
void app_cli_poll(void) { app_shell_task(); }
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
 8001274:	f000 f842 	bl	80012fc <app_shell_task>
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <app_shell_init>:
                send_data_cb_t send_cb, 
                recv_data_cb_t recv_cb, 
                printf_data_t shell_printf, 
                char *prompt, 
                bool loop_back)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
    APP_SHELL_ASSERT(send_cb != NULL);
 800128a:	bf00      	nop
    APP_SHELL_ASSERT(recv_cb != NULL);
 800128c:	bf00      	nop
    APP_SHELL_ASSERT(prompt != NULL);
 800128e:	bf00      	nop
    APP_SHELL_ASSERT(shell_printf != NULL);
 8001290:	bf00      	nop

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 8001292:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001296:	2100      	movs	r1, #0
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f001 fc36 	bl	8002b0a <memset>
    context->send_data_func = send_cb;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	601a      	str	r2, [r3, #0]

    m_loop_back = loop_back;
 80012b6:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <app_shell_init+0x54>)
 80012b8:	7f3b      	ldrb	r3, [r7, #28]
 80012ba:	7013      	strb	r3, [r2, #0]
    app_shell_register_cmd(&xhelp_cmd);
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <app_shell_init+0x58>)
 80012be:	f000 fdcf 	bl	8001e60 <app_shell_register_cmd>
    app_shell_register_cmd(&xexit_cmd);
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <app_shell_init+0x5c>)
 80012c4:	f000 fdcc 	bl	8001e60 <app_shell_register_cmd>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000082c 	.word	0x2000082c
 80012d4:	08005af4 	.word	0x08005af4
 80012d8:	08005b04 	.word	0x08005b04

080012dc <app_shell_set_context>:


static p_shell_context_t m_context;
void app_shell_set_context(p_shell_context_t context)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    m_context = context;
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <app_shell_set_context+0x1c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000830 	.word	0x20000830

080012fc <app_shell_task>:

int32_t app_shell_task()
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    uint8_t ch;
    int32_t i;

    if (!m_context)
 8001302:	4b96      	ldr	r3, [pc, #600]	; (800155c <app_shell_task+0x260>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <app_shell_task+0x14>
    {
        return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e267      	b.n	80017e0 <app_shell_task+0x4e4>
    }
    static volatile bool printed = false;
    if (printed == false)
 8001310:	4b93      	ldr	r3, [pc, #588]	; (8001560 <app_shell_task+0x264>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01a      	beq.n	8001356 <app_shell_task+0x5a>
    {
        m_context->exit = false;
 8001320:	4b8e      	ldr	r3, [pc, #568]	; (800155c <app_shell_task+0x260>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        m_context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 800132a:	4b8c      	ldr	r3, [pc, #560]	; (800155c <app_shell_task+0x260>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001330:	498c      	ldr	r1, [pc, #560]	; (8001564 <app_shell_task+0x268>)
 8001332:	488d      	ldr	r0, [pc, #564]	; (8001568 <app_shell_task+0x26c>)
 8001334:	4798      	blx	r3
        m_context->printf_data_func("Copyright (c) xxxxx JSC\r\n");
 8001336:	4b89      	ldr	r3, [pc, #548]	; (800155c <app_shell_task+0x260>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133c:	488b      	ldr	r0, [pc, #556]	; (800156c <app_shell_task+0x270>)
 800133e:	4798      	blx	r3
        m_context->printf_data_func(m_context->prompt);
 8001340:	4b86      	ldr	r3, [pc, #536]	; (800155c <app_shell_task+0x260>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001346:	4a85      	ldr	r2, [pc, #532]	; (800155c <app_shell_task+0x260>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4610      	mov	r0, r2
 800134e:	4798      	blx	r3
        printed = true;
 8001350:	4b83      	ldr	r3, [pc, #524]	; (8001560 <app_shell_task+0x264>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
    }

    // while (1)
    {
        if (m_context->exit)
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <app_shell_task+0x260>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <app_shell_task+0x6c>
        {
            return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e23b      	b.n	80017e0 <app_shell_task+0x4e4>
        }
        ch = get_char(m_context);
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <app_shell_task+0x260>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fd9d 	bl	8001eac <get_char>
 8001372:	4603      	mov	r3, r0
 8001374:	70fb      	strb	r3, [r7, #3]

        if (ch == 0xFF) //invalid input
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	2bff      	cmp	r3, #255	; 0xff
 800137a:	d101      	bne.n	8001380 <app_shell_task+0x84>
            return 0;
 800137c:	2300      	movs	r3, #0
 800137e:	e22f      	b.n	80017e0 <app_shell_task+0x4e4>

        /* Special key */
        if (ch == KEY_ESC)
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b1b      	cmp	r3, #27
 8001384:	d105      	bne.n	8001392 <app_shell_task+0x96>
        {
            m_context->stat = kSHELL_Special;
 8001386:	4b75      	ldr	r3, [pc, #468]	; (800155c <app_shell_task+0x260>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2201      	movs	r2, #1
 800138c:	711a      	strb	r2, [r3, #4]
            return 0;
 800138e:	2300      	movs	r3, #0
 8001390:	e226      	b.n	80017e0 <app_shell_task+0x4e4>
        }
        else if (m_context->stat == kSHELL_Special)
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <app_shell_task+0x260>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10d      	bne.n	80013b8 <app_shell_task+0xbc>
        {
            /* Function key */
            if (ch == '[')
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b5b      	cmp	r3, #91	; 0x5b
 80013a0:	d105      	bne.n	80013ae <app_shell_task+0xb2>
            {
                m_context->stat = kSHELL_Function;
 80013a2:	4b6e      	ldr	r3, [pc, #440]	; (800155c <app_shell_task+0x260>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2202      	movs	r2, #2
 80013a8:	711a      	strb	r2, [r3, #4]
                return 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e218      	b.n	80017e0 <app_shell_task+0x4e4>
            }
            m_context->stat = kSHELL_Normal;
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <app_shell_task+0x260>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	711a      	strb	r2, [r3, #4]
 80013b6:	e155      	b.n	8001664 <app_shell_task+0x368>
        }
        else if (m_context->stat == kSHELL_Function)
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <app_shell_task+0x260>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	f040 808e 	bne.w	80014e0 <app_shell_task+0x1e4>
        {
            m_context->stat = kSHELL_Normal;
 80013c4:	4b65      	ldr	r3, [pc, #404]	; (800155c <app_shell_task+0x260>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	711a      	strb	r2, [r3, #4]

            switch ((uint8_t)ch)
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	3b41      	subs	r3, #65	; 0x41
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d87a      	bhi.n	80014ca <app_shell_task+0x1ce>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <app_shell_task+0xe0>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001489 	.word	0x08001489
 80013e8:	08001461 	.word	0x08001461
            {
            /* History operation here */
            case 'A': /* Up key */
                get_history_cmd(m_context, m_context->hist_current);
 80013ec:	4b5b      	ldr	r3, [pc, #364]	; (800155c <app_shell_task+0x260>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b5a      	ldr	r3, [pc, #360]	; (800155c <app_shell_task+0x260>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f000 fb7b 	bl	8001af8 <get_history_cmd>
                if (m_context->hist_current < (m_context->hist_count - 1))
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <app_shell_task+0x260>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800140a:	461a      	mov	r2, r3
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <app_shell_task+0x260>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001414:	3b01      	subs	r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	da59      	bge.n	80014ce <app_shell_task+0x1d2>
                {
                    m_context->hist_current++;
 800141a:	4b50      	ldr	r3, [pc, #320]	; (800155c <app_shell_task+0x260>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001422:	3201      	adds	r2, #1
 8001424:	b292      	uxth	r2, r2
 8001426:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 800142a:	e050      	b.n	80014ce <app_shell_task+0x1d2>
            case 'B': /* Down key */
                get_history_cmd(m_context, m_context->hist_current);
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <app_shell_task+0x260>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <app_shell_task+0x260>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f000 fb5b 	bl	8001af8 <get_history_cmd>
                if (m_context->hist_current > 0)
 8001442:	4b46      	ldr	r3, [pc, #280]	; (800155c <app_shell_task+0x260>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800144a:	2b00      	cmp	r3, #0
 800144c:	d041      	beq.n	80014d2 <app_shell_task+0x1d6>
                {
                    m_context->hist_current--;
 800144e:	4b43      	ldr	r3, [pc, #268]	; (800155c <app_shell_task+0x260>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001456:	3a01      	subs	r2, #1
 8001458:	b292      	uxth	r2, r2
 800145a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 800145e:	e038      	b.n	80014d2 <app_shell_task+0x1d6>
            case 'D': /* Left key */
                if (m_context->c_pos)
 8001460:	4b3e      	ldr	r3, [pc, #248]	; (800155c <app_shell_task+0x260>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001468:	2b00      	cmp	r3, #0
 800146a:	d034      	beq.n	80014d6 <app_shell_task+0x1da>
                {
                    m_context->printf_data_func("\b");
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <app_shell_task+0x260>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	483f      	ldr	r0, [pc, #252]	; (8001570 <app_shell_task+0x274>)
 8001474:	4798      	blx	r3
                    m_context->c_pos--;
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <app_shell_task+0x260>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800147e:	3a01      	subs	r2, #1
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 8001486:	e026      	b.n	80014d6 <app_shell_task+0x1da>
            case 'C': /* Right key */
                if (m_context->c_pos < m_context->l_pos)
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <app_shell_task+0x260>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <app_shell_task+0x260>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001498:	429a      	cmp	r2, r3
 800149a:	d21e      	bcs.n	80014da <app_shell_task+0x1de>
                {
                    m_context->printf_data_func("%c", m_context->line[m_context->c_pos]);
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <app_shell_task+0x260>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <app_shell_task+0x260>)
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	492d      	ldr	r1, [pc, #180]	; (800155c <app_shell_task+0x260>)
 80014a8:	6809      	ldr	r1, [r1, #0]
 80014aa:	f891 1047 	ldrb.w	r1, [r1, #71]	; 0x47
 80014ae:	440a      	add	r2, r1
 80014b0:	7952      	ldrb	r2, [r2, #5]
 80014b2:	4611      	mov	r1, r2
 80014b4:	482f      	ldr	r0, [pc, #188]	; (8001574 <app_shell_task+0x278>)
 80014b6:	4798      	blx	r3
                    m_context->c_pos++;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <app_shell_task+0x260>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80014c0:	3201      	adds	r2, #1
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 80014c8:	e007      	b.n	80014da <app_shell_task+0x1de>
            default:
                break;
 80014ca:	bf00      	nop
 80014cc:	e006      	b.n	80014dc <app_shell_task+0x1e0>
                break;
 80014ce:	bf00      	nop
 80014d0:	e004      	b.n	80014dc <app_shell_task+0x1e0>
                break;
 80014d2:	bf00      	nop
 80014d4:	e002      	b.n	80014dc <app_shell_task+0x1e0>
                break;
 80014d6:	bf00      	nop
 80014d8:	e000      	b.n	80014dc <app_shell_task+0x1e0>
                break;
 80014da:	bf00      	nop
            }
            return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e17f      	b.n	80017e0 <app_shell_task+0x4e4>
        }
        /* Handle tab key */
        else if (ch == '\t')
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d12b      	bne.n	800153e <app_shell_task+0x242>
        {
#if SHELL_AUTO_COMPLETE
            /* Move the cursor to the beginning of line */
            for (i = 0; i < m_context->c_pos; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e007      	b.n	80014fc <app_shell_task+0x200>
            {
                m_context->printf_data_func("\b");
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <app_shell_task+0x260>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f2:	481f      	ldr	r0, [pc, #124]	; (8001570 <app_shell_task+0x274>)
 80014f4:	4798      	blx	r3
            for (i = 0; i < m_context->c_pos; i++)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3301      	adds	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <app_shell_task+0x260>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001504:	461a      	mov	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dcef      	bgt.n	80014ec <app_shell_task+0x1f0>
            }
            /* Do auto complete */
            auto_complete(m_context);
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <app_shell_task+0x260>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fb53 	bl	8001bbc <auto_complete>
            /* Move position to end */
            m_context->c_pos = m_context->l_pos = strlen(m_context->line);
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <app_shell_task+0x260>)
 8001518:	681d      	ldr	r5, [r3, #0]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <app_shell_task+0x260>)
 800151c:	681c      	ldr	r4, [r3, #0]
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <app_shell_task+0x260>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3305      	adds	r3, #5
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fe53 	bl	80001d0 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001532:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001536:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
#endif
            return 0;
 800153a:	2300      	movs	r3, #0
 800153c:	e150      	b.n	80017e0 <app_shell_task+0x4e4>
        else if ((ch == '`') && (m_context->l_pos == 0) && (m_context->line[0] == 0x00))
        {
        }
#endif
        /* Handle backspace key */
        else if ((ch == KET_DEL) || (ch == '\b'))
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	2b7f      	cmp	r3, #127	; 0x7f
 8001542:	d003      	beq.n	800154c <app_shell_task+0x250>
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b08      	cmp	r3, #8
 8001548:	f040 808c 	bne.w	8001664 <app_shell_task+0x368>
        {
            /* There must be at last one char */
            if (m_context->c_pos == 0)
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <app_shell_task+0x260>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <app_shell_task+0x27c>
            {
                return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e141      	b.n	80017e0 <app_shell_task+0x4e4>
 800155c:	20000830 	.word	0x20000830
 8001560:	20000834 	.word	0x20000834
 8001564:	080059d0 	.word	0x080059d0
 8001568:	080059dc 	.word	0x080059dc
 800156c:	080059f4 	.word	0x080059f4
 8001570:	08005a10 	.word	0x08005a10
 8001574:	08005a14 	.word	0x08005a14
            }

            m_context->l_pos--;
 8001578:	4b9b      	ldr	r3, [pc, #620]	; (80017e8 <app_shell_task+0x4ec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001580:	3a01      	subs	r2, #1
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            m_context->c_pos--;
 8001588:	4b97      	ldr	r3, [pc, #604]	; (80017e8 <app_shell_task+0x4ec>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001590:	3a01      	subs	r2, #1
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

            if (m_context->l_pos > m_context->c_pos)
 8001598:	4b93      	ldr	r3, [pc, #588]	; (80017e8 <app_shell_task+0x4ec>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80015a0:	4b91      	ldr	r3, [pc, #580]	; (80017e8 <app_shell_task+0x4ec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d94b      	bls.n	8001644 <app_shell_task+0x348>
            {
                memmove(&m_context->line[m_context->c_pos], &m_context->line[m_context->c_pos + 1],
 80015ac:	4b8e      	ldr	r3, [pc, #568]	; (80017e8 <app_shell_task+0x4ec>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a8d      	ldr	r2, [pc, #564]	; (80017e8 <app_shell_task+0x4ec>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80015b8:	4413      	add	r3, r2
 80015ba:	1d58      	adds	r0, r3, #5
 80015bc:	4b8a      	ldr	r3, [pc, #552]	; (80017e8 <app_shell_task+0x4ec>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <app_shell_task+0x4ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015c8:	3301      	adds	r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	1d59      	adds	r1, r3, #5
                        m_context->l_pos - m_context->c_pos);
 80015ce:	4b86      	ldr	r3, [pc, #536]	; (80017e8 <app_shell_task+0x4ec>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b83      	ldr	r3, [pc, #524]	; (80017e8 <app_shell_task+0x4ec>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015e0:	1ad3      	subs	r3, r2, r3
                memmove(&m_context->line[m_context->c_pos], &m_context->line[m_context->c_pos + 1],
 80015e2:	461a      	mov	r2, r3
 80015e4:	f001 fa77 	bl	8002ad6 <memmove>
                m_context->line[m_context->l_pos] = 0;
 80015e8:	4b7f      	ldr	r3, [pc, #508]	; (80017e8 <app_shell_task+0x4ec>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a7e      	ldr	r2, [pc, #504]	; (80017e8 <app_shell_task+0x4ec>)
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 80015f4:	4413      	add	r3, r2
 80015f6:	2200      	movs	r2, #0
 80015f8:	715a      	strb	r2, [r3, #5]
                m_context->printf_data_func("\b%s  \b", &m_context->line[m_context->c_pos]);
 80015fa:	4b7b      	ldr	r3, [pc, #492]	; (80017e8 <app_shell_task+0x4ec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001600:	4a79      	ldr	r2, [pc, #484]	; (80017e8 <app_shell_task+0x4ec>)
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4978      	ldr	r1, [pc, #480]	; (80017e8 <app_shell_task+0x4ec>)
 8001606:	6809      	ldr	r1, [r1, #0]
 8001608:	f891 1047 	ldrb.w	r1, [r1, #71]	; 0x47
 800160c:	440a      	add	r2, r1
 800160e:	3205      	adds	r2, #5
 8001610:	4611      	mov	r1, r2
 8001612:	4876      	ldr	r0, [pc, #472]	; (80017ec <app_shell_task+0x4f0>)
 8001614:	4798      	blx	r3

                /* Reset position */
                for (i = m_context->c_pos; i <= m_context->l_pos; i++)
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <app_shell_task+0x4ec>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	e007      	b.n	8001632 <app_shell_task+0x336>
                {
                    m_context->printf_data_func("\b");
 8001622:	4b71      	ldr	r3, [pc, #452]	; (80017e8 <app_shell_task+0x4ec>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001628:	4871      	ldr	r0, [pc, #452]	; (80017f0 <app_shell_task+0x4f4>)
 800162a:	4798      	blx	r3
                for (i = m_context->c_pos; i <= m_context->l_pos; i++)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <app_shell_task+0x4ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	daef      	bge.n	8001622 <app_shell_task+0x326>
 8001642:	e00d      	b.n	8001660 <app_shell_task+0x364>
                }
            }
            else /* Normal backspace operation */
            {
                m_context->printf_data_func("\b \b");
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <app_shell_task+0x4ec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	486a      	ldr	r0, [pc, #424]	; (80017f4 <app_shell_task+0x4f8>)
 800164c:	4798      	blx	r3
                m_context->line[m_context->l_pos] = 0;
 800164e:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <app_shell_task+0x4ec>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a65      	ldr	r2, [pc, #404]	; (80017e8 <app_shell_task+0x4ec>)
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 800165a:	4413      	add	r3, r2
 800165c:	2200      	movs	r2, #0
 800165e:	715a      	strb	r2, [r3, #5]
            }
            return 0;
 8001660:	2300      	movs	r3, #0
 8001662:	e0bd      	b.n	80017e0 <app_shell_task+0x4e4>
        else
        {
        }

        /* Input too long */
        if (m_context->l_pos >= (SHELL_BUFFER_SIZE - 1))
 8001664:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <app_shell_task+0x4ec>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800166c:	2b3e      	cmp	r3, #62	; 0x3e
 800166e:	d904      	bls.n	800167a <app_shell_task+0x37e>
        {
            m_context->l_pos = 0;
 8001670:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <app_shell_task+0x4ec>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        }

        /* Handle end of line, break */
        if ((ch == '\r') || (ch == '\n'))
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b0d      	cmp	r3, #13
 800167e:	d002      	beq.n	8001686 <app_shell_task+0x38a>
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d12f      	bne.n	80016e6 <app_shell_task+0x3ea>
        {
            m_context->printf_data_func("\r\n");
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <app_shell_task+0x4ec>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168c:	485a      	ldr	r0, [pc, #360]	; (80017f8 <app_shell_task+0x4fc>)
 800168e:	4798      	blx	r3
            process_cmd(m_context, m_context->line);
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <app_shell_task+0x4ec>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <app_shell_task+0x4ec>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3305      	adds	r3, #5
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f000 f8ed 	bl	800187c <process_cmd>
            /* Reset all params */
            m_context->c_pos = m_context->l_pos = 0;
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <app_shell_task+0x4ec>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <app_shell_task+0x4ec>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80016b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016b4:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
            m_context->hist_current = 0;
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <app_shell_task+0x4ec>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
            m_context->printf_data_func(m_context->prompt);
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <app_shell_task+0x4ec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c8:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <app_shell_task+0x4ec>)
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	4610      	mov	r0, r2
 80016d0:	4798      	blx	r3
            memset(m_context->line, 0, sizeof(m_context->line));
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <app_shell_task+0x4ec>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3305      	adds	r3, #5
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fa14 	bl	8002b0a <memset>
            return 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e07c      	b.n	80017e0 <app_shell_task+0x4e4>
        }

        /* Normal character */
        if (m_context->c_pos < m_context->l_pos)
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <app_shell_task+0x4ec>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <app_shell_task+0x4ec>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d24b      	bcs.n	8001792 <app_shell_task+0x496>
        {
            memmove(&m_context->line[m_context->c_pos + 1], &m_context->line[m_context->c_pos],
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <app_shell_task+0x4ec>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <app_shell_task+0x4ec>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001706:	3301      	adds	r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	1d58      	adds	r0, r3, #5
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <app_shell_task+0x4ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <app_shell_task+0x4ec>)
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8001718:	4413      	add	r3, r2
 800171a:	1d59      	adds	r1, r3, #5
                    m_context->l_pos - m_context->c_pos);
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <app_shell_task+0x4ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001724:	461a      	mov	r2, r3
 8001726:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <app_shell_task+0x4ec>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800172e:	1ad3      	subs	r3, r2, r3
            memmove(&m_context->line[m_context->c_pos + 1], &m_context->line[m_context->c_pos],
 8001730:	461a      	mov	r2, r3
 8001732:	f001 f9d0 	bl	8002ad6 <memmove>
            m_context->line[m_context->c_pos] = ch;
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <app_shell_task+0x4ec>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <app_shell_task+0x4ec>)
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8001742:	4413      	add	r3, r2
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	715a      	strb	r2, [r3, #5]
            m_context->printf_data_func("%s", &m_context->line[m_context->c_pos]);
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <app_shell_task+0x4ec>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174e:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <app_shell_task+0x4ec>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4925      	ldr	r1, [pc, #148]	; (80017e8 <app_shell_task+0x4ec>)
 8001754:	6809      	ldr	r1, [r1, #0]
 8001756:	f891 1047 	ldrb.w	r1, [r1, #71]	; 0x47
 800175a:	440a      	add	r2, r1
 800175c:	3205      	adds	r2, #5
 800175e:	4611      	mov	r1, r2
 8001760:	4826      	ldr	r0, [pc, #152]	; (80017fc <app_shell_task+0x500>)
 8001762:	4798      	blx	r3
            /* Move the cursor to new position */
            for (i = m_context->c_pos; i < m_context->l_pos; i++)
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <app_shell_task+0x4ec>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e007      	b.n	8001780 <app_shell_task+0x484>
            {
                m_context->printf_data_func("\b");
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <app_shell_task+0x4ec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <app_shell_task+0x4f4>)
 8001778:	4798      	blx	r3
            for (i = m_context->c_pos; i < m_context->l_pos; i++)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3301      	adds	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <app_shell_task+0x4ec>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	dcef      	bgt.n	8001770 <app_shell_task+0x474>
 8001790:	e013      	b.n	80017ba <app_shell_task+0x4be>
            }
        }
        else
        {
            m_context->line[m_context->l_pos] = ch;
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <app_shell_task+0x4ec>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <app_shell_task+0x4ec>)
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 800179e:	4413      	add	r3, r2
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	715a      	strb	r2, [r3, #5]
            if (m_loop_back)
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <app_shell_task+0x504>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <app_shell_task+0x4be>
                m_context->printf_data_func("%c", ch);
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <app_shell_task+0x4ec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4813      	ldr	r0, [pc, #76]	; (8001804 <app_shell_task+0x508>)
 80017b8:	4798      	blx	r3
        }

        ch = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	70fb      	strb	r3, [r7, #3]
        m_context->l_pos++;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <app_shell_task+0x4ec>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80017c6:	3201      	adds	r2, #1
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        m_context->c_pos++;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <app_shell_task+0x4ec>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80017d6:	3201      	adds	r2, #1
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }

    return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	20000830 	.word	0x20000830
 80017ec:	08005a18 	.word	0x08005a18
 80017f0:	08005a10 	.word	0x08005a10
 80017f4:	08005a20 	.word	0x08005a20
 80017f8:	08005a24 	.word	0x08005a24
 80017fc:	08005a28 	.word	0x08005a28
 8001800:	2000082c 	.word	0x2000082c
 8001804:	08005a14 	.word	0x08005a14

08001808 <help_cmd>:

static int32_t help_cmd(p_shell_context_t context, int32_t argc, char **argv)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < m_registered_cmd.number_of_cmd_in_list; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	75fb      	strb	r3, [r7, #23]
 800181c:	e00b      	b.n	8001836 <help_cmd+0x2e>
    {
        context->printf_data_func(m_registered_cmd.cmd_list[i]->pcHelpString);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001822:	7dfa      	ldrb	r2, [r7, #23]
 8001824:	4909      	ldr	r1, [pc, #36]	; (800184c <help_cmd+0x44>)
 8001826:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800182a:	6852      	ldr	r2, [r2, #4]
 800182c:	4610      	mov	r0, r2
 800182e:	4798      	blx	r3
    for (i = 0; i < m_registered_cmd.number_of_cmd_in_list; i++)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	3301      	adds	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <help_cmd+0x44>)
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183c:	7dfa      	ldrb	r2, [r7, #23]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3ed      	bcc.n	800181e <help_cmd+0x16>
    }
    return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200007a8 	.word	0x200007a8

08001850 <exit_cmd>:

static int32_t exit_cmd(p_shell_context_t context, int32_t argc, char **argv)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
    /* Skip warning */
    context->printf_data_func("\r\nSHELL exited\r\n");
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <exit_cmd+0x28>)
 8001862:	4798      	blx	r3
    context->exit = true;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	08005a2c 	.word	0x08005a2c

0800187c <process_cmd>:

static void process_cmd(p_shell_context_t context, const char *cmd)
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b0c6      	sub	sp, #280	; 0x118
 8001880:	af00      	add	r7, sp, #0
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	6018      	str	r0, [r3, #0]
 8001886:	463b      	mov	r3, r7
 8001888:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmp_cmd = NULL;
    static const char *tmp_cmd_str;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmp_cmd_len;
    uint8_t tmpLen;
    uint8_t i = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = strlen(cmd);
 8001896:	463b      	mov	r3, r7
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f7fe fc99 	bl	80001d0 <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = parse_line(cmd, tmpLen, argv);
 80018a4:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 80018a8:	f107 020c 	add.w	r2, r7, #12
 80018ac:	463b      	mov	r3, r7
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f000 fa58 	bl	8001d64 <parse_line>
 80018b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmp_cmd == NULL) && (argc > 0))
 80018b8:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <process_cmd+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d168      	bne.n	8001992 <process_cmd+0x116>
 80018c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	dd64      	ble.n	8001992 <process_cmd+0x116>
    {
        for (i = 0; i < m_registered_cmd.number_of_cmd_in_list; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80018ce:	e057      	b.n	8001980 <process_cmd+0x104>
        {
            tmp_cmd = m_registered_cmd.cmd_list[i];
 80018d0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80018d4:	4a85      	ldr	r2, [pc, #532]	; (8001aec <process_cmd+0x270>)
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	4a83      	ldr	r2, [pc, #524]	; (8001ae8 <process_cmd+0x26c>)
 80018dc:	6013      	str	r3, [r2, #0]
            tmp_cmd_str = tmp_cmd->pcCommand;
 80018de:	4b82      	ldr	r3, [pc, #520]	; (8001ae8 <process_cmd+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a82      	ldr	r2, [pc, #520]	; (8001af0 <process_cmd+0x274>)
 80018e6:	6013      	str	r3, [r2, #0]
            tmp_cmd_len = strlen(tmp_cmd_str);
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <process_cmd+0x274>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fc6f 	bl	80001d0 <strlen>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmp_cmd_len] == ' ') || (cmd[tmp_cmd_len] == 0x00))
 80018f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018fc:	463a      	mov	r2, r7
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b20      	cmp	r3, #32
 8001906:	d007      	beq.n	8001918 <process_cmd+0x9c>
 8001908:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800190c:	463a      	mov	r2, r7
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d12e      	bne.n	8001976 <process_cmd+0xfa>
            {
                if (custom_str_cmp(tmp_cmd_str, argv[0], tmp_cmd_len) == 0)
 8001918:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <process_cmd+0x274>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001926:	4619      	mov	r1, r3
 8001928:	f000 f9f5 	bl	8001d16 <custom_str_cmp>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d121      	bne.n	8001976 <process_cmd+0xfa>
                {
                    if ((tmp_cmd->expected_number_of_parameters == 0) && (argc == 1))
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <process_cmd+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	7b1b      	ldrb	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <process_cmd+0xd0>
 800193c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001940:	2b01      	cmp	r3, #1
 8001942:	d103      	bne.n	800194c <process_cmd+0xd0>
                    {
                        flag = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    }
                    else
                    {
                        flag = 1;
                    }
                    break;
 800194a:	e021      	b.n	8001990 <process_cmd+0x114>
                    else if (tmp_cmd->expected_number_of_parameters > 0)
 800194c:	4b66      	ldr	r3, [pc, #408]	; (8001ae8 <process_cmd+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	7b1b      	ldrb	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <process_cmd+0xf2>
                        if ((argc - 1) == tmp_cmd->expected_number_of_parameters)
 8001956:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800195a:	3b01      	subs	r3, #1
 800195c:	4a62      	ldr	r2, [pc, #392]	; (8001ae8 <process_cmd+0x26c>)
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	7b12      	ldrb	r2, [r2, #12]
 8001962:	4293      	cmp	r3, r2
 8001964:	d114      	bne.n	8001990 <process_cmd+0x114>
                            flag = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 800196c:	e010      	b.n	8001990 <process_cmd+0x114>
                        flag = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 8001974:	e00c      	b.n	8001990 <process_cmd+0x114>
        for (i = 0; i < m_registered_cmd.number_of_cmd_in_list; i++)
 8001976:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800197a:	3301      	adds	r3, #1
 800197c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <process_cmd+0x270>)
 8001982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001986:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800198a:	429a      	cmp	r2, r3
 800198c:	d3a0      	bcc.n	80018d0 <process_cmd+0x54>
 800198e:	e000      	b.n	8001992 <process_cmd+0x116>
                    break;
 8001990:	bf00      	nop
                }
            }
        }
    }

    if ((tmp_cmd != NULL) && (flag == 1U))
 8001992:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <process_cmd+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <process_cmd+0x138>
 800199a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d108      	bne.n	80019b4 <process_cmd+0x138>
    {
        context->printf_data_func(
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a8:	4852      	ldr	r0, [pc, #328]	; (8001af4 <process_cmd+0x278>)
 80019aa:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmp_cmd = NULL;
 80019ac:	4b4e      	ldr	r3, [pc, #312]	; (8001ae8 <process_cmd+0x26c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
    {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmp_cmd = NULL;
    }
}
 80019b2:	e094      	b.n	8001ade <process_cmd+0x262>
    else if (tmp_cmd != NULL)
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <process_cmd+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808d 	beq.w	8001ad8 <process_cmd+0x25c>
        tmpLen = strlen(cmd);
 80019be:	463b      	mov	r3, r7
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f7fe fc05 	bl	80001d0 <strlen>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != custom_str_cmp(cmd, context->hist_buf[0], strlen(cmd)))
 80019cc:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f103 0558 	add.w	r5, r3, #88	; 0x58
 80019d8:	463b      	mov	r3, r7
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f7fe fbf8 	bl	80001d0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	463b      	mov	r3, r7
 80019e6:	4629      	mov	r1, r5
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f000 f994 	bl	8001d16 <custom_str_cmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	429c      	cmp	r4, r3
 80019f2:	d063      	beq.n	8001abc <process_cmd+0x240>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--)
 80019f4:	2302      	movs	r3, #2
 80019f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80019fa:	e032      	b.n	8001a62 <process_cmd+0x1e6>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 80019fc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a00:	1d3a      	adds	r2, r7, #4
 8001a02:	019b      	lsls	r3, r3, #6
 8001a04:	3358      	adds	r3, #88	; 0x58
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 f87b 	bl	8002b0a <memset>
                tmpLen = strlen(context->hist_buf[i - 1]);
 8001a14:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	1d3a      	adds	r2, r7, #4
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	3358      	adds	r3, #88	; 0x58
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fbd3 	bl	80001d0 <strlen>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                custom_str_cpy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 8001a30:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a34:	1d3a      	adds	r2, r7, #4
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	3358      	adds	r3, #88	; 0x58
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	18d0      	adds	r0, r2, r3
 8001a3e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a42:	3b01      	subs	r3, #1
 8001a44:	1d3a      	adds	r2, r7, #4
 8001a46:	019b      	lsls	r3, r3, #6
 8001a48:	3358      	adds	r3, #88	; 0x58
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8001a52:	4619      	mov	r1, r3
 8001a54:	f000 f93c 	bl	8001cd0 <custom_str_cpy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--)
 8001a58:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001a62:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1c8      	bne.n	80019fc <process_cmd+0x180>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3358      	adds	r3, #88	; 0x58
 8001a70:	2240      	movs	r2, #64	; 0x40
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f848 	bl	8002b0a <memset>
            tmpLen = strlen(cmd);
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	f7fe fba7 	bl	80001d0 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            custom_str_cpy(context->hist_buf[0], cmd, tmpLen);
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8001a90:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8001a94:	463b      	mov	r3, r7
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	f000 f91a 	bl	8001cd0 <custom_str_cpy>
            if (context->hist_count < SHELL_HIST_MAX)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d809      	bhi.n	8001abc <process_cmd+0x240>
                context->hist_count++;
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmp_cmd->pFuncCallBack(context, argc, argv);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <process_cmd+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f107 020c 	add.w	r2, r7, #12
 8001ac6:	1d38      	adds	r0, r7, #4
 8001ac8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001acc:	6800      	ldr	r0, [r0, #0]
 8001ace:	4798      	blx	r3
        tmp_cmd = NULL;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <process_cmd+0x26c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	e002      	b.n	8001ade <process_cmd+0x262>
        tmp_cmd = NULL;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <process_cmd+0x26c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	20000838 	.word	0x20000838
 8001aec:	200007a8 	.word	0x200007a8
 8001af0:	2000083c 	.word	0x2000083c
 8001af4:	08005a40 	.word	0x08005a40

08001af8 <get_history_cmd>:

static void get_history_cmd(p_shell_context_t context, uint8_t hist_pos)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0')
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <get_history_cmd+0x20>
    {
        context->hist_current = 0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 8001b16:	e04b      	b.n	8001bb0 <get_history_cmd+0xb8>
    }
    if (hist_pos > SHELL_HIST_MAX)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d901      	bls.n	8001b22 <get_history_cmd+0x2a>
    {
        hist_pos = SHELL_HIST_MAX - 1;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	70fb      	strb	r3, [r7, #3]
    }
    tmp = strlen(context->line);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3305      	adds	r3, #5
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb52 	bl	80001d0 <strlen>
 8001b2c:	60b8      	str	r0, [r7, #8]
    /* Clear current if have */
    if (tmp > 0)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d014      	beq.n	8001b5e <get_history_cmd+0x66>
    {
        memset(context->line, '\0', tmp);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3305      	adds	r3, #5
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 ffe4 	bl	8002b0a <memset>
        for (i = 0; i < tmp; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e006      	b.n	8001b56 <get_history_cmd+0x5e>
        {
            context->printf_data_func("\b \b");
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4c:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <get_history_cmd+0xc0>)
 8001b4e:	4798      	blx	r3
        for (i = 0; i < tmp; i++)
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	3301      	adds	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3f4      	bcc.n	8001b48 <get_history_cmd+0x50>
        }
    }

    context->l_pos = strlen(context->hist_buf[hist_pos]);
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	3358      	adds	r3, #88	; 0x58
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fb31 	bl	80001d0 <strlen>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    custom_str_cpy(context->line, context->hist_buf[hist_pos], context->l_pos);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	1d58      	adds	r0, r3, #5
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	019b      	lsls	r3, r3, #6
 8001b8c:	3358      	adds	r3, #88	; 0x58
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	18d1      	adds	r1, r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f000 f899 	bl	8001cd0 <custom_str_cpy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	0192      	lsls	r2, r2, #6
 8001ba6:	3258      	adds	r2, #88	; 0x58
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	440a      	add	r2, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4798      	blx	r3
}
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08005a20 	.word	0x08005a20

08001bbc <auto_complete>:

static void auto_complete(p_shell_context_t context)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
#if SHELL_AUTO_COMPLETE
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmp_cmd = NULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]

    if (!strlen(context->line))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3305      	adds	r3, #5
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d06b      	beq.n	8001cb6 <auto_complete+0xfa>
    {
        return;
    }
    context->printf_data_func("\r\n");
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be2:	4837      	ldr	r0, [pc, #220]	; (8001cc0 <auto_complete+0x104>)
 8001be4:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0')
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	795b      	ldrb	r3, [r3, #5]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <auto_complete+0x3e>
    {
        help_cmd(context, 0, NULL);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fe08 	bl	8001808 <help_cmd>
        return;
 8001bf8:	e05e      	b.n	8001cb8 <auto_complete+0xfc>
    }
    /* Do auto complete */
    for (i = 0; i < m_registered_cmd.number_of_cmd_in_list; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
 8001bfe:	e040      	b.n	8001c82 <auto_complete+0xc6>
    {
        tmp_cmd = m_registered_cmd.cmd_list[i];
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <auto_complete+0x108>)
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	60fb      	str	r3, [r7, #12]
        cmdName = tmp_cmd->pcCommand;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60bb      	str	r3, [r7, #8]
        if (custom_str_cmp(context->line, cmdName, strlen(context->line)) == 0)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1d5c      	adds	r4, r3, #5
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3305      	adds	r3, #5
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fad9 	bl	80001d0 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	4620      	mov	r0, r4
 8001c26:	f000 f876 	bl	8001d16 <custom_str_cmp>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d125      	bne.n	8001c7c <auto_complete+0xc0>
        {
            if (minLen == 0)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <auto_complete+0x94>
            {
                namePtr = cmdName;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	613b      	str	r3, [r7, #16]
                minLen = strlen(namePtr);
 8001c3a:	6938      	ldr	r0, [r7, #16]
 8001c3c:	f7fe fac8 	bl	80001d0 <strlen>
 8001c40:	4603      	mov	r3, r0
 8001c42:	61bb      	str	r3, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <auto_complete+0x10c>)
 8001c4c:	4798      	blx	r3
                continue;
 8001c4e:	e015      	b.n	8001c7c <auto_complete+0xc0>
            }
            len = custom_str_cmp(namePtr, cmdName, strlen(namePtr));
 8001c50:	6938      	ldr	r0, [r7, #16]
 8001c52:	f7fe fabd 	bl	80001d0 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	6938      	ldr	r0, [r7, #16]
 8001c5e:	f000 f85a 	bl	8001d16 <custom_str_cmp>
 8001c62:	61f8      	str	r0, [r7, #28]
            if (len < 0)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da02      	bge.n	8001c70 <auto_complete+0xb4>
            {
                len = len * (-1);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen)
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	da01      	bge.n	8001c7c <auto_complete+0xc0>
            {
                minLen = len;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < m_registered_cmd.number_of_cmd_in_list; i++)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <auto_complete+0x108>)
 8001c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c88:	7dfa      	ldrb	r2, [r7, #23]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d3b8      	bcc.n	8001c00 <auto_complete+0x44>
            }
        }
    }
    /* Auto complete string */
    if (namePtr)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <auto_complete+0xe6>
    {
        custom_str_cpy(context->line, namePtr, minLen);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3305      	adds	r3, #5
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	6939      	ldr	r1, [r7, #16]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f817 	bl	8001cd0 <custom_str_cpy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	3205      	adds	r2, #5
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <auto_complete+0x110>)
 8001cb0:	4798      	blx	r3
#endif
    return;
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <auto_complete+0xfc>
        return;
 8001cb6:	bf00      	nop
}
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	08005a24 	.word	0x08005a24
 8001cc4:	200007a8 	.word	0x200007a8
 8001cc8:	08005a9c 	.word	0x08005a9c
 8001ccc:	08005aa4 	.word	0x08005aa4

08001cd0 <custom_str_cpy>:

static char *custom_str_cpy(char *dest, const char *src, int32_t count)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e00a      	b.n	8001d00 <custom_str_cpy+0x30>
    {
        dest[i] = src[i];
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	440a      	add	r2, r1
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbf0      	blt.n	8001cea <custom_str_cpy+0x1a>
    }

    return ret;
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <custom_str_cmp>:

static int32_t custom_str_cmp(const char *str1, const char *str2, int32_t count)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
    while (count--)
 8001d22:	e012      	b.n	8001d4a <custom_str_cmp+0x34>
    {
        if (*str1++ != *str2++)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60fa      	str	r2, [r7, #12]
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d008      	beq.n	8001d4a <custom_str_cmp+0x34>
        {
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	e005      	b.n	8001d56 <custom_str_cmp+0x40>
    while (count--)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e7      	bne.n	8001d24 <custom_str_cmp+0xe>
        }
    }
    return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <parse_line>:

static int32_t parse_line(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(m_param_buffer, '\0', len + 1);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3301      	adds	r3, #1
 8001d74:	461a      	mov	r2, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	4838      	ldr	r0, [pc, #224]	; (8001e5c <parse_line+0xf8>)
 8001d7a:	f000 fec6 	bl	8002b0a <memset>
    custom_str_cpy(m_param_buffer, cmd, len);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	4835      	ldr	r0, [pc, #212]	; (8001e5c <parse_line+0xf8>)
 8001d86:	f7ff ffa3 	bl	8001cd0 <custom_str_cpy>

    p = m_param_buffer;
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <parse_line+0xf8>)
 8001d8c:	61bb      	str	r3, [r7, #24]
    position = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
    argc = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]

    while (position < len)
 8001d96:	e058      	b.n	8001e4a <parse_line+0xe6>
    {
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len))
        {
            *p = '\0';
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
            p++;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
            position++;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d103      	bne.n	8001dba <parse_line+0x56>
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3ee      	bcc.n	8001d98 <parse_line+0x34>
        }
        /* Process begin of a string */
        if (*p == '"')
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b22      	cmp	r3, #34	; 0x22
 8001dc0:	d127      	bne.n	8001e12 <parse_line+0xae>
        {
            p++;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61bb      	str	r3, [r7, #24]
            position++;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	601a      	str	r2, [r3, #0]
            argc++;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len))
 8001de0:	e005      	b.n	8001dee <parse_line+0x8a>
            {
                p++;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
                position++;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b22      	cmp	r3, #34	; 0x22
 8001df4:	d003      	beq.n	8001dfe <parse_line+0x9a>
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3f1      	bcc.n	8001de2 <parse_line+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
            p++;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	3301      	adds	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
            position++;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e01b      	b.n	8001e4a <parse_line+0xe6>
        }
        else /* Normal char */
        {
            argv[argc] = p;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	601a      	str	r2, [r3, #0]
            argc++;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len))
 8001e24:	e005      	b.n	8001e32 <parse_line+0xce>
            {
                p++;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
                position++;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d007      	beq.n	8001e4a <parse_line+0xe6>
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d003      	beq.n	8001e4a <parse_line+0xe6>
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3ed      	bcc.n	8001e26 <parse_line+0xc2>
    while (position < len)
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3ab      	bcc.n	8001daa <parse_line+0x46>
            }
        }
    }
    return argc;
 8001e52:	69fb      	ldr	r3, [r7, #28]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200007ec 	.word	0x200007ec

08001e60 <app_shell_register_cmd>:

int32_t app_shell_register_cmd(const shell_command_context_t *command_context)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (m_registered_cmd.number_of_cmd_in_list < SHELL_MAX_CMD)
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <app_shell_register_cmd+0x48>)
 8001e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	d80d      	bhi.n	8001e92 <app_shell_register_cmd+0x32>
    {
        m_registered_cmd.cmd_list[m_registered_cmd.number_of_cmd_in_list++] = command_context;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <app_shell_register_cmd+0x48>)
 8001e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	b2d1      	uxtb	r1, r2
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <app_shell_register_cmd+0x48>)
 8001e82:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 8001e86:	4619      	mov	r1, r3
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <app_shell_register_cmd+0x48>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e90:	e002      	b.n	8001e98 <app_shell_register_cmd+0x38>
    }
    else
    {
        result = -1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	60fb      	str	r3, [r7, #12]
    }
    return result;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200007a8 	.word	0x200007a8

08001eac <get_char>:

static uint8_t get_char(p_shell_context_t context)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	f107 020f 	add.w	r2, r7, #15
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4798      	blx	r3
#endif
    return ch;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <_DoInit+0x98>)
 8001ed4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2203      	movs	r2, #3
 8001eda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <_DoInit+0x9c>)
 8001ee6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <_DoInit+0xa0>)
 8001eec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <_DoInit+0x9c>)
 8001f0c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <_DoInit+0xa4>)
 8001f12:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2210      	movs	r2, #16
 8001f18:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3307      	adds	r3, #7
 8001f30:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <_DoInit+0xa8>)
 8001f32:	6810      	ldr	r0, [r2, #0]
 8001f34:	6018      	str	r0, [r3, #0]
  RTT__DMB();
 8001f36:	f3bf 8f5f 	dmb	sy
  STRCPY(&p->acID[0], "SEGGER", 7);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <_DoInit+0xac>)
 8001f3e:	6810      	ldr	r0, [r2, #0]
 8001f40:	6018      	str	r0, [r3, #0]
 8001f42:	8891      	ldrh	r1, [r2, #4]
 8001f44:	7992      	ldrb	r2, [r2, #6]
 8001f46:	8099      	strh	r1, [r3, #4]
 8001f48:	719a      	strb	r2, [r3, #6]
  RTT__DMB();
 8001f4a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	719a      	strb	r2, [r3, #6]
  RTT__DMB();
 8001f54:	f3bf 8f5f 	dmb	sy
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	20000c88 	.word	0x20000c88
 8001f68:	08005aac 	.word	0x08005aac
 8001f6c:	20000840 	.word	0x20000840
 8001f70:	20000c40 	.word	0x20000c40
 8001f74:	08005ab8 	.word	0x08005ab8
 8001f78:	08005abc 	.word	0x08005abc

08001f7c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d905      	bls.n	8001fac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e007      	b.n	8001fbc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	1acb      	subs	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	bf28      	it	cs
 8001fca:	4613      	movcs	r3, r2
 8001fcc:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	bf28      	it	cs
 8001fd6:	4613      	movcs	r3, r2
 8001fd8:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fd6a 	bl	8002ac0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	429a      	cmp	r2, r3
 8002014:	d101      	bne.n	800201a <_WriteBlocking+0x9e>
      WrOff = 0u;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
    }
    RTT__DMB();
 800201a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1b3      	bne.n	8001f92 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800202a:	69bb      	ldr	r3, [r7, #24]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d910      	bls.n	800207a <_WriteNoCheck+0x46>
      *pDst++ = *pData++;
    };
    RTT__DMB();
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	4413      	add	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fd2b 	bl	8002ac0 <memcpy>
    RTT__DMB();
 800206a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	441a      	add	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    RTT__DMB();
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002078:	e01c      	b.n	80020b4 <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fd18 	bl	8002ac0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6858      	ldr	r0, [r3, #4]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f000 fd0b 	bl	8002ac0 <memcpy>
    RTT__DMB();
 80020aa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	60da      	str	r2, [r3, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d808      	bhi.n	80020ea <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	3b01      	subs	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e004      	b.n	80020f4 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80020f4:	697b      	ldr	r3, [r7, #20]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <SEGGER_RTT_ReadNoLock+0x100>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <SEGGER_RTT_ReadNoLock+0x18>
 8002118:	f7ff fed8 	bl	8001ecc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	3360      	adds	r3, #96	; 0x60
 8002128:	4a36      	ldr	r2, [pc, #216]	; (8002204 <SEGGER_RTT_ReadNoLock+0x100>)
 800212a:	4413      	add	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002142:	6a3a      	ldr	r2, [r7, #32]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	429a      	cmp	r2, r3
 8002148:	d92a      	bls.n	80021a0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4293      	cmp	r3, r2
 800215a:	bf28      	it	cs
 800215c:	4613      	movcs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	4413      	add	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4619      	mov	r1, r3
 800216c:	69f8      	ldr	r0, [r7, #28]
 800216e:	f000 fca7 	bl	8002ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	429a      	cmp	r2, r3
 800219a:	d101      	bne.n	80021a0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf28      	it	cs
 80021b0:	4613      	movcs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d018      	beq.n	80021ec <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4619      	mov	r1, r3
 80021c6:	69f8      	ldr	r0, [r7, #28]
 80021c8:	f000 fc7a 	bl	8002ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 80021cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000c88 	.word	0x20000c88

08002208 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 8002214:	f3ef 8311 	mrs	r3, BASEPRI
 8002218:	f04f 0120 	mov.w	r1, #32
 800221c:	f381 8811 	msr	BASEPRI, r1
 8002220:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff ff6c 	bl	8002104 <SEGGER_RTT_ReadNoLock>
 800222c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
 8002234:	693b      	ldr	r3, [r7, #16]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <SEGGER_RTT_WriteNoLock+0x98>)
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d017      	beq.n	800229a <SEGGER_RTT_WriteNoLock+0x5a>
 800226a:	2b01      	cmp	r3, #1
 800226c:	d302      	bcc.n	8002274 <SEGGER_RTT_WriteNoLock+0x34>
 800226e:	2b02      	cmp	r3, #2
 8002270:	d023      	beq.n	80022ba <SEGGER_RTT_WriteNoLock+0x7a>
 8002272:	e029      	b.n	80022c8 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002274:	6978      	ldr	r0, [r7, #20]
 8002276:	f7ff ff21 	bl	80020bc <_GetAvailWriteSpace>
 800227a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d202      	bcs.n	800228a <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002288:	e021      	b.n	80022ce <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	69b9      	ldr	r1, [r7, #24]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff fece 	bl	8002034 <_WriteNoCheck>
    break;
 8002298:	e019      	b.n	80022ce <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff0e 	bl	80020bc <_GetAvailWriteSpace>
 80022a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4293      	cmp	r3, r2
 80022a8:	bf28      	it	cs
 80022aa:	4613      	movcs	r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff febe 	bl	8002034 <_WriteNoCheck>
    break;
 80022b8:	e009      	b.n	80022ce <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	69b9      	ldr	r1, [r7, #24]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff fe5c 	bl	8001f7c <_WriteBlocking>
 80022c4:	61f8      	str	r0, [r7, #28]
    break;
 80022c6:	e002      	b.n	80022ce <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
    break;
 80022cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80022ce:	69fb      	ldr	r3, [r7, #28]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000c88 	.word	0x20000c88

080022dc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <SEGGER_RTT_Write+0x44>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <SEGGER_RTT_Write+0x18>
 80022f0:	f7ff fdec 	bl	8001ecc <_DoInit>
  SEGGER_RTT_LOCK();
 80022f4:	f3ef 8311 	mrs	r3, BASEPRI
 80022f8:	f04f 0120 	mov.w	r1, #32
 80022fc:	f381 8811 	msr	BASEPRI, r1
 8002300:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff9a 	bl	8002240 <SEGGER_RTT_WriteNoLock>
 800230c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8002314:	693b      	ldr	r3, [r7, #16]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000c88 	.word	0x20000c88

08002324 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d80e      	bhi.n	8002360 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4413      	add	r3, r2
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d115      	bne.n	8002398 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6918      	ldr	r0, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff ffaf 	bl	80022dc <SEGGER_RTT_Write>
 800237e:	4602      	mov	r2, r0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d004      	beq.n	8002392 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f04f 32ff 	mov.w	r2, #4294967295
 800238e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8002390:	e002      	b.n	8002398 <_StoreChar+0x74>
      p->Cnt = 0u;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80023b2:	2301      	movs	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80023ba:	e007      	b.n	80023cc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	623b      	str	r3, [r7, #32]
    Width++;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d2f3      	bcs.n	80023bc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d901      	bls.n	80023e0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d125      	bne.n	8002436 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d022      	beq.n	8002436 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <_PrintUnsigned+0x66>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_PrintUnsigned+0x66>
        c = '0';
 8002400:	2330      	movs	r3, #48	; 0x30
 8002402:	76fb      	strb	r3, [r7, #27]
 8002404:	e001      	b.n	800240a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002406:	2320      	movs	r3, #32
 8002408:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800240a:	e00b      	b.n	8002424 <_PrintUnsigned+0x84>
        FieldWidth--;
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	3b01      	subs	r3, #1
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002412:	7efb      	ldrb	r3, [r7, #27]
 8002414:	4619      	mov	r1, r3
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff ff84 	bl	8002324 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db07      	blt.n	8002434 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <_PrintUnsigned+0x96>
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	429a      	cmp	r2, r3
 8002430:	d3ec      	bcc.n	800240c <_PrintUnsigned+0x6c>
 8002432:	e000      	b.n	8002436 <_PrintUnsigned+0x96>
          break;
 8002434:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db55      	blt.n	80024ea <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d903      	bls.n	800244c <_PrintUnsigned+0xac>
        NumDigits--;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	e009      	b.n	8002460 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d200      	bcs.n	8002460 <_PrintUnsigned+0xc0>
          break;
 800245e:	e005      	b.n	800246c <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800246a:	e7e8      	b.n	800243e <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <_PrintUnsigned+0x154>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ff48 	bl	8002324 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db08      	blt.n	80024ae <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1df      	bne.n	800246c <_PrintUnsigned+0xcc>
 80024ac:	e000      	b.n	80024b0 <_PrintUnsigned+0x110>
        break;
 80024ae:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d014      	beq.n	80024ea <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80024c0:	e00a      	b.n	80024d8 <_PrintUnsigned+0x138>
          FieldWidth--;
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	3b01      	subs	r3, #1
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80024c8:	2120      	movs	r1, #32
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff ff2a 	bl	8002324 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db07      	blt.n	80024e8 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <_PrintUnsigned+0x14a>
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3ed      	bcc.n	80024c2 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80024e6:	e000      	b.n	80024ea <_PrintUnsigned+0x14a>
            break;
 80024e8:	bf00      	nop
}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	08005b14 	.word	0x08005b14

080024f8 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	bfb8      	it	lt
 800250c:	425b      	neglt	r3, r3
 800250e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002510:	2301      	movs	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002514:	e007      	b.n	8002526 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	fb92 f3f3 	sdiv	r3, r2, r3
 800251e:	613b      	str	r3, [r7, #16]
    Width++;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	429a      	cmp	r2, r3
 800252c:	daf3      	bge.n	8002516 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	429a      	cmp	r2, r3
 8002534:	d901      	bls.n	800253a <_PrintInt+0x42>
    Width = NumDigits;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <_PrintInt+0x5e>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db04      	blt.n	8002550 <_PrintInt+0x58>
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <_PrintInt+0x5e>
    FieldWidth--;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	3b01      	subs	r3, #1
 8002554:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <_PrintInt+0x6e>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01c      	beq.n	80025a0 <_PrintInt+0xa8>
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d117      	bne.n	80025a0 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d014      	beq.n	80025a0 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002576:	e00a      	b.n	800258e <_PrintInt+0x96>
        FieldWidth--;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	3b01      	subs	r3, #1
 800257c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800257e:	2120      	movs	r1, #32
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fecf 	bl	8002324 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db07      	blt.n	800259e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <_PrintInt+0xa8>
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3ed      	bcc.n	8002578 <_PrintInt+0x80>
 800259c:	e000      	b.n	80025a0 <_PrintInt+0xa8>
          break;
 800259e:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db4a      	blt.n	800263e <_PrintInt+0x146>
    if (v < 0) {
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da07      	bge.n	80025be <_PrintInt+0xc6>
      v = -v;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	425b      	negs	r3, r3
 80025b2:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80025b4:	212d      	movs	r1, #45	; 0x2d
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff feb4 	bl	8002324 <_StoreChar>
 80025bc:	e008      	b.n	80025d0 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80025c8:	212b      	movs	r1, #43	; 0x2b
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff feaa 	bl	8002324 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db32      	blt.n	800263e <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01f      	beq.n	8002622 <_PrintInt+0x12a>
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11a      	bne.n	8002622 <_PrintInt+0x12a>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d117      	bne.n	8002622 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d014      	beq.n	8002622 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80025f8:	e00a      	b.n	8002610 <_PrintInt+0x118>
            FieldWidth--;
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8002600:	2130      	movs	r1, #48	; 0x30
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fe8e 	bl	8002324 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db07      	blt.n	8002620 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <_PrintInt+0x12a>
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	429a      	cmp	r2, r3
 800261c:	d3ed      	bcc.n	80025fa <_PrintInt+0x102>
 800261e:	e000      	b.n	8002622 <_PrintInt+0x12a>
              break;
 8002620:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db09      	blt.n	800263e <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff feb1 	bl	80023a0 <_PrintUnsigned>
      }
    }
  }
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b0b2      	sub	sp, #200	; 0xc8
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  BufferDesc.Cnt            = 0u;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  BufferDesc.RTTBufferIndex = BufferIndex;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  BufferDesc.ReturnValue    = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  do {
    c = *sFormat;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    sFormat++;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8002682:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 818e 	beq.w	80029a8 <SEGGER_RTT_vprintf+0x360>
      break;
    }
    if (c == '%') {
 800268c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002690:	2b25      	cmp	r3, #37	; 0x25
 8002692:	f040 817b 	bne.w	800298c <SEGGER_RTT_vprintf+0x344>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      v = 1;
 800269c:	2301      	movs	r3, #1
 800269e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      do {
        c = *sFormat;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        switch (c) {
 80026aa:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80026ae:	3b23      	subs	r3, #35	; 0x23
 80026b0:	2b0d      	cmp	r3, #13
 80026b2:	d847      	bhi.n	8002744 <SEGGER_RTT_vprintf+0xfc>
 80026b4:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <SEGGER_RTT_vprintf+0x74>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	08002731 	.word	0x08002731
 80026c0:	08002745 	.word	0x08002745
 80026c4:	08002745 	.word	0x08002745
 80026c8:	08002745 	.word	0x08002745
 80026cc:	08002745 	.word	0x08002745
 80026d0:	08002745 	.word	0x08002745
 80026d4:	08002745 	.word	0x08002745
 80026d8:	08002745 	.word	0x08002745
 80026dc:	0800271d 	.word	0x0800271d
 80026e0:	08002745 	.word	0x08002745
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	08002745 	.word	0x08002745
 80026ec:	08002745 	.word	0x08002745
 80026f0:	08002709 	.word	0x08002709
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80026f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3301      	adds	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	e021      	b.n	800274c <SEGGER_RTT_vprintf+0x104>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3301      	adds	r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	e017      	b.n	800274c <SEGGER_RTT_vprintf+0x104>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800271c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	e00d      	b.n	800274c <SEGGER_RTT_vprintf+0x104>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	e003      	b.n	800274c <SEGGER_RTT_vprintf+0x104>
        default:  v = 0; break;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800274a:	bf00      	nop
        }
      } while (v);
 800274c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1a6      	bne.n	80026a2 <SEGGER_RTT_vprintf+0x5a>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      do {
        c = *sFormat;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        if ((c < '0') || (c > '9')) {
 8002762:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002766:	2b2f      	cmp	r3, #47	; 0x2f
 8002768:	d914      	bls.n	8002794 <SEGGER_RTT_vprintf+0x14c>
 800276a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800276e:	2b39      	cmp	r3, #57	; 0x39
 8002770:	d810      	bhi.n	8002794 <SEGGER_RTT_vprintf+0x14c>
          break;
        }
        sFormat++;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3301      	adds	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8002778:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	461a      	mov	r2, r3
 8002786:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800278a:	4413      	add	r3, r2
 800278c:	3b30      	subs	r3, #48	; 0x30
 800278e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        c = *sFormat;
 8002792:	e7e2      	b.n	800275a <SEGGER_RTT_vprintf+0x112>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      c = *sFormat;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
      if (c == '.') {
 80027a2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80027a6:	2b2e      	cmp	r3, #46	; 0x2e
 80027a8:	d11f      	bne.n	80027ea <SEGGER_RTT_vprintf+0x1a2>
        sFormat++;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
          if ((c < '0') || (c > '9')) {
 80027b8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80027bc:	2b2f      	cmp	r3, #47	; 0x2f
 80027be:	d914      	bls.n	80027ea <SEGGER_RTT_vprintf+0x1a2>
 80027c0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80027c4:	2b39      	cmp	r3, #57	; 0x39
 80027c6:	d810      	bhi.n	80027ea <SEGGER_RTT_vprintf+0x1a2>
            break;
          }
          sFormat++;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	3301      	adds	r3, #1
 80027cc:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80027ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	461a      	mov	r2, r3
 80027dc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80027e0:	4413      	add	r3, r2
 80027e2:	3b30      	subs	r3, #48	; 0x30
 80027e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
          c = *sFormat;
 80027e8:	e7e2      	b.n	80027b0 <SEGGER_RTT_vprintf+0x168>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
      do {
        if ((c == 'l') || (c == 'h')) {
 80027f2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80027f6:	2b6c      	cmp	r3, #108	; 0x6c
 80027f8:	d003      	beq.n	8002802 <SEGGER_RTT_vprintf+0x1ba>
 80027fa:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80027fe:	2b68      	cmp	r3, #104	; 0x68
 8002800:	d107      	bne.n	8002812 <SEGGER_RTT_vprintf+0x1ca>
          sFormat++;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        if ((c == 'l') || (c == 'h')) {
 8002810:	e7ef      	b.n	80027f2 <SEGGER_RTT_vprintf+0x1aa>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002812:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d02b      	beq.n	8002872 <SEGGER_RTT_vprintf+0x22a>
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	dc07      	bgt.n	800282e <SEGGER_RTT_vprintf+0x1e6>
 800281e:	2b58      	cmp	r3, #88	; 0x58
 8002820:	d057      	beq.n	80028d2 <SEGGER_RTT_vprintf+0x28a>
 8002822:	2b63      	cmp	r3, #99	; 0x63
 8002824:	d010      	beq.n	8002848 <SEGGER_RTT_vprintf+0x200>
 8002826:	2b25      	cmp	r3, #37	; 0x25
 8002828:	f000 80a5 	beq.w	8002976 <SEGGER_RTT_vprintf+0x32e>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 800282c:	e0aa      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
      switch (c) {
 800282e:	2b73      	cmp	r3, #115	; 0x73
 8002830:	d067      	beq.n	8002902 <SEGGER_RTT_vprintf+0x2ba>
 8002832:	2b73      	cmp	r3, #115	; 0x73
 8002834:	dc03      	bgt.n	800283e <SEGGER_RTT_vprintf+0x1f6>
 8002836:	2b70      	cmp	r3, #112	; 0x70
 8002838:	f000 8088 	beq.w	800294c <SEGGER_RTT_vprintf+0x304>
        break;
 800283c:	e0a2      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
      switch (c) {
 800283e:	2b75      	cmp	r3, #117	; 0x75
 8002840:	d02f      	beq.n	80028a2 <SEGGER_RTT_vprintf+0x25a>
 8002842:	2b78      	cmp	r3, #120	; 0x78
 8002844:	d045      	beq.n	80028d2 <SEGGER_RTT_vprintf+0x28a>
        break;
 8002846:	e09d      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
        v = va_arg(*pParamList, int);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1d19      	adds	r1, r3, #4
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6011      	str	r1, [r2, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        c0 = (char)v;
 8002858:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800285c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        _StoreChar(&BufferDesc, c0);
 8002860:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8002864:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fd5a 	bl	8002324 <_StoreChar>
        break;
 8002870:	e088      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
        v = va_arg(*pParamList, int);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1d19      	adds	r1, r3, #4
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6011      	str	r1, [r2, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002882:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002896:	220a      	movs	r2, #10
 8002898:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800289c:	f7ff fe2c 	bl	80024f8 <_PrintInt>
        break;
 80028a0:	e070      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
        v = va_arg(*pParamList, int);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1d19      	adds	r1, r3, #4
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6011      	str	r1, [r2, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80028b2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80028b6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80028ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028ca:	220a      	movs	r2, #10
 80028cc:	f7ff fd68 	bl	80023a0 <_PrintUnsigned>
        break;
 80028d0:	e058      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
        v = va_arg(*pParamList, int);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1d19      	adds	r1, r3, #4
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6011      	str	r1, [r2, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80028e2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80028e6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80028ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028fa:	2210      	movs	r2, #16
 80028fc:	f7ff fd50 	bl	80023a0 <_PrintUnsigned>
        break;
 8002900:	e040      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
          const char * s = va_arg(*pParamList, const char *);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1d19      	adds	r1, r3, #4
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6011      	str	r1, [r2, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            c = *s;
 8002912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
            s++;
 800291c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002920:	3301      	adds	r3, #1
 8002922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            if (c == '\0') {
 8002926:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <SEGGER_RTT_vprintf+0x300>
           _StoreChar(&BufferDesc, c);
 800292e:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8002932:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fcf3 	bl	8002324 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800293e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002942:	2b00      	cmp	r3, #0
 8002944:	dae5      	bge.n	8002912 <SEGGER_RTT_vprintf+0x2ca>
        break;
 8002946:	e01d      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
              break;
 8002948:	bf00      	nop
        break;
 800294a:	e01b      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
        v = va_arg(*pParamList, int);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1d19      	adds	r1, r3, #4
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800295c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002960:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002964:	2300      	movs	r3, #0
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2308      	movs	r3, #8
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2308      	movs	r3, #8
 800296e:	2210      	movs	r2, #16
 8002970:	f7ff fd16 	bl	80023a0 <_PrintUnsigned>
        break;
 8002974:	e006      	b.n	8002984 <SEGGER_RTT_vprintf+0x33c>
        _StoreChar(&BufferDesc, '%');
 8002976:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800297a:	2125      	movs	r1, #37	; 0x25
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fcd1 	bl	8002324 <_StoreChar>
        break;
 8002982:	bf00      	nop
      }
      sFormat++;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	e007      	b.n	800299c <SEGGER_RTT_vprintf+0x354>
    } else {
      _StoreChar(&BufferDesc, c);
 800298c:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8002990:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fcc4 	bl	8002324 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800299c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f6bf ae67 	bge.w	8002674 <SEGGER_RTT_vprintf+0x2c>
 80029a6:	e000      	b.n	80029aa <SEGGER_RTT_vprintf+0x362>
      break;
 80029a8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80029aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dd12      	ble.n	80029d8 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80029b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <SEGGER_RTT_vprintf+0x382>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80029ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4619      	mov	r1, r3
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff fc89 	bl	80022dc <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80029ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029d2:	4413      	add	r3, r2
 80029d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  return BufferDesc.ReturnValue;
 80029d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80029dc:	4618      	mov	r0, r3
 80029de:	37c0      	adds	r7, #192	; 0xc0
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <app_debug_rtt>:

#define RTT_PRINTF_BUFFER_SIZE 512
#define BLE_PRINTF_MTU_SIZE 23

int app_debug_rtt(const char *fmt,...)
{
 80029e4:	b40f      	push	{r0, r1, r2, r3}
 80029e6:	b580      	push	{r7, lr}
 80029e8:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80029ec:	af00      	add	r7, sp, #0
    // Get debug data
    if (!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 80029ee:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <app_debug_rtt+0x90>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <app_debug_rtt+0x1a>
    {
        return 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e031      	b.n	8002a62 <app_debug_rtt+0x7e>
    }

    int     n;
    char    aBuffer[RTT_PRINTF_BUFFER_SIZE];
    char *p = &aBuffer[0];
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    int size = RTT_PRINTF_BUFFER_SIZE;
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

    va_list args;

    va_start (args, fmt);
 8002a0c:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8002a10:	463b      	mov	r3, r7
 8002a12:	601a      	str	r2, [r3, #0]
    n = vsnprintf(p, size, fmt, args);
 8002a14:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8002a18:	463b      	mov	r3, r7
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002a20:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8002a24:	f000 f8a6 	bl	8002b74 <vsnprintf>
 8002a28:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
    if (n > (int)size) 
 8002a2c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8002a30:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002a34:	429a      	cmp	r2, r3
 8002a36:	dd07      	ble.n	8002a48 <app_debug_rtt+0x64>
    {
        SEGGER_RTT_Write(0, aBuffer, size);
 8002a38:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fc4b 	bl	80022dc <SEGGER_RTT_Write>
 8002a46:	e00a      	b.n	8002a5e <app_debug_rtt+0x7a>
    } 
    else if (n > 0) 
 8002a48:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	dd06      	ble.n	8002a5e <app_debug_rtt+0x7a>
    {
        SEGGER_RTT_Write(0, aBuffer, n);
 8002a50:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	4619      	mov	r1, r3
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff fc3f 	bl	80022dc <SEGGER_RTT_Write>
    }
    va_end(args);
    return n;
 8002a5e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a6e:	b004      	add	sp, #16
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000edf0 	.word	0xe000edf0

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	4e0d      	ldr	r6, [pc, #52]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7c:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a7e:	1ba4      	subs	r4, r4, r6
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	2500      	movs	r5, #0
 8002a84:	42a5      	cmp	r5, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	4e0b      	ldr	r6, [pc, #44]	; (8002ab8 <__libc_init_array+0x40>)
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <__libc_init_array+0x44>)
 8002a8c:	f002 ff28 	bl	80058e0 <_init>
 8002a90:	1ba4      	subs	r4, r4, r6
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	2500      	movs	r5, #0
 8002a96:	42a5      	cmp	r5, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aa0:	4798      	blx	r3
 8002aa2:	3501      	adds	r5, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aaa:	4798      	blx	r3
 8002aac:	3501      	adds	r5, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08005d98 	.word	0x08005d98
 8002ab4:	08005d98 	.word	0x08005d98
 8002ab8:	08005d98 	.word	0x08005d98
 8002abc:	08005d9c 	.word	0x08005d9c

08002ac0 <memcpy>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e43      	subs	r3, r0, #1
 8002ac4:	440a      	add	r2, r1
 8002ac6:	4291      	cmp	r1, r2
 8002ac8:	d100      	bne.n	8002acc <memcpy+0xc>
 8002aca:	bd10      	pop	{r4, pc}
 8002acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ad4:	e7f7      	b.n	8002ac6 <memcpy+0x6>

08002ad6 <memmove>:
 8002ad6:	4288      	cmp	r0, r1
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	eb01 0302 	add.w	r3, r1, r2
 8002ade:	d803      	bhi.n	8002ae8 <memmove+0x12>
 8002ae0:	1e42      	subs	r2, r0, #1
 8002ae2:	4299      	cmp	r1, r3
 8002ae4:	d10c      	bne.n	8002b00 <memmove+0x2a>
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	4298      	cmp	r0, r3
 8002aea:	d2f9      	bcs.n	8002ae0 <memmove+0xa>
 8002aec:	1881      	adds	r1, r0, r2
 8002aee:	1ad2      	subs	r2, r2, r3
 8002af0:	42d3      	cmn	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memmove+0x20>
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002afa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002afe:	e7f7      	b.n	8002af0 <memmove+0x1a>
 8002b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b04:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b08:	e7eb      	b.n	8002ae2 <memmove+0xc>

08002b0a <memset>:
 8002b0a:	4402      	add	r2, r0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d100      	bne.n	8002b14 <memset+0xa>
 8002b12:	4770      	bx	lr
 8002b14:	f803 1b01 	strb.w	r1, [r3], #1
 8002b18:	e7f9      	b.n	8002b0e <memset+0x4>

08002b1a <_vsnprintf_r>:
 8002b1a:	b530      	push	{r4, r5, lr}
 8002b1c:	1e14      	subs	r4, r2, #0
 8002b1e:	4605      	mov	r5, r0
 8002b20:	b09b      	sub	sp, #108	; 0x6c
 8002b22:	4618      	mov	r0, r3
 8002b24:	da05      	bge.n	8002b32 <_vsnprintf_r+0x18>
 8002b26:	238b      	movs	r3, #139	; 0x8b
 8002b28:	602b      	str	r3, [r5, #0]
 8002b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2e:	b01b      	add	sp, #108	; 0x6c
 8002b30:	bd30      	pop	{r4, r5, pc}
 8002b32:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b36:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002b3a:	bf14      	ite	ne
 8002b3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b40:	4623      	moveq	r3, r4
 8002b42:	9302      	str	r3, [sp, #8]
 8002b44:	9305      	str	r3, [sp, #20]
 8002b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4a:	9100      	str	r1, [sp, #0]
 8002b4c:	9104      	str	r1, [sp, #16]
 8002b4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002b52:	4602      	mov	r2, r0
 8002b54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002b56:	4669      	mov	r1, sp
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f000 f819 	bl	8002b90 <_svfprintf_r>
 8002b5e:	1c43      	adds	r3, r0, #1
 8002b60:	bfbc      	itt	lt
 8002b62:	238b      	movlt	r3, #139	; 0x8b
 8002b64:	602b      	strlt	r3, [r5, #0]
 8002b66:	2c00      	cmp	r4, #0
 8002b68:	d0e1      	beq.n	8002b2e <_vsnprintf_r+0x14>
 8002b6a:	9b00      	ldr	r3, [sp, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e7dd      	b.n	8002b2e <_vsnprintf_r+0x14>
	...

08002b74 <vsnprintf>:
 8002b74:	b507      	push	{r0, r1, r2, lr}
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	4803      	ldr	r0, [pc, #12]	; (8002b8c <vsnprintf+0x18>)
 8002b80:	6800      	ldr	r0, [r0, #0]
 8002b82:	f7ff ffca 	bl	8002b1a <_vsnprintf_r>
 8002b86:	b003      	add	sp, #12
 8002b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b8c:	20000000 	.word	0x20000000

08002b90 <_svfprintf_r>:
 8002b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b94:	b0bd      	sub	sp, #244	; 0xf4
 8002b96:	468a      	mov	sl, r1
 8002b98:	4615      	mov	r5, r2
 8002b9a:	461f      	mov	r7, r3
 8002b9c:	4683      	mov	fp, r0
 8002b9e:	f001 fe25 	bl	80047ec <_localeconv_r>
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fb12 	bl	80001d0 <strlen>
 8002bac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002bb0:	9008      	str	r0, [sp, #32]
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	d518      	bpl.n	8002be8 <_svfprintf_r+0x58>
 8002bb6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002bba:	b9ab      	cbnz	r3, 8002be8 <_svfprintf_r+0x58>
 8002bbc:	2140      	movs	r1, #64	; 0x40
 8002bbe:	4658      	mov	r0, fp
 8002bc0:	f001 fe2a 	bl	8004818 <_malloc_r>
 8002bc4:	f8ca 0000 	str.w	r0, [sl]
 8002bc8:	f8ca 0010 	str.w	r0, [sl, #16]
 8002bcc:	b948      	cbnz	r0, 8002be2 <_svfprintf_r+0x52>
 8002bce:	230c      	movs	r3, #12
 8002bd0:	f8cb 3000 	str.w	r3, [fp]
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bdc:	b03d      	add	sp, #244	; 0xf4
 8002bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be2:	2340      	movs	r3, #64	; 0x40
 8002be4:	f8ca 3014 	str.w	r3, [sl, #20]
 8002be8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002e50 <_svfprintf_r+0x2c0>
 8002bec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	ac2c      	add	r4, sp, #176	; 0xb0
 8002bf4:	941f      	str	r4, [sp, #124]	; 0x7c
 8002bf6:	9321      	str	r3, [sp, #132]	; 0x84
 8002bf8:	9320      	str	r3, [sp, #128]	; 0x80
 8002bfa:	9505      	str	r5, [sp, #20]
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	9311      	str	r3, [sp, #68]	; 0x44
 8002c00:	9310      	str	r3, [sp, #64]	; 0x40
 8002c02:	9309      	str	r3, [sp, #36]	; 0x24
 8002c04:	9d05      	ldr	r5, [sp, #20]
 8002c06:	462b      	mov	r3, r5
 8002c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c0c:	b112      	cbz	r2, 8002c14 <_svfprintf_r+0x84>
 8002c0e:	2a25      	cmp	r2, #37	; 0x25
 8002c10:	f040 8083 	bne.w	8002d1a <_svfprintf_r+0x18a>
 8002c14:	9b05      	ldr	r3, [sp, #20]
 8002c16:	1aee      	subs	r6, r5, r3
 8002c18:	d00d      	beq.n	8002c36 <_svfprintf_r+0xa6>
 8002c1a:	e884 0048 	stmia.w	r4, {r3, r6}
 8002c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c20:	4433      	add	r3, r6
 8002c22:	9321      	str	r3, [sp, #132]	; 0x84
 8002c24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c26:	3301      	adds	r3, #1
 8002c28:	2b07      	cmp	r3, #7
 8002c2a:	9320      	str	r3, [sp, #128]	; 0x80
 8002c2c:	dc77      	bgt.n	8002d1e <_svfprintf_r+0x18e>
 8002c2e:	3408      	adds	r4, #8
 8002c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c32:	4433      	add	r3, r6
 8002c34:	9309      	str	r3, [sp, #36]	; 0x24
 8002c36:	782b      	ldrb	r3, [r5, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8729 	beq.w	8003a90 <_svfprintf_r+0xf00>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	1c69      	adds	r1, r5, #1
 8002c42:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 39ff 	mov.w	r9, #4294967295
 8002c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8002c4e:	461d      	mov	r5, r3
 8002c50:	200a      	movs	r0, #10
 8002c52:	1c4e      	adds	r6, r1, #1
 8002c54:	7809      	ldrb	r1, [r1, #0]
 8002c56:	9605      	str	r6, [sp, #20]
 8002c58:	9102      	str	r1, [sp, #8]
 8002c5a:	9902      	ldr	r1, [sp, #8]
 8002c5c:	3920      	subs	r1, #32
 8002c5e:	2958      	cmp	r1, #88	; 0x58
 8002c60:	f200 8418 	bhi.w	8003494 <_svfprintf_r+0x904>
 8002c64:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002c68:	041600a6 	.word	0x041600a6
 8002c6c:	00ab0416 	.word	0x00ab0416
 8002c70:	04160416 	.word	0x04160416
 8002c74:	04160416 	.word	0x04160416
 8002c78:	04160416 	.word	0x04160416
 8002c7c:	006500ae 	.word	0x006500ae
 8002c80:	00b70416 	.word	0x00b70416
 8002c84:	041600ba 	.word	0x041600ba
 8002c88:	00da00d7 	.word	0x00da00d7
 8002c8c:	00da00da 	.word	0x00da00da
 8002c90:	00da00da 	.word	0x00da00da
 8002c94:	00da00da 	.word	0x00da00da
 8002c98:	00da00da 	.word	0x00da00da
 8002c9c:	04160416 	.word	0x04160416
 8002ca0:	04160416 	.word	0x04160416
 8002ca4:	04160416 	.word	0x04160416
 8002ca8:	04160416 	.word	0x04160416
 8002cac:	04160416 	.word	0x04160416
 8002cb0:	012b0115 	.word	0x012b0115
 8002cb4:	012b0416 	.word	0x012b0416
 8002cb8:	04160416 	.word	0x04160416
 8002cbc:	04160416 	.word	0x04160416
 8002cc0:	041600ed 	.word	0x041600ed
 8002cc4:	03400416 	.word	0x03400416
 8002cc8:	04160416 	.word	0x04160416
 8002ccc:	04160416 	.word	0x04160416
 8002cd0:	03a80416 	.word	0x03a80416
 8002cd4:	04160416 	.word	0x04160416
 8002cd8:	04160086 	.word	0x04160086
 8002cdc:	04160416 	.word	0x04160416
 8002ce0:	04160416 	.word	0x04160416
 8002ce4:	04160416 	.word	0x04160416
 8002ce8:	04160416 	.word	0x04160416
 8002cec:	01070416 	.word	0x01070416
 8002cf0:	012b006b 	.word	0x012b006b
 8002cf4:	012b012b 	.word	0x012b012b
 8002cf8:	006b00f0 	.word	0x006b00f0
 8002cfc:	04160416 	.word	0x04160416
 8002d00:	041600fa 	.word	0x041600fa
 8002d04:	03420322 	.word	0x03420322
 8002d08:	01010376 	.word	0x01010376
 8002d0c:	03870416 	.word	0x03870416
 8002d10:	03aa0416 	.word	0x03aa0416
 8002d14:	04160416 	.word	0x04160416
 8002d18:	03c2      	.short	0x03c2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	e773      	b.n	8002c06 <_svfprintf_r+0x76>
 8002d1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d20:	4651      	mov	r1, sl
 8002d22:	4658      	mov	r0, fp
 8002d24:	f002 fa72 	bl	800520c <__ssprint_r>
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	f040 8692 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8002d2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d30:	e77e      	b.n	8002c30 <_svfprintf_r+0xa0>
 8002d32:	2301      	movs	r3, #1
 8002d34:	222b      	movs	r2, #43	; 0x2b
 8002d36:	9905      	ldr	r1, [sp, #20]
 8002d38:	e78b      	b.n	8002c52 <_svfprintf_r+0xc2>
 8002d3a:	460f      	mov	r7, r1
 8002d3c:	e7fb      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002d3e:	b10b      	cbz	r3, 8002d44 <_svfprintf_r+0x1b4>
 8002d40:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002d44:	06ae      	lsls	r6, r5, #26
 8002d46:	f140 80aa 	bpl.w	8002e9e <_svfprintf_r+0x30e>
 8002d4a:	3707      	adds	r7, #7
 8002d4c:	f027 0707 	bic.w	r7, r7, #7
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002d58:	9304      	str	r3, [sp, #16]
 8002d5a:	2e00      	cmp	r6, #0
 8002d5c:	f177 0300 	sbcs.w	r3, r7, #0
 8002d60:	da06      	bge.n	8002d70 <_svfprintf_r+0x1e0>
 8002d62:	4276      	negs	r6, r6
 8002d64:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002d68:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002d6c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002d70:	2301      	movs	r3, #1
 8002d72:	e2ca      	b.n	800330a <_svfprintf_r+0x77a>
 8002d74:	b10b      	cbz	r3, 8002d7a <_svfprintf_r+0x1ea>
 8002d76:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <_svfprintf_r+0x2c8>)
 8002d7c:	9311      	str	r3, [sp, #68]	; 0x44
 8002d7e:	06ab      	lsls	r3, r5, #26
 8002d80:	f140 8339 	bpl.w	80033f6 <_svfprintf_r+0x866>
 8002d84:	3707      	adds	r7, #7
 8002d86:	f027 0707 	bic.w	r7, r7, #7
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002d92:	9304      	str	r3, [sp, #16]
 8002d94:	07e8      	lsls	r0, r5, #31
 8002d96:	d50b      	bpl.n	8002db0 <_svfprintf_r+0x220>
 8002d98:	ea56 0307 	orrs.w	r3, r6, r7
 8002d9c:	d008      	beq.n	8002db0 <_svfprintf_r+0x220>
 8002d9e:	2330      	movs	r3, #48	; 0x30
 8002da0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002da4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002da8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002dac:	f045 0502 	orr.w	r5, r5, #2
 8002db0:	2302      	movs	r3, #2
 8002db2:	e2a7      	b.n	8003304 <_svfprintf_r+0x774>
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	d1be      	bne.n	8002d36 <_svfprintf_r+0x1a6>
 8002db8:	2301      	movs	r3, #1
 8002dba:	2220      	movs	r2, #32
 8002dbc:	e7bb      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002dbe:	f045 0501 	orr.w	r5, r5, #1
 8002dc2:	e7b8      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002dc4:	683e      	ldr	r6, [r7, #0]
 8002dc6:	960a      	str	r6, [sp, #40]	; 0x28
 8002dc8:	2e00      	cmp	r6, #0
 8002dca:	f107 0104 	add.w	r1, r7, #4
 8002dce:	dab4      	bge.n	8002d3a <_svfprintf_r+0x1aa>
 8002dd0:	4276      	negs	r6, r6
 8002dd2:	960a      	str	r6, [sp, #40]	; 0x28
 8002dd4:	460f      	mov	r7, r1
 8002dd6:	f045 0504 	orr.w	r5, r5, #4
 8002dda:	e7ac      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002ddc:	9905      	ldr	r1, [sp, #20]
 8002dde:	1c4e      	adds	r6, r1, #1
 8002de0:	7809      	ldrb	r1, [r1, #0]
 8002de2:	9102      	str	r1, [sp, #8]
 8002de4:	292a      	cmp	r1, #42	; 0x2a
 8002de6:	d010      	beq.n	8002e0a <_svfprintf_r+0x27a>
 8002de8:	f04f 0900 	mov.w	r9, #0
 8002dec:	9605      	str	r6, [sp, #20]
 8002dee:	9902      	ldr	r1, [sp, #8]
 8002df0:	3930      	subs	r1, #48	; 0x30
 8002df2:	2909      	cmp	r1, #9
 8002df4:	f63f af31 	bhi.w	8002c5a <_svfprintf_r+0xca>
 8002df8:	fb00 1909 	mla	r9, r0, r9, r1
 8002dfc:	9905      	ldr	r1, [sp, #20]
 8002dfe:	460e      	mov	r6, r1
 8002e00:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002e04:	9102      	str	r1, [sp, #8]
 8002e06:	9605      	str	r6, [sp, #20]
 8002e08:	e7f1      	b.n	8002dee <_svfprintf_r+0x25e>
 8002e0a:	6839      	ldr	r1, [r7, #0]
 8002e0c:	9605      	str	r6, [sp, #20]
 8002e0e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8002e12:	3704      	adds	r7, #4
 8002e14:	e78f      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002e16:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002e1a:	e78c      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	910a      	str	r1, [sp, #40]	; 0x28
 8002e20:	9902      	ldr	r1, [sp, #8]
 8002e22:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002e24:	3930      	subs	r1, #48	; 0x30
 8002e26:	fb00 1106 	mla	r1, r0, r6, r1
 8002e2a:	910a      	str	r1, [sp, #40]	; 0x28
 8002e2c:	9905      	ldr	r1, [sp, #20]
 8002e2e:	460e      	mov	r6, r1
 8002e30:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002e34:	9102      	str	r1, [sp, #8]
 8002e36:	9902      	ldr	r1, [sp, #8]
 8002e38:	9605      	str	r6, [sp, #20]
 8002e3a:	3930      	subs	r1, #48	; 0x30
 8002e3c:	2909      	cmp	r1, #9
 8002e3e:	d9ef      	bls.n	8002e20 <_svfprintf_r+0x290>
 8002e40:	e70b      	b.n	8002c5a <_svfprintf_r+0xca>
 8002e42:	f045 0508 	orr.w	r5, r5, #8
 8002e46:	e776      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002e48:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002e4c:	e773      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002e4e:	bf00      	nop
	...
 8002e58:	08005b34 	.word	0x08005b34
 8002e5c:	9905      	ldr	r1, [sp, #20]
 8002e5e:	7809      	ldrb	r1, [r1, #0]
 8002e60:	296c      	cmp	r1, #108	; 0x6c
 8002e62:	d105      	bne.n	8002e70 <_svfprintf_r+0x2e0>
 8002e64:	9905      	ldr	r1, [sp, #20]
 8002e66:	3101      	adds	r1, #1
 8002e68:	9105      	str	r1, [sp, #20]
 8002e6a:	f045 0520 	orr.w	r5, r5, #32
 8002e6e:	e762      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002e70:	f045 0510 	orr.w	r5, r5, #16
 8002e74:	e75f      	b.n	8002d36 <_svfprintf_r+0x1a6>
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	9304      	str	r3, [sp, #16]
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002e82:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002e86:	f04f 0901 	mov.w	r9, #1
 8002e8a:	4637      	mov	r7, r6
 8002e8c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002e90:	e11b      	b.n	80030ca <_svfprintf_r+0x53a>
 8002e92:	b10b      	cbz	r3, 8002e98 <_svfprintf_r+0x308>
 8002e94:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e98:	f045 0510 	orr.w	r5, r5, #16
 8002e9c:	e752      	b.n	8002d44 <_svfprintf_r+0x1b4>
 8002e9e:	f015 0f10 	tst.w	r5, #16
 8002ea2:	f107 0304 	add.w	r3, r7, #4
 8002ea6:	d003      	beq.n	8002eb0 <_svfprintf_r+0x320>
 8002ea8:	683e      	ldr	r6, [r7, #0]
 8002eaa:	9304      	str	r3, [sp, #16]
 8002eac:	17f7      	asrs	r7, r6, #31
 8002eae:	e754      	b.n	8002d5a <_svfprintf_r+0x1ca>
 8002eb0:	683e      	ldr	r6, [r7, #0]
 8002eb2:	9304      	str	r3, [sp, #16]
 8002eb4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002eb8:	bf18      	it	ne
 8002eba:	b236      	sxthne	r6, r6
 8002ebc:	e7f6      	b.n	8002eac <_svfprintf_r+0x31c>
 8002ebe:	b10b      	cbz	r3, 8002ec4 <_svfprintf_r+0x334>
 8002ec0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002ec4:	3707      	adds	r7, #7
 8002ec6:	f027 0707 	bic.w	r7, r7, #7
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	ed97 7b00 	vldr	d7, [r7]
 8002ed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002ed8:	9b06      	ldr	r3, [sp, #24]
 8002eda:	9312      	str	r3, [sp, #72]	; 0x48
 8002edc:	9b07      	ldr	r3, [sp, #28]
 8002ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <_svfprintf_r+0x484>)
 8002eea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002eee:	f7fd fe19 	bl	8000b24 <__aeabi_dcmpun>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	f040 85d5 	bne.w	8003aa2 <_svfprintf_r+0xf12>
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	4b45      	ldr	r3, [pc, #276]	; (8003014 <_svfprintf_r+0x484>)
 8002efe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002f02:	f7fd fdf1 	bl	8000ae8 <__aeabi_dcmple>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	f040 85cb 	bne.w	8003aa2 <_svfprintf_r+0xf12>
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f14:	f7fd fdde 	bl	8000ad4 <__aeabi_dcmplt>
 8002f18:	b110      	cbz	r0, 8002f20 <_svfprintf_r+0x390>
 8002f1a:	232d      	movs	r3, #45	; 0x2d
 8002f1c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <_svfprintf_r+0x488>)
 8002f22:	4a3e      	ldr	r2, [pc, #248]	; (800301c <_svfprintf_r+0x48c>)
 8002f24:	9902      	ldr	r1, [sp, #8]
 8002f26:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002f2a:	2947      	cmp	r1, #71	; 0x47
 8002f2c:	bfcc      	ite	gt
 8002f2e:	4690      	movgt	r8, r2
 8002f30:	4698      	movle	r8, r3
 8002f32:	f04f 0903 	mov.w	r9, #3
 8002f36:	2600      	movs	r6, #0
 8002f38:	4637      	mov	r7, r6
 8002f3a:	e0c6      	b.n	80030ca <_svfprintf_r+0x53a>
 8002f3c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002f40:	d022      	beq.n	8002f88 <_svfprintf_r+0x3f8>
 8002f42:	9b02      	ldr	r3, [sp, #8]
 8002f44:	f023 0320 	bic.w	r3, r3, #32
 8002f48:	2b47      	cmp	r3, #71	; 0x47
 8002f4a:	d104      	bne.n	8002f56 <_svfprintf_r+0x3c6>
 8002f4c:	f1b9 0f00 	cmp.w	r9, #0
 8002f50:	bf08      	it	eq
 8002f52:	f04f 0901 	moveq.w	r9, #1
 8002f56:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8002f5c:	9b07      	ldr	r3, [sp, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da15      	bge.n	8002f8e <_svfprintf_r+0x3fe>
 8002f62:	9b06      	ldr	r3, [sp, #24]
 8002f64:	930e      	str	r3, [sp, #56]	; 0x38
 8002f66:	9b07      	ldr	r3, [sp, #28]
 8002f68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f6e:	232d      	movs	r3, #45	; 0x2d
 8002f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f72:	9b02      	ldr	r3, [sp, #8]
 8002f74:	f023 0720 	bic.w	r7, r3, #32
 8002f78:	2f46      	cmp	r7, #70	; 0x46
 8002f7a:	d00e      	beq.n	8002f9a <_svfprintf_r+0x40a>
 8002f7c:	2f45      	cmp	r7, #69	; 0x45
 8002f7e:	d146      	bne.n	800300e <_svfprintf_r+0x47e>
 8002f80:	f109 0601 	add.w	r6, r9, #1
 8002f84:	2102      	movs	r1, #2
 8002f86:	e00a      	b.n	8002f9e <_svfprintf_r+0x40e>
 8002f88:	f04f 0906 	mov.w	r9, #6
 8002f8c:	e7e3      	b.n	8002f56 <_svfprintf_r+0x3c6>
 8002f8e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002f92:	2300      	movs	r3, #0
 8002f94:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002f98:	e7ea      	b.n	8002f70 <_svfprintf_r+0x3e0>
 8002f9a:	464e      	mov	r6, r9
 8002f9c:	2103      	movs	r1, #3
 8002f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	ab1a      	add	r3, sp, #104	; 0x68
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4632      	mov	r2, r6
 8002fa8:	ab19      	add	r3, sp, #100	; 0x64
 8002faa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002fae:	4658      	mov	r0, fp
 8002fb0:	f000 fe4e 	bl	8003c50 <_dtoa_r>
 8002fb4:	2f47      	cmp	r7, #71	; 0x47
 8002fb6:	4680      	mov	r8, r0
 8002fb8:	d102      	bne.n	8002fc0 <_svfprintf_r+0x430>
 8002fba:	07e8      	lsls	r0, r5, #31
 8002fbc:	f140 857e 	bpl.w	8003abc <_svfprintf_r+0xf2c>
 8002fc0:	eb08 0306 	add.w	r3, r8, r6
 8002fc4:	2f46      	cmp	r7, #70	; 0x46
 8002fc6:	9303      	str	r3, [sp, #12]
 8002fc8:	d111      	bne.n	8002fee <_svfprintf_r+0x45e>
 8002fca:	f898 3000 	ldrb.w	r3, [r8]
 8002fce:	2b30      	cmp	r3, #48	; 0x30
 8002fd0:	d109      	bne.n	8002fe6 <_svfprintf_r+0x456>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002fda:	f7fd fd71 	bl	8000ac0 <__aeabi_dcmpeq>
 8002fde:	b910      	cbnz	r0, 8002fe6 <_svfprintf_r+0x456>
 8002fe0:	f1c6 0601 	rsb	r6, r6, #1
 8002fe4:	9619      	str	r6, [sp, #100]	; 0x64
 8002fe6:	9a03      	ldr	r2, [sp, #12]
 8002fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002fea:	441a      	add	r2, r3
 8002fec:	9203      	str	r2, [sp, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002ff6:	f7fd fd63 	bl	8000ac0 <__aeabi_dcmpeq>
 8002ffa:	b988      	cbnz	r0, 8003020 <_svfprintf_r+0x490>
 8002ffc:	2230      	movs	r2, #48	; 0x30
 8002ffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003000:	9903      	ldr	r1, [sp, #12]
 8003002:	4299      	cmp	r1, r3
 8003004:	d90e      	bls.n	8003024 <_svfprintf_r+0x494>
 8003006:	1c59      	adds	r1, r3, #1
 8003008:	911d      	str	r1, [sp, #116]	; 0x74
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e7f7      	b.n	8002ffe <_svfprintf_r+0x46e>
 800300e:	464e      	mov	r6, r9
 8003010:	e7b8      	b.n	8002f84 <_svfprintf_r+0x3f4>
 8003012:	bf00      	nop
 8003014:	7fefffff 	.word	0x7fefffff
 8003018:	08005b24 	.word	0x08005b24
 800301c:	08005b28 	.word	0x08005b28
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	931d      	str	r3, [sp, #116]	; 0x74
 8003024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003026:	2f47      	cmp	r7, #71	; 0x47
 8003028:	eba3 0308 	sub.w	r3, r3, r8
 800302c:	9303      	str	r3, [sp, #12]
 800302e:	f040 80fa 	bne.w	8003226 <_svfprintf_r+0x696>
 8003032:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003034:	1cd9      	adds	r1, r3, #3
 8003036:	db02      	blt.n	800303e <_svfprintf_r+0x4ae>
 8003038:	4599      	cmp	r9, r3
 800303a:	f280 8120 	bge.w	800327e <_svfprintf_r+0x6ee>
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	3b02      	subs	r3, #2
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003046:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800304a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800304e:	1e53      	subs	r3, r2, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	9319      	str	r3, [sp, #100]	; 0x64
 8003054:	bfb6      	itet	lt
 8003056:	f1c2 0301 	rsblt	r3, r2, #1
 800305a:	222b      	movge	r2, #43	; 0x2b
 800305c:	222d      	movlt	r2, #45	; 0x2d
 800305e:	2b09      	cmp	r3, #9
 8003060:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003064:	f340 80fb 	ble.w	800325e <_svfprintf_r+0x6ce>
 8003068:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800306c:	260a      	movs	r6, #10
 800306e:	fb93 f0f6 	sdiv	r0, r3, r6
 8003072:	fb06 3310 	mls	r3, r6, r0, r3
 8003076:	3330      	adds	r3, #48	; 0x30
 8003078:	2809      	cmp	r0, #9
 800307a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800307e:	f102 31ff 	add.w	r1, r2, #4294967295
 8003082:	4603      	mov	r3, r0
 8003084:	f300 80e4 	bgt.w	8003250 <_svfprintf_r+0x6c0>
 8003088:	3330      	adds	r3, #48	; 0x30
 800308a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800308e:	3a02      	subs	r2, #2
 8003090:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003094:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003098:	4282      	cmp	r2, r0
 800309a:	4619      	mov	r1, r3
 800309c:	f0c0 80da 	bcc.w	8003254 <_svfprintf_r+0x6c4>
 80030a0:	9a03      	ldr	r2, [sp, #12]
 80030a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80030a4:	1acb      	subs	r3, r1, r3
 80030a6:	2a01      	cmp	r2, #1
 80030a8:	9310      	str	r3, [sp, #64]	; 0x40
 80030aa:	eb03 0902 	add.w	r9, r3, r2
 80030ae:	dc02      	bgt.n	80030b6 <_svfprintf_r+0x526>
 80030b0:	f015 0701 	ands.w	r7, r5, #1
 80030b4:	d002      	beq.n	80030bc <_svfprintf_r+0x52c>
 80030b6:	9b08      	ldr	r3, [sp, #32]
 80030b8:	2700      	movs	r7, #0
 80030ba:	4499      	add	r9, r3
 80030bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030be:	b113      	cbz	r3, 80030c6 <_svfprintf_r+0x536>
 80030c0:	232d      	movs	r3, #45	; 0x2d
 80030c2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80030c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030c8:	2600      	movs	r6, #0
 80030ca:	454e      	cmp	r6, r9
 80030cc:	4633      	mov	r3, r6
 80030ce:	bfb8      	it	lt
 80030d0:	464b      	movlt	r3, r9
 80030d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80030d4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80030d8:	b113      	cbz	r3, 80030e0 <_svfprintf_r+0x550>
 80030da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030dc:	3301      	adds	r3, #1
 80030de:	930b      	str	r3, [sp, #44]	; 0x2c
 80030e0:	f015 0302 	ands.w	r3, r5, #2
 80030e4:	9314      	str	r3, [sp, #80]	; 0x50
 80030e6:	bf1e      	ittt	ne
 80030e8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80030ea:	3302      	addne	r3, #2
 80030ec:	930b      	strne	r3, [sp, #44]	; 0x2c
 80030ee:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80030f2:	9315      	str	r3, [sp, #84]	; 0x54
 80030f4:	d118      	bne.n	8003128 <_svfprintf_r+0x598>
 80030f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	930c      	str	r3, [sp, #48]	; 0x30
 8003100:	dd12      	ble.n	8003128 <_svfprintf_r+0x598>
 8003102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003104:	2b10      	cmp	r3, #16
 8003106:	4ba9      	ldr	r3, [pc, #676]	; (80033ac <_svfprintf_r+0x81c>)
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	f300 81d5 	bgt.w	80034b8 <_svfprintf_r+0x928>
 800310e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003110:	6063      	str	r3, [r4, #4]
 8003112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003114:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003116:	4413      	add	r3, r2
 8003118:	9321      	str	r3, [sp, #132]	; 0x84
 800311a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800311c:	3301      	adds	r3, #1
 800311e:	2b07      	cmp	r3, #7
 8003120:	9320      	str	r3, [sp, #128]	; 0x80
 8003122:	f300 81e2 	bgt.w	80034ea <_svfprintf_r+0x95a>
 8003126:	3408      	adds	r4, #8
 8003128:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800312c:	b173      	cbz	r3, 800314c <_svfprintf_r+0x5bc>
 800312e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	2301      	movs	r3, #1
 8003136:	6063      	str	r3, [r4, #4]
 8003138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800313a:	3301      	adds	r3, #1
 800313c:	9321      	str	r3, [sp, #132]	; 0x84
 800313e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003140:	3301      	adds	r3, #1
 8003142:	2b07      	cmp	r3, #7
 8003144:	9320      	str	r3, [sp, #128]	; 0x80
 8003146:	f300 81da 	bgt.w	80034fe <_svfprintf_r+0x96e>
 800314a:	3408      	adds	r4, #8
 800314c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800314e:	b16b      	cbz	r3, 800316c <_svfprintf_r+0x5dc>
 8003150:	ab18      	add	r3, sp, #96	; 0x60
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	2302      	movs	r3, #2
 8003156:	6063      	str	r3, [r4, #4]
 8003158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800315a:	3302      	adds	r3, #2
 800315c:	9321      	str	r3, [sp, #132]	; 0x84
 800315e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003160:	3301      	adds	r3, #1
 8003162:	2b07      	cmp	r3, #7
 8003164:	9320      	str	r3, [sp, #128]	; 0x80
 8003166:	f300 81d4 	bgt.w	8003512 <_svfprintf_r+0x982>
 800316a:	3408      	adds	r4, #8
 800316c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d114      	bne.n	800319c <_svfprintf_r+0x60c>
 8003172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	dd0f      	ble.n	800319c <_svfprintf_r+0x60c>
 800317c:	4a8c      	ldr	r2, [pc, #560]	; (80033b0 <_svfprintf_r+0x820>)
 800317e:	6022      	str	r2, [r4, #0]
 8003180:	2b10      	cmp	r3, #16
 8003182:	f300 81d0 	bgt.w	8003526 <_svfprintf_r+0x996>
 8003186:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	4413      	add	r3, r2
 800318c:	9321      	str	r3, [sp, #132]	; 0x84
 800318e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003190:	3301      	adds	r3, #1
 8003192:	2b07      	cmp	r3, #7
 8003194:	9320      	str	r3, [sp, #128]	; 0x80
 8003196:	f300 81df 	bgt.w	8003558 <_svfprintf_r+0x9c8>
 800319a:	3408      	adds	r4, #8
 800319c:	eba6 0609 	sub.w	r6, r6, r9
 80031a0:	2e00      	cmp	r6, #0
 80031a2:	dd0f      	ble.n	80031c4 <_svfprintf_r+0x634>
 80031a4:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <_svfprintf_r+0x820>)
 80031a6:	6023      	str	r3, [r4, #0]
 80031a8:	2e10      	cmp	r6, #16
 80031aa:	f300 81df 	bgt.w	800356c <_svfprintf_r+0x9dc>
 80031ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031b0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80031b2:	6066      	str	r6, [r4, #4]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4406      	add	r6, r0
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	9621      	str	r6, [sp, #132]	; 0x84
 80031bc:	9320      	str	r3, [sp, #128]	; 0x80
 80031be:	f300 81ec 	bgt.w	800359a <_svfprintf_r+0xa0a>
 80031c2:	3408      	adds	r4, #8
 80031c4:	05eb      	lsls	r3, r5, #23
 80031c6:	f100 81f2 	bmi.w	80035ae <_svfprintf_r+0xa1e>
 80031ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031cc:	e884 0300 	stmia.w	r4, {r8, r9}
 80031d0:	444b      	add	r3, r9
 80031d2:	9321      	str	r3, [sp, #132]	; 0x84
 80031d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031d6:	3301      	adds	r3, #1
 80031d8:	2b07      	cmp	r3, #7
 80031da:	9320      	str	r3, [sp, #128]	; 0x80
 80031dc:	f340 8419 	ble.w	8003a12 <_svfprintf_r+0xe82>
 80031e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80031e2:	4651      	mov	r1, sl
 80031e4:	4658      	mov	r0, fp
 80031e6:	f002 f811 	bl	800520c <__ssprint_r>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	f040 8431 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80031f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80031f2:	076b      	lsls	r3, r5, #29
 80031f4:	f100 8410 	bmi.w	8003a18 <_svfprintf_r+0xe88>
 80031f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031fe:	428a      	cmp	r2, r1
 8003200:	bfac      	ite	ge
 8003202:	189b      	addge	r3, r3, r2
 8003204:	185b      	addlt	r3, r3, r1
 8003206:	9309      	str	r3, [sp, #36]	; 0x24
 8003208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800320a:	b13b      	cbz	r3, 800321c <_svfprintf_r+0x68c>
 800320c:	aa1f      	add	r2, sp, #124	; 0x7c
 800320e:	4651      	mov	r1, sl
 8003210:	4658      	mov	r0, fp
 8003212:	f001 fffb 	bl	800520c <__ssprint_r>
 8003216:	2800      	cmp	r0, #0
 8003218:	f040 841b 	bne.w	8003a52 <_svfprintf_r+0xec2>
 800321c:	2300      	movs	r3, #0
 800321e:	9320      	str	r3, [sp, #128]	; 0x80
 8003220:	9f04      	ldr	r7, [sp, #16]
 8003222:	ac2c      	add	r4, sp, #176	; 0xb0
 8003224:	e4ee      	b.n	8002c04 <_svfprintf_r+0x74>
 8003226:	9b02      	ldr	r3, [sp, #8]
 8003228:	2b65      	cmp	r3, #101	; 0x65
 800322a:	f77f af0b 	ble.w	8003044 <_svfprintf_r+0x4b4>
 800322e:	9b02      	ldr	r3, [sp, #8]
 8003230:	2b66      	cmp	r3, #102	; 0x66
 8003232:	d124      	bne.n	800327e <_svfprintf_r+0x6ee>
 8003234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003236:	2b00      	cmp	r3, #0
 8003238:	dd19      	ble.n	800326e <_svfprintf_r+0x6de>
 800323a:	f1b9 0f00 	cmp.w	r9, #0
 800323e:	d101      	bne.n	8003244 <_svfprintf_r+0x6b4>
 8003240:	07ea      	lsls	r2, r5, #31
 8003242:	d502      	bpl.n	800324a <_svfprintf_r+0x6ba>
 8003244:	9a08      	ldr	r2, [sp, #32]
 8003246:	4413      	add	r3, r2
 8003248:	444b      	add	r3, r9
 800324a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800324c:	4699      	mov	r9, r3
 800324e:	e735      	b.n	80030bc <_svfprintf_r+0x52c>
 8003250:	460a      	mov	r2, r1
 8003252:	e70c      	b.n	800306e <_svfprintf_r+0x4de>
 8003254:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003258:	f803 1b01 	strb.w	r1, [r3], #1
 800325c:	e71c      	b.n	8003098 <_svfprintf_r+0x508>
 800325e:	2230      	movs	r2, #48	; 0x30
 8003260:	4413      	add	r3, r2
 8003262:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003266:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800326a:	a91c      	add	r1, sp, #112	; 0x70
 800326c:	e718      	b.n	80030a0 <_svfprintf_r+0x510>
 800326e:	f1b9 0f00 	cmp.w	r9, #0
 8003272:	d101      	bne.n	8003278 <_svfprintf_r+0x6e8>
 8003274:	07eb      	lsls	r3, r5, #31
 8003276:	d515      	bpl.n	80032a4 <_svfprintf_r+0x714>
 8003278:	9b08      	ldr	r3, [sp, #32]
 800327a:	3301      	adds	r3, #1
 800327c:	e7e4      	b.n	8003248 <_svfprintf_r+0x6b8>
 800327e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003280:	9b03      	ldr	r3, [sp, #12]
 8003282:	429a      	cmp	r2, r3
 8003284:	db06      	blt.n	8003294 <_svfprintf_r+0x704>
 8003286:	07ef      	lsls	r7, r5, #31
 8003288:	d50e      	bpl.n	80032a8 <_svfprintf_r+0x718>
 800328a:	9b08      	ldr	r3, [sp, #32]
 800328c:	4413      	add	r3, r2
 800328e:	2267      	movs	r2, #103	; 0x67
 8003290:	9202      	str	r2, [sp, #8]
 8003292:	e7da      	b.n	800324a <_svfprintf_r+0x6ba>
 8003294:	9b03      	ldr	r3, [sp, #12]
 8003296:	9908      	ldr	r1, [sp, #32]
 8003298:	2a00      	cmp	r2, #0
 800329a:	440b      	add	r3, r1
 800329c:	dcf7      	bgt.n	800328e <_svfprintf_r+0x6fe>
 800329e:	f1c2 0201 	rsb	r2, r2, #1
 80032a2:	e7f3      	b.n	800328c <_svfprintf_r+0x6fc>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e7d0      	b.n	800324a <_svfprintf_r+0x6ba>
 80032a8:	4613      	mov	r3, r2
 80032aa:	e7f0      	b.n	800328e <_svfprintf_r+0x6fe>
 80032ac:	b10b      	cbz	r3, 80032b2 <_svfprintf_r+0x722>
 80032ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80032b2:	f015 0f20 	tst.w	r5, #32
 80032b6:	f107 0304 	add.w	r3, r7, #4
 80032ba:	d008      	beq.n	80032ce <_svfprintf_r+0x73e>
 80032bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	17ce      	asrs	r6, r1, #31
 80032c2:	4608      	mov	r0, r1
 80032c4:	4631      	mov	r1, r6
 80032c6:	e9c2 0100 	strd	r0, r1, [r2]
 80032ca:	461f      	mov	r7, r3
 80032cc:	e49a      	b.n	8002c04 <_svfprintf_r+0x74>
 80032ce:	06ee      	lsls	r6, r5, #27
 80032d0:	d503      	bpl.n	80032da <_svfprintf_r+0x74a>
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032d6:	6011      	str	r1, [r2, #0]
 80032d8:	e7f7      	b.n	80032ca <_svfprintf_r+0x73a>
 80032da:	0668      	lsls	r0, r5, #25
 80032dc:	d5f9      	bpl.n	80032d2 <_svfprintf_r+0x742>
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80032e4:	8011      	strh	r1, [r2, #0]
 80032e6:	e7f0      	b.n	80032ca <_svfprintf_r+0x73a>
 80032e8:	f045 0510 	orr.w	r5, r5, #16
 80032ec:	f015 0320 	ands.w	r3, r5, #32
 80032f0:	d022      	beq.n	8003338 <_svfprintf_r+0x7a8>
 80032f2:	3707      	adds	r7, #7
 80032f4:	f027 0707 	bic.w	r7, r7, #7
 80032f8:	f107 0308 	add.w	r3, r7, #8
 80032fc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003300:	9304      	str	r3, [sp, #16]
 8003302:	2300      	movs	r3, #0
 8003304:	2200      	movs	r2, #0
 8003306:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800330a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800330e:	f000 83db 	beq.w	8003ac8 <_svfprintf_r+0xf38>
 8003312:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8003316:	920b      	str	r2, [sp, #44]	; 0x2c
 8003318:	ea56 0207 	orrs.w	r2, r6, r7
 800331c:	f040 83d9 	bne.w	8003ad2 <_svfprintf_r+0xf42>
 8003320:	f1b9 0f00 	cmp.w	r9, #0
 8003324:	f000 80aa 	beq.w	800347c <_svfprintf_r+0x8ec>
 8003328:	2b01      	cmp	r3, #1
 800332a:	d076      	beq.n	800341a <_svfprintf_r+0x88a>
 800332c:	2b02      	cmp	r3, #2
 800332e:	f000 8091 	beq.w	8003454 <_svfprintf_r+0x8c4>
 8003332:	2600      	movs	r6, #0
 8003334:	2700      	movs	r7, #0
 8003336:	e3d2      	b.n	8003ade <_svfprintf_r+0xf4e>
 8003338:	1d3a      	adds	r2, r7, #4
 800333a:	f015 0110 	ands.w	r1, r5, #16
 800333e:	9204      	str	r2, [sp, #16]
 8003340:	d002      	beq.n	8003348 <_svfprintf_r+0x7b8>
 8003342:	683e      	ldr	r6, [r7, #0]
 8003344:	2700      	movs	r7, #0
 8003346:	e7dd      	b.n	8003304 <_svfprintf_r+0x774>
 8003348:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800334c:	d0f9      	beq.n	8003342 <_svfprintf_r+0x7b2>
 800334e:	883e      	ldrh	r6, [r7, #0]
 8003350:	2700      	movs	r7, #0
 8003352:	e7d6      	b.n	8003302 <_svfprintf_r+0x772>
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	9304      	str	r3, [sp, #16]
 8003358:	2330      	movs	r3, #48	; 0x30
 800335a:	2278      	movs	r2, #120	; 0x78
 800335c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <_svfprintf_r+0x824>)
 8003362:	683e      	ldr	r6, [r7, #0]
 8003364:	9311      	str	r3, [sp, #68]	; 0x44
 8003366:	2700      	movs	r7, #0
 8003368:	f045 0502 	orr.w	r5, r5, #2
 800336c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003370:	2302      	movs	r3, #2
 8003372:	9202      	str	r2, [sp, #8]
 8003374:	e7c6      	b.n	8003304 <_svfprintf_r+0x774>
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	2600      	movs	r6, #0
 800337a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800337e:	9304      	str	r3, [sp, #16]
 8003380:	f8d7 8000 	ldr.w	r8, [r7]
 8003384:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003388:	d00a      	beq.n	80033a0 <_svfprintf_r+0x810>
 800338a:	464a      	mov	r2, r9
 800338c:	4631      	mov	r1, r6
 800338e:	4640      	mov	r0, r8
 8003390:	f7fc ff26 	bl	80001e0 <memchr>
 8003394:	2800      	cmp	r0, #0
 8003396:	f000 808d 	beq.w	80034b4 <_svfprintf_r+0x924>
 800339a:	eba0 0908 	sub.w	r9, r0, r8
 800339e:	e5cb      	b.n	8002f38 <_svfprintf_r+0x3a8>
 80033a0:	4640      	mov	r0, r8
 80033a2:	f7fc ff15 	bl	80001d0 <strlen>
 80033a6:	4681      	mov	r9, r0
 80033a8:	e5c6      	b.n	8002f38 <_svfprintf_r+0x3a8>
 80033aa:	bf00      	nop
 80033ac:	08005b58 	.word	0x08005b58
 80033b0:	08005b68 	.word	0x08005b68
 80033b4:	08005b45 	.word	0x08005b45
 80033b8:	f045 0510 	orr.w	r5, r5, #16
 80033bc:	06a9      	lsls	r1, r5, #26
 80033be:	d509      	bpl.n	80033d4 <_svfprintf_r+0x844>
 80033c0:	3707      	adds	r7, #7
 80033c2:	f027 0707 	bic.w	r7, r7, #7
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 80033ce:	9304      	str	r3, [sp, #16]
 80033d0:	2301      	movs	r3, #1
 80033d2:	e797      	b.n	8003304 <_svfprintf_r+0x774>
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	f015 0f10 	tst.w	r5, #16
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	d001      	beq.n	80033e2 <_svfprintf_r+0x852>
 80033de:	683e      	ldr	r6, [r7, #0]
 80033e0:	e002      	b.n	80033e8 <_svfprintf_r+0x858>
 80033e2:	066a      	lsls	r2, r5, #25
 80033e4:	d5fb      	bpl.n	80033de <_svfprintf_r+0x84e>
 80033e6:	883e      	ldrh	r6, [r7, #0]
 80033e8:	2700      	movs	r7, #0
 80033ea:	e7f1      	b.n	80033d0 <_svfprintf_r+0x840>
 80033ec:	b10b      	cbz	r3, 80033f2 <_svfprintf_r+0x862>
 80033ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80033f2:	4ba3      	ldr	r3, [pc, #652]	; (8003680 <_svfprintf_r+0xaf0>)
 80033f4:	e4c2      	b.n	8002d7c <_svfprintf_r+0x1ec>
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	f015 0f10 	tst.w	r5, #16
 80033fc:	9304      	str	r3, [sp, #16]
 80033fe:	d001      	beq.n	8003404 <_svfprintf_r+0x874>
 8003400:	683e      	ldr	r6, [r7, #0]
 8003402:	e002      	b.n	800340a <_svfprintf_r+0x87a>
 8003404:	066e      	lsls	r6, r5, #25
 8003406:	d5fb      	bpl.n	8003400 <_svfprintf_r+0x870>
 8003408:	883e      	ldrh	r6, [r7, #0]
 800340a:	2700      	movs	r7, #0
 800340c:	e4c2      	b.n	8002d94 <_svfprintf_r+0x204>
 800340e:	4643      	mov	r3, r8
 8003410:	e366      	b.n	8003ae0 <_svfprintf_r+0xf50>
 8003412:	2f00      	cmp	r7, #0
 8003414:	bf08      	it	eq
 8003416:	2e0a      	cmpeq	r6, #10
 8003418:	d205      	bcs.n	8003426 <_svfprintf_r+0x896>
 800341a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800341e:	3630      	adds	r6, #48	; 0x30
 8003420:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003424:	e377      	b.n	8003b16 <_svfprintf_r+0xf86>
 8003426:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800342a:	4630      	mov	r0, r6
 800342c:	4639      	mov	r1, r7
 800342e:	220a      	movs	r2, #10
 8003430:	2300      	movs	r3, #0
 8003432:	f7fd fbb5 	bl	8000ba0 <__aeabi_uldivmod>
 8003436:	3230      	adds	r2, #48	; 0x30
 8003438:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800343c:	2300      	movs	r3, #0
 800343e:	4630      	mov	r0, r6
 8003440:	4639      	mov	r1, r7
 8003442:	220a      	movs	r2, #10
 8003444:	f7fd fbac 	bl	8000ba0 <__aeabi_uldivmod>
 8003448:	4606      	mov	r6, r0
 800344a:	460f      	mov	r7, r1
 800344c:	ea56 0307 	orrs.w	r3, r6, r7
 8003450:	d1eb      	bne.n	800342a <_svfprintf_r+0x89a>
 8003452:	e360      	b.n	8003b16 <_svfprintf_r+0xf86>
 8003454:	2600      	movs	r6, #0
 8003456:	2700      	movs	r7, #0
 8003458:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800345c:	f006 030f 	and.w	r3, r6, #15
 8003460:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003468:	0933      	lsrs	r3, r6, #4
 800346a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800346e:	093a      	lsrs	r2, r7, #4
 8003470:	461e      	mov	r6, r3
 8003472:	4617      	mov	r7, r2
 8003474:	ea56 0307 	orrs.w	r3, r6, r7
 8003478:	d1f0      	bne.n	800345c <_svfprintf_r+0x8cc>
 800347a:	e34c      	b.n	8003b16 <_svfprintf_r+0xf86>
 800347c:	b93b      	cbnz	r3, 800348e <_svfprintf_r+0x8fe>
 800347e:	07ea      	lsls	r2, r5, #31
 8003480:	d505      	bpl.n	800348e <_svfprintf_r+0x8fe>
 8003482:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003486:	2330      	movs	r3, #48	; 0x30
 8003488:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800348c:	e343      	b.n	8003b16 <_svfprintf_r+0xf86>
 800348e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003492:	e340      	b.n	8003b16 <_svfprintf_r+0xf86>
 8003494:	b10b      	cbz	r3, 800349a <_svfprintf_r+0x90a>
 8003496:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800349a:	9b02      	ldr	r3, [sp, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 82f7 	beq.w	8003a90 <_svfprintf_r+0xf00>
 80034a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80034a6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80034aa:	2600      	movs	r6, #0
 80034ac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80034b0:	9704      	str	r7, [sp, #16]
 80034b2:	e4e8      	b.n	8002e86 <_svfprintf_r+0x2f6>
 80034b4:	4606      	mov	r6, r0
 80034b6:	e53f      	b.n	8002f38 <_svfprintf_r+0x3a8>
 80034b8:	2310      	movs	r3, #16
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034be:	3310      	adds	r3, #16
 80034c0:	9321      	str	r3, [sp, #132]	; 0x84
 80034c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034c4:	3301      	adds	r3, #1
 80034c6:	2b07      	cmp	r3, #7
 80034c8:	9320      	str	r3, [sp, #128]	; 0x80
 80034ca:	dc04      	bgt.n	80034d6 <_svfprintf_r+0x946>
 80034cc:	3408      	adds	r4, #8
 80034ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034d0:	3b10      	subs	r3, #16
 80034d2:	930c      	str	r3, [sp, #48]	; 0x30
 80034d4:	e615      	b.n	8003102 <_svfprintf_r+0x572>
 80034d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80034d8:	4651      	mov	r1, sl
 80034da:	4658      	mov	r0, fp
 80034dc:	f001 fe96 	bl	800520c <__ssprint_r>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	f040 82b6 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80034e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80034e8:	e7f1      	b.n	80034ce <_svfprintf_r+0x93e>
 80034ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80034ec:	4651      	mov	r1, sl
 80034ee:	4658      	mov	r0, fp
 80034f0:	f001 fe8c 	bl	800520c <__ssprint_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	f040 82ac 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80034fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80034fc:	e614      	b.n	8003128 <_svfprintf_r+0x598>
 80034fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8003500:	4651      	mov	r1, sl
 8003502:	4658      	mov	r0, fp
 8003504:	f001 fe82 	bl	800520c <__ssprint_r>
 8003508:	2800      	cmp	r0, #0
 800350a:	f040 82a2 	bne.w	8003a52 <_svfprintf_r+0xec2>
 800350e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003510:	e61c      	b.n	800314c <_svfprintf_r+0x5bc>
 8003512:	aa1f      	add	r2, sp, #124	; 0x7c
 8003514:	4651      	mov	r1, sl
 8003516:	4658      	mov	r0, fp
 8003518:	f001 fe78 	bl	800520c <__ssprint_r>
 800351c:	2800      	cmp	r0, #0
 800351e:	f040 8298 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003522:	ac2c      	add	r4, sp, #176	; 0xb0
 8003524:	e622      	b.n	800316c <_svfprintf_r+0x5dc>
 8003526:	2210      	movs	r2, #16
 8003528:	6062      	str	r2, [r4, #4]
 800352a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800352c:	3210      	adds	r2, #16
 800352e:	9221      	str	r2, [sp, #132]	; 0x84
 8003530:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003532:	3201      	adds	r2, #1
 8003534:	2a07      	cmp	r2, #7
 8003536:	9220      	str	r2, [sp, #128]	; 0x80
 8003538:	dc02      	bgt.n	8003540 <_svfprintf_r+0x9b0>
 800353a:	3408      	adds	r4, #8
 800353c:	3b10      	subs	r3, #16
 800353e:	e61d      	b.n	800317c <_svfprintf_r+0x5ec>
 8003540:	aa1f      	add	r2, sp, #124	; 0x7c
 8003542:	4651      	mov	r1, sl
 8003544:	4658      	mov	r0, fp
 8003546:	930c      	str	r3, [sp, #48]	; 0x30
 8003548:	f001 fe60 	bl	800520c <__ssprint_r>
 800354c:	2800      	cmp	r0, #0
 800354e:	f040 8280 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003552:	ac2c      	add	r4, sp, #176	; 0xb0
 8003554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003556:	e7f1      	b.n	800353c <_svfprintf_r+0x9ac>
 8003558:	aa1f      	add	r2, sp, #124	; 0x7c
 800355a:	4651      	mov	r1, sl
 800355c:	4658      	mov	r0, fp
 800355e:	f001 fe55 	bl	800520c <__ssprint_r>
 8003562:	2800      	cmp	r0, #0
 8003564:	f040 8275 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003568:	ac2c      	add	r4, sp, #176	; 0xb0
 800356a:	e617      	b.n	800319c <_svfprintf_r+0x60c>
 800356c:	2310      	movs	r3, #16
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003572:	3310      	adds	r3, #16
 8003574:	9321      	str	r3, [sp, #132]	; 0x84
 8003576:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003578:	3301      	adds	r3, #1
 800357a:	2b07      	cmp	r3, #7
 800357c:	9320      	str	r3, [sp, #128]	; 0x80
 800357e:	dc02      	bgt.n	8003586 <_svfprintf_r+0x9f6>
 8003580:	3408      	adds	r4, #8
 8003582:	3e10      	subs	r6, #16
 8003584:	e60e      	b.n	80031a4 <_svfprintf_r+0x614>
 8003586:	aa1f      	add	r2, sp, #124	; 0x7c
 8003588:	4651      	mov	r1, sl
 800358a:	4658      	mov	r0, fp
 800358c:	f001 fe3e 	bl	800520c <__ssprint_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	f040 825e 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003596:	ac2c      	add	r4, sp, #176	; 0xb0
 8003598:	e7f3      	b.n	8003582 <_svfprintf_r+0x9f2>
 800359a:	aa1f      	add	r2, sp, #124	; 0x7c
 800359c:	4651      	mov	r1, sl
 800359e:	4658      	mov	r0, fp
 80035a0:	f001 fe34 	bl	800520c <__ssprint_r>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	f040 8254 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80035aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80035ac:	e60a      	b.n	80031c4 <_svfprintf_r+0x634>
 80035ae:	9b02      	ldr	r3, [sp, #8]
 80035b0:	2b65      	cmp	r3, #101	; 0x65
 80035b2:	f340 81a9 	ble.w	8003908 <_svfprintf_r+0xd78>
 80035b6:	2200      	movs	r2, #0
 80035b8:	2300      	movs	r3, #0
 80035ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035be:	f7fd fa7f 	bl	8000ac0 <__aeabi_dcmpeq>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d062      	beq.n	800368c <_svfprintf_r+0xafc>
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <_svfprintf_r+0xaf4>)
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	2301      	movs	r3, #1
 80035cc:	6063      	str	r3, [r4, #4]
 80035ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035d0:	3301      	adds	r3, #1
 80035d2:	9321      	str	r3, [sp, #132]	; 0x84
 80035d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035d6:	3301      	adds	r3, #1
 80035d8:	2b07      	cmp	r3, #7
 80035da:	9320      	str	r3, [sp, #128]	; 0x80
 80035dc:	dc25      	bgt.n	800362a <_svfprintf_r+0xa9a>
 80035de:	3408      	adds	r4, #8
 80035e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80035e2:	9a03      	ldr	r2, [sp, #12]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	db02      	blt.n	80035ee <_svfprintf_r+0xa5e>
 80035e8:	07ee      	lsls	r6, r5, #31
 80035ea:	f57f ae02 	bpl.w	80031f2 <_svfprintf_r+0x662>
 80035ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	9b08      	ldr	r3, [sp, #32]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	9a08      	ldr	r2, [sp, #32]
 80035f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035fa:	4413      	add	r3, r2
 80035fc:	9321      	str	r3, [sp, #132]	; 0x84
 80035fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003600:	3301      	adds	r3, #1
 8003602:	2b07      	cmp	r3, #7
 8003604:	9320      	str	r3, [sp, #128]	; 0x80
 8003606:	dc1a      	bgt.n	800363e <_svfprintf_r+0xaae>
 8003608:	3408      	adds	r4, #8
 800360a:	9b03      	ldr	r3, [sp, #12]
 800360c:	1e5e      	subs	r6, r3, #1
 800360e:	2e00      	cmp	r6, #0
 8003610:	f77f adef 	ble.w	80031f2 <_svfprintf_r+0x662>
 8003614:	4f1c      	ldr	r7, [pc, #112]	; (8003688 <_svfprintf_r+0xaf8>)
 8003616:	f04f 0810 	mov.w	r8, #16
 800361a:	2e10      	cmp	r6, #16
 800361c:	6027      	str	r7, [r4, #0]
 800361e:	dc18      	bgt.n	8003652 <_svfprintf_r+0xac2>
 8003620:	6066      	str	r6, [r4, #4]
 8003622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003624:	441e      	add	r6, r3
 8003626:	9621      	str	r6, [sp, #132]	; 0x84
 8003628:	e5d4      	b.n	80031d4 <_svfprintf_r+0x644>
 800362a:	aa1f      	add	r2, sp, #124	; 0x7c
 800362c:	4651      	mov	r1, sl
 800362e:	4658      	mov	r0, fp
 8003630:	f001 fdec 	bl	800520c <__ssprint_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	f040 820c 	bne.w	8003a52 <_svfprintf_r+0xec2>
 800363a:	ac2c      	add	r4, sp, #176	; 0xb0
 800363c:	e7d0      	b.n	80035e0 <_svfprintf_r+0xa50>
 800363e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003640:	4651      	mov	r1, sl
 8003642:	4658      	mov	r0, fp
 8003644:	f001 fde2 	bl	800520c <__ssprint_r>
 8003648:	2800      	cmp	r0, #0
 800364a:	f040 8202 	bne.w	8003a52 <_svfprintf_r+0xec2>
 800364e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003650:	e7db      	b.n	800360a <_svfprintf_r+0xa7a>
 8003652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003654:	f8c4 8004 	str.w	r8, [r4, #4]
 8003658:	3310      	adds	r3, #16
 800365a:	9321      	str	r3, [sp, #132]	; 0x84
 800365c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800365e:	3301      	adds	r3, #1
 8003660:	2b07      	cmp	r3, #7
 8003662:	9320      	str	r3, [sp, #128]	; 0x80
 8003664:	dc02      	bgt.n	800366c <_svfprintf_r+0xadc>
 8003666:	3408      	adds	r4, #8
 8003668:	3e10      	subs	r6, #16
 800366a:	e7d6      	b.n	800361a <_svfprintf_r+0xa8a>
 800366c:	aa1f      	add	r2, sp, #124	; 0x7c
 800366e:	4651      	mov	r1, sl
 8003670:	4658      	mov	r0, fp
 8003672:	f001 fdcb 	bl	800520c <__ssprint_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	f040 81eb 	bne.w	8003a52 <_svfprintf_r+0xec2>
 800367c:	ac2c      	add	r4, sp, #176	; 0xb0
 800367e:	e7f3      	b.n	8003668 <_svfprintf_r+0xad8>
 8003680:	08005b45 	.word	0x08005b45
 8003684:	08005b56 	.word	0x08005b56
 8003688:	08005b68 	.word	0x08005b68
 800368c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800368e:	2b00      	cmp	r3, #0
 8003690:	dc7a      	bgt.n	8003788 <_svfprintf_r+0xbf8>
 8003692:	4b9b      	ldr	r3, [pc, #620]	; (8003900 <_svfprintf_r+0xd70>)
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	2301      	movs	r3, #1
 8003698:	6063      	str	r3, [r4, #4]
 800369a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800369c:	3301      	adds	r3, #1
 800369e:	9321      	str	r3, [sp, #132]	; 0x84
 80036a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036a2:	3301      	adds	r3, #1
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	9320      	str	r3, [sp, #128]	; 0x80
 80036a8:	dc44      	bgt.n	8003734 <_svfprintf_r+0xba4>
 80036aa:	3408      	adds	r4, #8
 80036ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036ae:	b923      	cbnz	r3, 80036ba <_svfprintf_r+0xb2a>
 80036b0:	9b03      	ldr	r3, [sp, #12]
 80036b2:	b913      	cbnz	r3, 80036ba <_svfprintf_r+0xb2a>
 80036b4:	07e8      	lsls	r0, r5, #31
 80036b6:	f57f ad9c 	bpl.w	80031f2 <_svfprintf_r+0x662>
 80036ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	9b08      	ldr	r3, [sp, #32]
 80036c0:	6063      	str	r3, [r4, #4]
 80036c2:	9a08      	ldr	r2, [sp, #32]
 80036c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036c6:	4413      	add	r3, r2
 80036c8:	9321      	str	r3, [sp, #132]	; 0x84
 80036ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80036cc:	3301      	adds	r3, #1
 80036ce:	2b07      	cmp	r3, #7
 80036d0:	9320      	str	r3, [sp, #128]	; 0x80
 80036d2:	dc39      	bgt.n	8003748 <_svfprintf_r+0xbb8>
 80036d4:	f104 0308 	add.w	r3, r4, #8
 80036d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80036da:	2e00      	cmp	r6, #0
 80036dc:	da19      	bge.n	8003712 <_svfprintf_r+0xb82>
 80036de:	4f89      	ldr	r7, [pc, #548]	; (8003904 <_svfprintf_r+0xd74>)
 80036e0:	4276      	negs	r6, r6
 80036e2:	2410      	movs	r4, #16
 80036e4:	2e10      	cmp	r6, #16
 80036e6:	601f      	str	r7, [r3, #0]
 80036e8:	dc38      	bgt.n	800375c <_svfprintf_r+0xbcc>
 80036ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80036ec:	605e      	str	r6, [r3, #4]
 80036ee:	4416      	add	r6, r2
 80036f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80036f2:	9621      	str	r6, [sp, #132]	; 0x84
 80036f4:	3201      	adds	r2, #1
 80036f6:	2a07      	cmp	r2, #7
 80036f8:	f103 0308 	add.w	r3, r3, #8
 80036fc:	9220      	str	r2, [sp, #128]	; 0x80
 80036fe:	dd08      	ble.n	8003712 <_svfprintf_r+0xb82>
 8003700:	aa1f      	add	r2, sp, #124	; 0x7c
 8003702:	4651      	mov	r1, sl
 8003704:	4658      	mov	r0, fp
 8003706:	f001 fd81 	bl	800520c <__ssprint_r>
 800370a:	2800      	cmp	r0, #0
 800370c:	f040 81a1 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003710:	ab2c      	add	r3, sp, #176	; 0xb0
 8003712:	9a03      	ldr	r2, [sp, #12]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	9903      	ldr	r1, [sp, #12]
 8003718:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800371a:	f8c3 8000 	str.w	r8, [r3]
 800371e:	440a      	add	r2, r1
 8003720:	9221      	str	r2, [sp, #132]	; 0x84
 8003722:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003724:	3201      	adds	r2, #1
 8003726:	2a07      	cmp	r2, #7
 8003728:	9220      	str	r2, [sp, #128]	; 0x80
 800372a:	f73f ad59 	bgt.w	80031e0 <_svfprintf_r+0x650>
 800372e:	f103 0408 	add.w	r4, r3, #8
 8003732:	e55e      	b.n	80031f2 <_svfprintf_r+0x662>
 8003734:	aa1f      	add	r2, sp, #124	; 0x7c
 8003736:	4651      	mov	r1, sl
 8003738:	4658      	mov	r0, fp
 800373a:	f001 fd67 	bl	800520c <__ssprint_r>
 800373e:	2800      	cmp	r0, #0
 8003740:	f040 8187 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003744:	ac2c      	add	r4, sp, #176	; 0xb0
 8003746:	e7b1      	b.n	80036ac <_svfprintf_r+0xb1c>
 8003748:	aa1f      	add	r2, sp, #124	; 0x7c
 800374a:	4651      	mov	r1, sl
 800374c:	4658      	mov	r0, fp
 800374e:	f001 fd5d 	bl	800520c <__ssprint_r>
 8003752:	2800      	cmp	r0, #0
 8003754:	f040 817d 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003758:	ab2c      	add	r3, sp, #176	; 0xb0
 800375a:	e7bd      	b.n	80036d8 <_svfprintf_r+0xb48>
 800375c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800375e:	605c      	str	r4, [r3, #4]
 8003760:	3210      	adds	r2, #16
 8003762:	9221      	str	r2, [sp, #132]	; 0x84
 8003764:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003766:	3201      	adds	r2, #1
 8003768:	2a07      	cmp	r2, #7
 800376a:	9220      	str	r2, [sp, #128]	; 0x80
 800376c:	dc02      	bgt.n	8003774 <_svfprintf_r+0xbe4>
 800376e:	3308      	adds	r3, #8
 8003770:	3e10      	subs	r6, #16
 8003772:	e7b7      	b.n	80036e4 <_svfprintf_r+0xb54>
 8003774:	aa1f      	add	r2, sp, #124	; 0x7c
 8003776:	4651      	mov	r1, sl
 8003778:	4658      	mov	r0, fp
 800377a:	f001 fd47 	bl	800520c <__ssprint_r>
 800377e:	2800      	cmp	r0, #0
 8003780:	f040 8167 	bne.w	8003a52 <_svfprintf_r+0xec2>
 8003784:	ab2c      	add	r3, sp, #176	; 0xb0
 8003786:	e7f3      	b.n	8003770 <_svfprintf_r+0xbe0>
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	42bb      	cmp	r3, r7
 800378c:	bfa8      	it	ge
 800378e:	463b      	movge	r3, r7
 8003790:	2b00      	cmp	r3, #0
 8003792:	461e      	mov	r6, r3
 8003794:	dd0b      	ble.n	80037ae <_svfprintf_r+0xc1e>
 8003796:	6063      	str	r3, [r4, #4]
 8003798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800379a:	f8c4 8000 	str.w	r8, [r4]
 800379e:	4433      	add	r3, r6
 80037a0:	9321      	str	r3, [sp, #132]	; 0x84
 80037a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037a4:	3301      	adds	r3, #1
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	9320      	str	r3, [sp, #128]	; 0x80
 80037aa:	dc5f      	bgt.n	800386c <_svfprintf_r+0xcdc>
 80037ac:	3408      	adds	r4, #8
 80037ae:	2e00      	cmp	r6, #0
 80037b0:	bfac      	ite	ge
 80037b2:	1bbe      	subge	r6, r7, r6
 80037b4:	463e      	movlt	r6, r7
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	dd0f      	ble.n	80037da <_svfprintf_r+0xc4a>
 80037ba:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8003904 <_svfprintf_r+0xd74>
 80037be:	f8c4 9000 	str.w	r9, [r4]
 80037c2:	2e10      	cmp	r6, #16
 80037c4:	dc5c      	bgt.n	8003880 <_svfprintf_r+0xcf0>
 80037c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037c8:	6066      	str	r6, [r4, #4]
 80037ca:	441e      	add	r6, r3
 80037cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037ce:	9621      	str	r6, [sp, #132]	; 0x84
 80037d0:	3301      	adds	r3, #1
 80037d2:	2b07      	cmp	r3, #7
 80037d4:	9320      	str	r3, [sp, #128]	; 0x80
 80037d6:	dc6a      	bgt.n	80038ae <_svfprintf_r+0xd1e>
 80037d8:	3408      	adds	r4, #8
 80037da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037dc:	9a03      	ldr	r2, [sp, #12]
 80037de:	4293      	cmp	r3, r2
 80037e0:	db01      	blt.n	80037e6 <_svfprintf_r+0xc56>
 80037e2:	07e9      	lsls	r1, r5, #31
 80037e4:	d50d      	bpl.n	8003802 <_svfprintf_r+0xc72>
 80037e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	9b08      	ldr	r3, [sp, #32]
 80037ec:	6063      	str	r3, [r4, #4]
 80037ee:	9a08      	ldr	r2, [sp, #32]
 80037f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037f2:	4413      	add	r3, r2
 80037f4:	9321      	str	r3, [sp, #132]	; 0x84
 80037f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037f8:	3301      	adds	r3, #1
 80037fa:	2b07      	cmp	r3, #7
 80037fc:	9320      	str	r3, [sp, #128]	; 0x80
 80037fe:	dc60      	bgt.n	80038c2 <_svfprintf_r+0xd32>
 8003800:	3408      	adds	r4, #8
 8003802:	9b03      	ldr	r3, [sp, #12]
 8003804:	9a03      	ldr	r2, [sp, #12]
 8003806:	1bde      	subs	r6, r3, r7
 8003808:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	429e      	cmp	r6, r3
 800380e:	bfa8      	it	ge
 8003810:	461e      	movge	r6, r3
 8003812:	2e00      	cmp	r6, #0
 8003814:	dd0b      	ble.n	800382e <_svfprintf_r+0xc9e>
 8003816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003818:	6066      	str	r6, [r4, #4]
 800381a:	4433      	add	r3, r6
 800381c:	9321      	str	r3, [sp, #132]	; 0x84
 800381e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003820:	3301      	adds	r3, #1
 8003822:	4447      	add	r7, r8
 8003824:	2b07      	cmp	r3, #7
 8003826:	6027      	str	r7, [r4, #0]
 8003828:	9320      	str	r3, [sp, #128]	; 0x80
 800382a:	dc54      	bgt.n	80038d6 <_svfprintf_r+0xd46>
 800382c:	3408      	adds	r4, #8
 800382e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003830:	9a03      	ldr	r2, [sp, #12]
 8003832:	2e00      	cmp	r6, #0
 8003834:	eba2 0303 	sub.w	r3, r2, r3
 8003838:	bfac      	ite	ge
 800383a:	1b9e      	subge	r6, r3, r6
 800383c:	461e      	movlt	r6, r3
 800383e:	2e00      	cmp	r6, #0
 8003840:	f77f acd7 	ble.w	80031f2 <_svfprintf_r+0x662>
 8003844:	4f2f      	ldr	r7, [pc, #188]	; (8003904 <_svfprintf_r+0xd74>)
 8003846:	f04f 0810 	mov.w	r8, #16
 800384a:	2e10      	cmp	r6, #16
 800384c:	6027      	str	r7, [r4, #0]
 800384e:	f77f aee7 	ble.w	8003620 <_svfprintf_r+0xa90>
 8003852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003854:	f8c4 8004 	str.w	r8, [r4, #4]
 8003858:	3310      	adds	r3, #16
 800385a:	9321      	str	r3, [sp, #132]	; 0x84
 800385c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800385e:	3301      	adds	r3, #1
 8003860:	2b07      	cmp	r3, #7
 8003862:	9320      	str	r3, [sp, #128]	; 0x80
 8003864:	dc41      	bgt.n	80038ea <_svfprintf_r+0xd5a>
 8003866:	3408      	adds	r4, #8
 8003868:	3e10      	subs	r6, #16
 800386a:	e7ee      	b.n	800384a <_svfprintf_r+0xcba>
 800386c:	aa1f      	add	r2, sp, #124	; 0x7c
 800386e:	4651      	mov	r1, sl
 8003870:	4658      	mov	r0, fp
 8003872:	f001 fccb 	bl	800520c <__ssprint_r>
 8003876:	2800      	cmp	r0, #0
 8003878:	f040 80eb 	bne.w	8003a52 <_svfprintf_r+0xec2>
 800387c:	ac2c      	add	r4, sp, #176	; 0xb0
 800387e:	e796      	b.n	80037ae <_svfprintf_r+0xc1e>
 8003880:	2310      	movs	r3, #16
 8003882:	6063      	str	r3, [r4, #4]
 8003884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003886:	3310      	adds	r3, #16
 8003888:	9321      	str	r3, [sp, #132]	; 0x84
 800388a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800388c:	3301      	adds	r3, #1
 800388e:	2b07      	cmp	r3, #7
 8003890:	9320      	str	r3, [sp, #128]	; 0x80
 8003892:	dc02      	bgt.n	800389a <_svfprintf_r+0xd0a>
 8003894:	3408      	adds	r4, #8
 8003896:	3e10      	subs	r6, #16
 8003898:	e791      	b.n	80037be <_svfprintf_r+0xc2e>
 800389a:	aa1f      	add	r2, sp, #124	; 0x7c
 800389c:	4651      	mov	r1, sl
 800389e:	4658      	mov	r0, fp
 80038a0:	f001 fcb4 	bl	800520c <__ssprint_r>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f040 80d4 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80038aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80038ac:	e7f3      	b.n	8003896 <_svfprintf_r+0xd06>
 80038ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80038b0:	4651      	mov	r1, sl
 80038b2:	4658      	mov	r0, fp
 80038b4:	f001 fcaa 	bl	800520c <__ssprint_r>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	f040 80ca 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80038be:	ac2c      	add	r4, sp, #176	; 0xb0
 80038c0:	e78b      	b.n	80037da <_svfprintf_r+0xc4a>
 80038c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80038c4:	4651      	mov	r1, sl
 80038c6:	4658      	mov	r0, fp
 80038c8:	f001 fca0 	bl	800520c <__ssprint_r>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	f040 80c0 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80038d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80038d4:	e795      	b.n	8003802 <_svfprintf_r+0xc72>
 80038d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80038d8:	4651      	mov	r1, sl
 80038da:	4658      	mov	r0, fp
 80038dc:	f001 fc96 	bl	800520c <__ssprint_r>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	f040 80b6 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80038e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80038e8:	e7a1      	b.n	800382e <_svfprintf_r+0xc9e>
 80038ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80038ec:	4651      	mov	r1, sl
 80038ee:	4658      	mov	r0, fp
 80038f0:	f001 fc8c 	bl	800520c <__ssprint_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	f040 80ac 	bne.w	8003a52 <_svfprintf_r+0xec2>
 80038fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80038fc:	e7b4      	b.n	8003868 <_svfprintf_r+0xcd8>
 80038fe:	bf00      	nop
 8003900:	08005b56 	.word	0x08005b56
 8003904:	08005b68 	.word	0x08005b68
 8003908:	9b03      	ldr	r3, [sp, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	dc01      	bgt.n	8003912 <_svfprintf_r+0xd82>
 800390e:	07ea      	lsls	r2, r5, #31
 8003910:	d576      	bpl.n	8003a00 <_svfprintf_r+0xe70>
 8003912:	2301      	movs	r3, #1
 8003914:	6063      	str	r3, [r4, #4]
 8003916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003918:	f8c4 8000 	str.w	r8, [r4]
 800391c:	3301      	adds	r3, #1
 800391e:	9321      	str	r3, [sp, #132]	; 0x84
 8003920:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003922:	3301      	adds	r3, #1
 8003924:	2b07      	cmp	r3, #7
 8003926:	9320      	str	r3, [sp, #128]	; 0x80
 8003928:	dc36      	bgt.n	8003998 <_svfprintf_r+0xe08>
 800392a:	3408      	adds	r4, #8
 800392c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	9b08      	ldr	r3, [sp, #32]
 8003932:	6063      	str	r3, [r4, #4]
 8003934:	9a08      	ldr	r2, [sp, #32]
 8003936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003938:	4413      	add	r3, r2
 800393a:	9321      	str	r3, [sp, #132]	; 0x84
 800393c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800393e:	3301      	adds	r3, #1
 8003940:	2b07      	cmp	r3, #7
 8003942:	9320      	str	r3, [sp, #128]	; 0x80
 8003944:	dc31      	bgt.n	80039aa <_svfprintf_r+0xe1a>
 8003946:	3408      	adds	r4, #8
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003950:	f7fd f8b6 	bl	8000ac0 <__aeabi_dcmpeq>
 8003954:	9b03      	ldr	r3, [sp, #12]
 8003956:	1e5e      	subs	r6, r3, #1
 8003958:	2800      	cmp	r0, #0
 800395a:	d12f      	bne.n	80039bc <_svfprintf_r+0xe2c>
 800395c:	f108 0301 	add.w	r3, r8, #1
 8003960:	e884 0048 	stmia.w	r4, {r3, r6}
 8003964:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003966:	9a03      	ldr	r2, [sp, #12]
 8003968:	3b01      	subs	r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	9321      	str	r3, [sp, #132]	; 0x84
 800396e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003970:	3301      	adds	r3, #1
 8003972:	2b07      	cmp	r3, #7
 8003974:	9320      	str	r3, [sp, #128]	; 0x80
 8003976:	dd4a      	ble.n	8003a0e <_svfprintf_r+0xe7e>
 8003978:	aa1f      	add	r2, sp, #124	; 0x7c
 800397a:	4651      	mov	r1, sl
 800397c:	4658      	mov	r0, fp
 800397e:	f001 fc45 	bl	800520c <__ssprint_r>
 8003982:	2800      	cmp	r0, #0
 8003984:	d165      	bne.n	8003a52 <_svfprintf_r+0xec2>
 8003986:	ac2c      	add	r4, sp, #176	; 0xb0
 8003988:	ab1b      	add	r3, sp, #108	; 0x6c
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800398e:	6063      	str	r3, [r4, #4]
 8003990:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003994:	4413      	add	r3, r2
 8003996:	e41c      	b.n	80031d2 <_svfprintf_r+0x642>
 8003998:	aa1f      	add	r2, sp, #124	; 0x7c
 800399a:	4651      	mov	r1, sl
 800399c:	4658      	mov	r0, fp
 800399e:	f001 fc35 	bl	800520c <__ssprint_r>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d155      	bne.n	8003a52 <_svfprintf_r+0xec2>
 80039a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80039a8:	e7c0      	b.n	800392c <_svfprintf_r+0xd9c>
 80039aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80039ac:	4651      	mov	r1, sl
 80039ae:	4658      	mov	r0, fp
 80039b0:	f001 fc2c 	bl	800520c <__ssprint_r>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d14c      	bne.n	8003a52 <_svfprintf_r+0xec2>
 80039b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80039ba:	e7c5      	b.n	8003948 <_svfprintf_r+0xdb8>
 80039bc:	2e00      	cmp	r6, #0
 80039be:	dde3      	ble.n	8003988 <_svfprintf_r+0xdf8>
 80039c0:	4f59      	ldr	r7, [pc, #356]	; (8003b28 <_svfprintf_r+0xf98>)
 80039c2:	f04f 0810 	mov.w	r8, #16
 80039c6:	2e10      	cmp	r6, #16
 80039c8:	6027      	str	r7, [r4, #0]
 80039ca:	dc04      	bgt.n	80039d6 <_svfprintf_r+0xe46>
 80039cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039ce:	6066      	str	r6, [r4, #4]
 80039d0:	441e      	add	r6, r3
 80039d2:	9621      	str	r6, [sp, #132]	; 0x84
 80039d4:	e7cb      	b.n	800396e <_svfprintf_r+0xdde>
 80039d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039d8:	f8c4 8004 	str.w	r8, [r4, #4]
 80039dc:	3310      	adds	r3, #16
 80039de:	9321      	str	r3, [sp, #132]	; 0x84
 80039e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80039e2:	3301      	adds	r3, #1
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	9320      	str	r3, [sp, #128]	; 0x80
 80039e8:	dc02      	bgt.n	80039f0 <_svfprintf_r+0xe60>
 80039ea:	3408      	adds	r4, #8
 80039ec:	3e10      	subs	r6, #16
 80039ee:	e7ea      	b.n	80039c6 <_svfprintf_r+0xe36>
 80039f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80039f2:	4651      	mov	r1, sl
 80039f4:	4658      	mov	r0, fp
 80039f6:	f001 fc09 	bl	800520c <__ssprint_r>
 80039fa:	bb50      	cbnz	r0, 8003a52 <_svfprintf_r+0xec2>
 80039fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80039fe:	e7f5      	b.n	80039ec <_svfprintf_r+0xe5c>
 8003a00:	2301      	movs	r3, #1
 8003a02:	6063      	str	r3, [r4, #4]
 8003a04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a06:	f8c4 8000 	str.w	r8, [r4]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	e7ae      	b.n	800396c <_svfprintf_r+0xddc>
 8003a0e:	3408      	adds	r4, #8
 8003a10:	e7ba      	b.n	8003988 <_svfprintf_r+0xdf8>
 8003a12:	3408      	adds	r4, #8
 8003a14:	f7ff bbed 	b.w	80031f2 <_svfprintf_r+0x662>
 8003a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a1c:	1a9d      	subs	r5, r3, r2
 8003a1e:	2d00      	cmp	r5, #0
 8003a20:	f77f abea 	ble.w	80031f8 <_svfprintf_r+0x668>
 8003a24:	2610      	movs	r6, #16
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <_svfprintf_r+0xf9c>)
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	2d10      	cmp	r5, #16
 8003a2c:	dc1b      	bgt.n	8003a66 <_svfprintf_r+0xed6>
 8003a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a30:	6065      	str	r5, [r4, #4]
 8003a32:	441d      	add	r5, r3
 8003a34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a36:	9521      	str	r5, [sp, #132]	; 0x84
 8003a38:	3301      	adds	r3, #1
 8003a3a:	2b07      	cmp	r3, #7
 8003a3c:	9320      	str	r3, [sp, #128]	; 0x80
 8003a3e:	f77f abdb 	ble.w	80031f8 <_svfprintf_r+0x668>
 8003a42:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a44:	4651      	mov	r1, sl
 8003a46:	4658      	mov	r0, fp
 8003a48:	f001 fbe0 	bl	800520c <__ssprint_r>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	f43f abd3 	beq.w	80031f8 <_svfprintf_r+0x668>
 8003a52:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a5c:	bf18      	it	ne
 8003a5e:	f04f 33ff 	movne.w	r3, #4294967295
 8003a62:	f7ff b8b9 	b.w	8002bd8 <_svfprintf_r+0x48>
 8003a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a68:	6066      	str	r6, [r4, #4]
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	9321      	str	r3, [sp, #132]	; 0x84
 8003a6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a70:	3301      	adds	r3, #1
 8003a72:	2b07      	cmp	r3, #7
 8003a74:	9320      	str	r3, [sp, #128]	; 0x80
 8003a76:	dc02      	bgt.n	8003a7e <_svfprintf_r+0xeee>
 8003a78:	3408      	adds	r4, #8
 8003a7a:	3d10      	subs	r5, #16
 8003a7c:	e7d3      	b.n	8003a26 <_svfprintf_r+0xe96>
 8003a7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a80:	4651      	mov	r1, sl
 8003a82:	4658      	mov	r0, fp
 8003a84:	f001 fbc2 	bl	800520c <__ssprint_r>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d1e2      	bne.n	8003a52 <_svfprintf_r+0xec2>
 8003a8c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a8e:	e7f4      	b.n	8003a7a <_svfprintf_r+0xeea>
 8003a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0dd      	beq.n	8003a52 <_svfprintf_r+0xec2>
 8003a96:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a98:	4651      	mov	r1, sl
 8003a9a:	4658      	mov	r0, fp
 8003a9c:	f001 fbb6 	bl	800520c <__ssprint_r>
 8003aa0:	e7d7      	b.n	8003a52 <_svfprintf_r+0xec2>
 8003aa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f83b 	bl	8000b24 <__aeabi_dcmpun>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	f43f aa44 	beq.w	8002f3c <_svfprintf_r+0x3ac>
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <_svfprintf_r+0xfa0>)
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <_svfprintf_r+0xfa4>)
 8003ab8:	f7ff ba34 	b.w	8002f24 <_svfprintf_r+0x394>
 8003abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003abe:	eba3 0308 	sub.w	r3, r3, r8
 8003ac2:	9303      	str	r3, [sp, #12]
 8003ac4:	f7ff bab5 	b.w	8003032 <_svfprintf_r+0x4a2>
 8003ac8:	ea56 0207 	orrs.w	r2, r6, r7
 8003acc:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ace:	f43f ac2b 	beq.w	8003328 <_svfprintf_r+0x798>
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f43f ac9d 	beq.w	8003412 <_svfprintf_r+0x882>
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f43f acbd 	beq.w	8003458 <_svfprintf_r+0x8c8>
 8003ade:	ab2c      	add	r3, sp, #176	; 0xb0
 8003ae0:	08f1      	lsrs	r1, r6, #3
 8003ae2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003ae6:	08f8      	lsrs	r0, r7, #3
 8003ae8:	f006 0207 	and.w	r2, r6, #7
 8003aec:	4607      	mov	r7, r0
 8003aee:	460e      	mov	r6, r1
 8003af0:	3230      	adds	r2, #48	; 0x30
 8003af2:	ea56 0107 	orrs.w	r1, r6, r7
 8003af6:	f103 38ff 	add.w	r8, r3, #4294967295
 8003afa:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003afe:	f47f ac86 	bne.w	800340e <_svfprintf_r+0x87e>
 8003b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b04:	07c9      	lsls	r1, r1, #31
 8003b06:	d506      	bpl.n	8003b16 <_svfprintf_r+0xf86>
 8003b08:	2a30      	cmp	r2, #48	; 0x30
 8003b0a:	d004      	beq.n	8003b16 <_svfprintf_r+0xf86>
 8003b0c:	2230      	movs	r2, #48	; 0x30
 8003b0e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003b12:	f1a3 0802 	sub.w	r8, r3, #2
 8003b16:	464e      	mov	r6, r9
 8003b18:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003b1c:	eba9 0908 	sub.w	r9, r9, r8
 8003b20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003b22:	2700      	movs	r7, #0
 8003b24:	f7ff bad1 	b.w	80030ca <_svfprintf_r+0x53a>
 8003b28:	08005b68 	.word	0x08005b68
 8003b2c:	08005b58 	.word	0x08005b58
 8003b30:	08005b2c 	.word	0x08005b2c
 8003b34:	08005b30 	.word	0x08005b30

08003b38 <quorem>:
 8003b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	6903      	ldr	r3, [r0, #16]
 8003b3e:	690c      	ldr	r4, [r1, #16]
 8003b40:	429c      	cmp	r4, r3
 8003b42:	4680      	mov	r8, r0
 8003b44:	f300 8082 	bgt.w	8003c4c <quorem+0x114>
 8003b48:	3c01      	subs	r4, #1
 8003b4a:	f101 0714 	add.w	r7, r1, #20
 8003b4e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003b52:	f100 0614 	add.w	r6, r0, #20
 8003b56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003b5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003b5e:	eb06 030e 	add.w	r3, r6, lr
 8003b62:	3501      	adds	r5, #1
 8003b64:	eb07 090e 	add.w	r9, r7, lr
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8003b6e:	b395      	cbz	r5, 8003bd6 <quorem+0x9e>
 8003b70:	f04f 0a00 	mov.w	sl, #0
 8003b74:	4638      	mov	r0, r7
 8003b76:	46b4      	mov	ip, r6
 8003b78:	46d3      	mov	fp, sl
 8003b7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b7e:	b293      	uxth	r3, r2
 8003b80:	fb05 a303 	mla	r3, r5, r3, sl
 8003b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	ebab 0303 	sub.w	r3, fp, r3
 8003b8e:	0c12      	lsrs	r2, r2, #16
 8003b90:	f8bc b000 	ldrh.w	fp, [ip]
 8003b94:	fb05 a202 	mla	r2, r5, r2, sl
 8003b98:	fa13 f38b 	uxtah	r3, r3, fp
 8003b9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003ba0:	fa1f fb82 	uxth.w	fp, r2
 8003ba4:	f8dc 2000 	ldr.w	r2, [ip]
 8003ba8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003bac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bb6:	4581      	cmp	r9, r0
 8003bb8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003bbc:	f84c 3b04 	str.w	r3, [ip], #4
 8003bc0:	d2db      	bcs.n	8003b7a <quorem+0x42>
 8003bc2:	f856 300e 	ldr.w	r3, [r6, lr]
 8003bc6:	b933      	cbnz	r3, 8003bd6 <quorem+0x9e>
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	429e      	cmp	r6, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	d330      	bcc.n	8003c34 <quorem+0xfc>
 8003bd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f001 fa41 	bl	800505e <__mcmp>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	db25      	blt.n	8003c2c <quorem+0xf4>
 8003be0:	3501      	adds	r5, #1
 8003be2:	4630      	mov	r0, r6
 8003be4:	f04f 0e00 	mov.w	lr, #0
 8003be8:	f857 2b04 	ldr.w	r2, [r7], #4
 8003bec:	f8d0 c000 	ldr.w	ip, [r0]
 8003bf0:	b293      	uxth	r3, r2
 8003bf2:	ebae 0303 	sub.w	r3, lr, r3
 8003bf6:	0c12      	lsrs	r2, r2, #16
 8003bf8:	fa13 f38c 	uxtah	r3, r3, ip
 8003bfc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c0a:	45b9      	cmp	r9, r7
 8003c0c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003c10:	f840 3b04 	str.w	r3, [r0], #4
 8003c14:	d2e8      	bcs.n	8003be8 <quorem+0xb0>
 8003c16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003c1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003c1e:	b92a      	cbnz	r2, 8003c2c <quorem+0xf4>
 8003c20:	3b04      	subs	r3, #4
 8003c22:	429e      	cmp	r6, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	d30b      	bcc.n	8003c40 <quorem+0x108>
 8003c28:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	b003      	add	sp, #12
 8003c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	d1ca      	bne.n	8003bd2 <quorem+0x9a>
 8003c3c:	3c01      	subs	r4, #1
 8003c3e:	e7c5      	b.n	8003bcc <quorem+0x94>
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	3b04      	subs	r3, #4
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d1ef      	bne.n	8003c28 <quorem+0xf0>
 8003c48:	3c01      	subs	r4, #1
 8003c4a:	e7ea      	b.n	8003c22 <quorem+0xea>
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	e7ee      	b.n	8003c2e <quorem+0xf6>

08003c50 <_dtoa_r>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	ec57 6b10 	vmov	r6, r7, d0
 8003c58:	b097      	sub	sp, #92	; 0x5c
 8003c5a:	e9cd 6700 	strd	r6, r7, [sp]
 8003c5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c60:	9107      	str	r1, [sp, #28]
 8003c62:	4604      	mov	r4, r0
 8003c64:	920a      	str	r2, [sp, #40]	; 0x28
 8003c66:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c68:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003c6a:	b93e      	cbnz	r6, 8003c7c <_dtoa_r+0x2c>
 8003c6c:	2010      	movs	r0, #16
 8003c6e:	f000 fdcb 	bl	8004808 <malloc>
 8003c72:	6260      	str	r0, [r4, #36]	; 0x24
 8003c74:	6046      	str	r6, [r0, #4]
 8003c76:	6086      	str	r6, [r0, #8]
 8003c78:	6006      	str	r6, [r0, #0]
 8003c7a:	60c6      	str	r6, [r0, #12]
 8003c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	b151      	cbz	r1, 8003c98 <_dtoa_r+0x48>
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	604a      	str	r2, [r1, #4]
 8003c86:	2301      	movs	r3, #1
 8003c88:	4093      	lsls	r3, r2
 8003c8a:	608b      	str	r3, [r1, #8]
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f001 f811 	bl	8004cb4 <_Bfree>
 8003c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfbf      	itttt	lt
 8003c9e:	2301      	movlt	r3, #1
 8003ca0:	602b      	strlt	r3, [r5, #0]
 8003ca2:	9b01      	ldrlt	r3, [sp, #4]
 8003ca4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	bfb2      	itee	lt
 8003caa:	9301      	strlt	r3, [sp, #4]
 8003cac:	2300      	movge	r3, #0
 8003cae:	602b      	strge	r3, [r5, #0]
 8003cb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003cb4:	4ba8      	ldr	r3, [pc, #672]	; (8003f58 <_dtoa_r+0x308>)
 8003cb6:	ea33 0308 	bics.w	r3, r3, r8
 8003cba:	d11b      	bne.n	8003cf4 <_dtoa_r+0xa4>
 8003cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003cbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	9b00      	ldr	r3, [sp, #0]
 8003cc6:	b923      	cbnz	r3, 8003cd2 <_dtoa_r+0x82>
 8003cc8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	f000 8578 	beq.w	80047c2 <_dtoa_r+0xb72>
 8003cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cd4:	b953      	cbnz	r3, 8003cec <_dtoa_r+0x9c>
 8003cd6:	4ba1      	ldr	r3, [pc, #644]	; (8003f5c <_dtoa_r+0x30c>)
 8003cd8:	e021      	b.n	8003d1e <_dtoa_r+0xce>
 8003cda:	4ba1      	ldr	r3, [pc, #644]	; (8003f60 <_dtoa_r+0x310>)
 8003cdc:	9302      	str	r3, [sp, #8]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	9802      	ldr	r0, [sp, #8]
 8003ce6:	b017      	add	sp, #92	; 0x5c
 8003ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cec:	4b9b      	ldr	r3, [pc, #620]	; (8003f5c <_dtoa_r+0x30c>)
 8003cee:	9302      	str	r3, [sp, #8]
 8003cf0:	3303      	adds	r3, #3
 8003cf2:	e7f5      	b.n	8003ce0 <_dtoa_r+0x90>
 8003cf4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4639      	mov	r1, r7
 8003d00:	f7fc fede 	bl	8000ac0 <__aeabi_dcmpeq>
 8003d04:	4681      	mov	r9, r0
 8003d06:	b160      	cbz	r0, 8003d22 <_dtoa_r+0xd2>
 8003d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8553 	beq.w	80047bc <_dtoa_r+0xb6c>
 8003d16:	4b93      	ldr	r3, [pc, #588]	; (8003f64 <_dtoa_r+0x314>)
 8003d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	e7e0      	b.n	8003ce4 <_dtoa_r+0x94>
 8003d22:	aa14      	add	r2, sp, #80	; 0x50
 8003d24:	a915      	add	r1, sp, #84	; 0x54
 8003d26:	ec47 6b10 	vmov	d0, r6, r7
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f001 fa0f 	bl	800514e <__d2b>
 8003d30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d34:	4682      	mov	sl, r0
 8003d36:	2d00      	cmp	r5, #0
 8003d38:	d07e      	beq.n	8003e38 <_dtoa_r+0x1e8>
 8003d3a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d3e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d42:	4630      	mov	r0, r6
 8003d44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d48:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003d4c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003d50:	2200      	movs	r2, #0
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <_dtoa_r+0x318>)
 8003d54:	f7fc fa98 	bl	8000288 <__aeabi_dsub>
 8003d58:	a379      	add	r3, pc, #484	; (adr r3, 8003f40 <_dtoa_r+0x2f0>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fc47 	bl	80005f0 <__aeabi_dmul>
 8003d62:	a379      	add	r3, pc, #484	; (adr r3, 8003f48 <_dtoa_r+0x2f8>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc fa90 	bl	800028c <__adddf3>
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	4628      	mov	r0, r5
 8003d70:	460f      	mov	r7, r1
 8003d72:	f7fc fbd7 	bl	8000524 <__aeabi_i2d>
 8003d76:	a376      	add	r3, pc, #472	; (adr r3, 8003f50 <_dtoa_r+0x300>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f7fc fc38 	bl	80005f0 <__aeabi_dmul>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4630      	mov	r0, r6
 8003d86:	4639      	mov	r1, r7
 8003d88:	f7fc fa80 	bl	800028c <__adddf3>
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	460f      	mov	r7, r1
 8003d90:	f7fc fede 	bl	8000b50 <__aeabi_d2iz>
 8003d94:	2200      	movs	r2, #0
 8003d96:	4683      	mov	fp, r0
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	f7fc fe99 	bl	8000ad4 <__aeabi_dcmplt>
 8003da2:	b158      	cbz	r0, 8003dbc <_dtoa_r+0x16c>
 8003da4:	4658      	mov	r0, fp
 8003da6:	f7fc fbbd 	bl	8000524 <__aeabi_i2d>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4630      	mov	r0, r6
 8003db0:	4639      	mov	r1, r7
 8003db2:	f7fc fe85 	bl	8000ac0 <__aeabi_dcmpeq>
 8003db6:	b908      	cbnz	r0, 8003dbc <_dtoa_r+0x16c>
 8003db8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dbc:	f1bb 0f16 	cmp.w	fp, #22
 8003dc0:	d859      	bhi.n	8003e76 <_dtoa_r+0x226>
 8003dc2:	496a      	ldr	r1, [pc, #424]	; (8003f6c <_dtoa_r+0x31c>)
 8003dc4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dd0:	f7fc fe9e 	bl	8000b10 <__aeabi_dcmpgt>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d050      	beq.n	8003e7a <_dtoa_r+0x22a>
 8003dd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ddc:	2300      	movs	r3, #0
 8003dde:	930e      	str	r3, [sp, #56]	; 0x38
 8003de0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003de2:	1b5d      	subs	r5, r3, r5
 8003de4:	1e6b      	subs	r3, r5, #1
 8003de6:	9306      	str	r3, [sp, #24]
 8003de8:	bf45      	ittet	mi
 8003dea:	f1c5 0301 	rsbmi	r3, r5, #1
 8003dee:	9305      	strmi	r3, [sp, #20]
 8003df0:	2300      	movpl	r3, #0
 8003df2:	2300      	movmi	r3, #0
 8003df4:	bf4c      	ite	mi
 8003df6:	9306      	strmi	r3, [sp, #24]
 8003df8:	9305      	strpl	r3, [sp, #20]
 8003dfa:	f1bb 0f00 	cmp.w	fp, #0
 8003dfe:	db3e      	blt.n	8003e7e <_dtoa_r+0x22e>
 8003e00:	9b06      	ldr	r3, [sp, #24]
 8003e02:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003e06:	445b      	add	r3, fp
 8003e08:	9306      	str	r3, [sp, #24]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9308      	str	r3, [sp, #32]
 8003e0e:	9b07      	ldr	r3, [sp, #28]
 8003e10:	2b09      	cmp	r3, #9
 8003e12:	f200 80af 	bhi.w	8003f74 <_dtoa_r+0x324>
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	bfc4      	itt	gt
 8003e1a:	3b04      	subgt	r3, #4
 8003e1c:	9307      	strgt	r3, [sp, #28]
 8003e1e:	9b07      	ldr	r3, [sp, #28]
 8003e20:	f1a3 0302 	sub.w	r3, r3, #2
 8003e24:	bfcc      	ite	gt
 8003e26:	2600      	movgt	r6, #0
 8003e28:	2601      	movle	r6, #1
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	f200 80ae 	bhi.w	8003f8c <_dtoa_r+0x33c>
 8003e30:	e8df f003 	tbb	[pc, r3]
 8003e34:	772f8482 	.word	0x772f8482
 8003e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e3a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003e3c:	441d      	add	r5, r3
 8003e3e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	dd11      	ble.n	8003e6a <_dtoa_r+0x21a>
 8003e46:	9a00      	ldr	r2, [sp, #0]
 8003e48:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003e4c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e50:	fa22 f000 	lsr.w	r0, r2, r0
 8003e54:	fa08 f303 	lsl.w	r3, r8, r3
 8003e58:	4318      	orrs	r0, r3
 8003e5a:	f7fc fb53 	bl	8000504 <__aeabi_ui2d>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003e64:	3d01      	subs	r5, #1
 8003e66:	9312      	str	r3, [sp, #72]	; 0x48
 8003e68:	e772      	b.n	8003d50 <_dtoa_r+0x100>
 8003e6a:	f1c3 0020 	rsb	r0, r3, #32
 8003e6e:	9b00      	ldr	r3, [sp, #0]
 8003e70:	fa03 f000 	lsl.w	r0, r3, r0
 8003e74:	e7f1      	b.n	8003e5a <_dtoa_r+0x20a>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e7b1      	b.n	8003dde <_dtoa_r+0x18e>
 8003e7a:	900e      	str	r0, [sp, #56]	; 0x38
 8003e7c:	e7b0      	b.n	8003de0 <_dtoa_r+0x190>
 8003e7e:	9b05      	ldr	r3, [sp, #20]
 8003e80:	eba3 030b 	sub.w	r3, r3, fp
 8003e84:	9305      	str	r3, [sp, #20]
 8003e86:	f1cb 0300 	rsb	r3, fp, #0
 8003e8a:	9308      	str	r3, [sp, #32]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e90:	e7bd      	b.n	8003e0e <_dtoa_r+0x1be>
 8003e92:	2301      	movs	r3, #1
 8003e94:	9309      	str	r3, [sp, #36]	; 0x24
 8003e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	dd7a      	ble.n	8003f92 <_dtoa_r+0x342>
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	606a      	str	r2, [r5, #4]
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	f101 0214 	add.w	r2, r1, #20
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d975      	bls.n	8003f9c <_dtoa_r+0x34c>
 8003eb0:	6869      	ldr	r1, [r5, #4]
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f000 feca 	bl	8004c4c <_Balloc>
 8003eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eba:	6028      	str	r0, [r5, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	9302      	str	r3, [sp, #8]
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	2b0e      	cmp	r3, #14
 8003ec4:	f200 80e5 	bhi.w	8004092 <_dtoa_r+0x442>
 8003ec8:	2e00      	cmp	r6, #0
 8003eca:	f000 80e2 	beq.w	8004092 <_dtoa_r+0x442>
 8003ece:	ed9d 7b00 	vldr	d7, [sp]
 8003ed2:	f1bb 0f00 	cmp.w	fp, #0
 8003ed6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003eda:	dd74      	ble.n	8003fc6 <_dtoa_r+0x376>
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <_dtoa_r+0x31c>)
 8003ede:	f00b 030f 	and.w	r3, fp, #15
 8003ee2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003ee6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003eea:	06f0      	lsls	r0, r6, #27
 8003eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ef0:	d559      	bpl.n	8003fa6 <_dtoa_r+0x356>
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <_dtoa_r+0x320>)
 8003ef4:	ec51 0b17 	vmov	r0, r1, d7
 8003ef8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003efc:	f7fc fca2 	bl	8000844 <__aeabi_ddiv>
 8003f00:	e9cd 0100 	strd	r0, r1, [sp]
 8003f04:	f006 060f 	and.w	r6, r6, #15
 8003f08:	2503      	movs	r5, #3
 8003f0a:	4f19      	ldr	r7, [pc, #100]	; (8003f70 <_dtoa_r+0x320>)
 8003f0c:	2e00      	cmp	r6, #0
 8003f0e:	d14c      	bne.n	8003faa <_dtoa_r+0x35a>
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f18:	f7fc fc94 	bl	8000844 <__aeabi_ddiv>
 8003f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8003f20:	e06a      	b.n	8003ff8 <_dtoa_r+0x3a8>
 8003f22:	2301      	movs	r3, #1
 8003f24:	9309      	str	r3, [sp, #36]	; 0x24
 8003f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f28:	445b      	add	r3, fp
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	bfb8      	it	lt
 8003f34:	2301      	movlt	r3, #1
 8003f36:	e7b3      	b.n	8003ea0 <_dtoa_r+0x250>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e7ab      	b.n	8003e94 <_dtoa_r+0x244>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e7f1      	b.n	8003f24 <_dtoa_r+0x2d4>
 8003f40:	636f4361 	.word	0x636f4361
 8003f44:	3fd287a7 	.word	0x3fd287a7
 8003f48:	8b60c8b3 	.word	0x8b60c8b3
 8003f4c:	3fc68a28 	.word	0x3fc68a28
 8003f50:	509f79fb 	.word	0x509f79fb
 8003f54:	3fd34413 	.word	0x3fd34413
 8003f58:	7ff00000 	.word	0x7ff00000
 8003f5c:	08005b81 	.word	0x08005b81
 8003f60:	08005b78 	.word	0x08005b78
 8003f64:	08005b57 	.word	0x08005b57
 8003f68:	3ff80000 	.word	0x3ff80000
 8003f6c:	08005bb0 	.word	0x08005bb0
 8003f70:	08005b88 	.word	0x08005b88
 8003f74:	2601      	movs	r6, #1
 8003f76:	2300      	movs	r3, #0
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	9609      	str	r6, [sp, #36]	; 0x24
 8003f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	9303      	str	r3, [sp, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2312      	movs	r3, #18
 8003f88:	920a      	str	r2, [sp, #40]	; 0x28
 8003f8a:	e789      	b.n	8003ea0 <_dtoa_r+0x250>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f90:	e7f4      	b.n	8003f7c <_dtoa_r+0x32c>
 8003f92:	2301      	movs	r3, #1
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	e7f5      	b.n	8003f88 <_dtoa_r+0x338>
 8003f9c:	686a      	ldr	r2, [r5, #4]
 8003f9e:	3201      	adds	r2, #1
 8003fa0:	606a      	str	r2, [r5, #4]
 8003fa2:	0049      	lsls	r1, r1, #1
 8003fa4:	e780      	b.n	8003ea8 <_dtoa_r+0x258>
 8003fa6:	2502      	movs	r5, #2
 8003fa8:	e7af      	b.n	8003f0a <_dtoa_r+0x2ba>
 8003faa:	07f1      	lsls	r1, r6, #31
 8003fac:	d508      	bpl.n	8003fc0 <_dtoa_r+0x370>
 8003fae:	4640      	mov	r0, r8
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb6:	f7fc fb1b 	bl	80005f0 <__aeabi_dmul>
 8003fba:	3501      	adds	r5, #1
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4689      	mov	r9, r1
 8003fc0:	1076      	asrs	r6, r6, #1
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	e7a2      	b.n	8003f0c <_dtoa_r+0x2bc>
 8003fc6:	f000 809d 	beq.w	8004104 <_dtoa_r+0x4b4>
 8003fca:	f1cb 0600 	rsb	r6, fp, #0
 8003fce:	4b9f      	ldr	r3, [pc, #636]	; (800424c <_dtoa_r+0x5fc>)
 8003fd0:	4f9f      	ldr	r7, [pc, #636]	; (8004250 <_dtoa_r+0x600>)
 8003fd2:	f006 020f 	and.w	r2, r6, #15
 8003fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fe2:	f7fc fb05 	bl	80005f0 <__aeabi_dmul>
 8003fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8003fea:	1136      	asrs	r6, r6, #4
 8003fec:	2300      	movs	r3, #0
 8003fee:	2502      	movs	r5, #2
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	d17c      	bne.n	80040ee <_dtoa_r+0x49e>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d191      	bne.n	8003f1c <_dtoa_r+0x2cc>
 8003ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8084 	beq.w	8004108 <_dtoa_r+0x4b8>
 8004000:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004004:	2200      	movs	r2, #0
 8004006:	4b93      	ldr	r3, [pc, #588]	; (8004254 <_dtoa_r+0x604>)
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc fd62 	bl	8000ad4 <__aeabi_dcmplt>
 8004010:	2800      	cmp	r0, #0
 8004012:	d079      	beq.n	8004108 <_dtoa_r+0x4b8>
 8004014:	9b03      	ldr	r3, [sp, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d076      	beq.n	8004108 <_dtoa_r+0x4b8>
 800401a:	9b04      	ldr	r3, [sp, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	dd34      	ble.n	800408a <_dtoa_r+0x43a>
 8004020:	2200      	movs	r2, #0
 8004022:	4b8d      	ldr	r3, [pc, #564]	; (8004258 <_dtoa_r+0x608>)
 8004024:	4640      	mov	r0, r8
 8004026:	4649      	mov	r1, r9
 8004028:	f7fc fae2 	bl	80005f0 <__aeabi_dmul>
 800402c:	e9cd 0100 	strd	r0, r1, [sp]
 8004030:	9e04      	ldr	r6, [sp, #16]
 8004032:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004036:	3501      	adds	r5, #1
 8004038:	4628      	mov	r0, r5
 800403a:	f7fc fa73 	bl	8000524 <__aeabi_i2d>
 800403e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004042:	f7fc fad5 	bl	80005f0 <__aeabi_dmul>
 8004046:	2200      	movs	r2, #0
 8004048:	4b84      	ldr	r3, [pc, #528]	; (800425c <_dtoa_r+0x60c>)
 800404a:	f7fc f91f 	bl	800028c <__adddf3>
 800404e:	4680      	mov	r8, r0
 8004050:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004054:	2e00      	cmp	r6, #0
 8004056:	d15a      	bne.n	800410e <_dtoa_r+0x4be>
 8004058:	2200      	movs	r2, #0
 800405a:	4b81      	ldr	r3, [pc, #516]	; (8004260 <_dtoa_r+0x610>)
 800405c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004060:	f7fc f912 	bl	8000288 <__aeabi_dsub>
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	e9cd 0100 	strd	r0, r1, [sp]
 800406c:	f7fc fd50 	bl	8000b10 <__aeabi_dcmpgt>
 8004070:	2800      	cmp	r0, #0
 8004072:	f040 829b 	bne.w	80045ac <_dtoa_r+0x95c>
 8004076:	4642      	mov	r2, r8
 8004078:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800407c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004080:	f7fc fd28 	bl	8000ad4 <__aeabi_dcmplt>
 8004084:	2800      	cmp	r0, #0
 8004086:	f040 828f 	bne.w	80045a8 <_dtoa_r+0x958>
 800408a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800408e:	e9cd 2300 	strd	r2, r3, [sp]
 8004092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	f2c0 8150 	blt.w	800433a <_dtoa_r+0x6ea>
 800409a:	f1bb 0f0e 	cmp.w	fp, #14
 800409e:	f300 814c 	bgt.w	800433a <_dtoa_r+0x6ea>
 80040a2:	4b6a      	ldr	r3, [pc, #424]	; (800424c <_dtoa_r+0x5fc>)
 80040a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80040a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f280 80da 	bge.w	8004268 <_dtoa_r+0x618>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f300 80d6 	bgt.w	8004268 <_dtoa_r+0x618>
 80040bc:	f040 8273 	bne.w	80045a6 <_dtoa_r+0x956>
 80040c0:	2200      	movs	r2, #0
 80040c2:	4b67      	ldr	r3, [pc, #412]	; (8004260 <_dtoa_r+0x610>)
 80040c4:	4640      	mov	r0, r8
 80040c6:	4649      	mov	r1, r9
 80040c8:	f7fc fa92 	bl	80005f0 <__aeabi_dmul>
 80040cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040d0:	f7fc fd14 	bl	8000afc <__aeabi_dcmpge>
 80040d4:	9e03      	ldr	r6, [sp, #12]
 80040d6:	4637      	mov	r7, r6
 80040d8:	2800      	cmp	r0, #0
 80040da:	f040 824a 	bne.w	8004572 <_dtoa_r+0x922>
 80040de:	9b02      	ldr	r3, [sp, #8]
 80040e0:	9a02      	ldr	r2, [sp, #8]
 80040e2:	1c5d      	adds	r5, r3, #1
 80040e4:	2331      	movs	r3, #49	; 0x31
 80040e6:	7013      	strb	r3, [r2, #0]
 80040e8:	f10b 0b01 	add.w	fp, fp, #1
 80040ec:	e245      	b.n	800457a <_dtoa_r+0x92a>
 80040ee:	07f2      	lsls	r2, r6, #31
 80040f0:	d505      	bpl.n	80040fe <_dtoa_r+0x4ae>
 80040f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f6:	f7fc fa7b 	bl	80005f0 <__aeabi_dmul>
 80040fa:	3501      	adds	r5, #1
 80040fc:	2301      	movs	r3, #1
 80040fe:	1076      	asrs	r6, r6, #1
 8004100:	3708      	adds	r7, #8
 8004102:	e775      	b.n	8003ff0 <_dtoa_r+0x3a0>
 8004104:	2502      	movs	r5, #2
 8004106:	e777      	b.n	8003ff8 <_dtoa_r+0x3a8>
 8004108:	465f      	mov	r7, fp
 800410a:	9e03      	ldr	r6, [sp, #12]
 800410c:	e794      	b.n	8004038 <_dtoa_r+0x3e8>
 800410e:	9a02      	ldr	r2, [sp, #8]
 8004110:	4b4e      	ldr	r3, [pc, #312]	; (800424c <_dtoa_r+0x5fc>)
 8004112:	4432      	add	r2, r6
 8004114:	9213      	str	r2, [sp, #76]	; 0x4c
 8004116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004118:	1e71      	subs	r1, r6, #1
 800411a:	2a00      	cmp	r2, #0
 800411c:	d048      	beq.n	80041b0 <_dtoa_r+0x560>
 800411e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	2000      	movs	r0, #0
 8004128:	494e      	ldr	r1, [pc, #312]	; (8004264 <_dtoa_r+0x614>)
 800412a:	f7fc fb8b 	bl	8000844 <__aeabi_ddiv>
 800412e:	4642      	mov	r2, r8
 8004130:	464b      	mov	r3, r9
 8004132:	f7fc f8a9 	bl	8000288 <__aeabi_dsub>
 8004136:	9d02      	ldr	r5, [sp, #8]
 8004138:	4680      	mov	r8, r0
 800413a:	4689      	mov	r9, r1
 800413c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004140:	f7fc fd06 	bl	8000b50 <__aeabi_d2iz>
 8004144:	4606      	mov	r6, r0
 8004146:	f7fc f9ed 	bl	8000524 <__aeabi_i2d>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004152:	f7fc f899 	bl	8000288 <__aeabi_dsub>
 8004156:	3630      	adds	r6, #48	; 0x30
 8004158:	f805 6b01 	strb.w	r6, [r5], #1
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	e9cd 0100 	strd	r0, r1, [sp]
 8004164:	f7fc fcb6 	bl	8000ad4 <__aeabi_dcmplt>
 8004168:	2800      	cmp	r0, #0
 800416a:	d165      	bne.n	8004238 <_dtoa_r+0x5e8>
 800416c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004170:	2000      	movs	r0, #0
 8004172:	4938      	ldr	r1, [pc, #224]	; (8004254 <_dtoa_r+0x604>)
 8004174:	f7fc f888 	bl	8000288 <__aeabi_dsub>
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	f7fc fcaa 	bl	8000ad4 <__aeabi_dcmplt>
 8004180:	2800      	cmp	r0, #0
 8004182:	f040 80ba 	bne.w	80042fa <_dtoa_r+0x6aa>
 8004186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004188:	429d      	cmp	r5, r3
 800418a:	f43f af7e 	beq.w	800408a <_dtoa_r+0x43a>
 800418e:	2200      	movs	r2, #0
 8004190:	4b31      	ldr	r3, [pc, #196]	; (8004258 <_dtoa_r+0x608>)
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f7fc fa2b 	bl	80005f0 <__aeabi_dmul>
 800419a:	2200      	movs	r2, #0
 800419c:	4680      	mov	r8, r0
 800419e:	4689      	mov	r9, r1
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <_dtoa_r+0x608>)
 80041a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041a6:	f7fc fa23 	bl	80005f0 <__aeabi_dmul>
 80041aa:	e9cd 0100 	strd	r0, r1, [sp]
 80041ae:	e7c5      	b.n	800413c <_dtoa_r+0x4ec>
 80041b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041bc:	f7fc fa18 	bl	80005f0 <__aeabi_dmul>
 80041c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041c4:	9d02      	ldr	r5, [sp, #8]
 80041c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ca:	f7fc fcc1 	bl	8000b50 <__aeabi_d2iz>
 80041ce:	4606      	mov	r6, r0
 80041d0:	f7fc f9a8 	bl	8000524 <__aeabi_i2d>
 80041d4:	3630      	adds	r6, #48	; 0x30
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041de:	f7fc f853 	bl	8000288 <__aeabi_dsub>
 80041e2:	f805 6b01 	strb.w	r6, [r5], #1
 80041e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	4680      	mov	r8, r0
 80041ec:	4689      	mov	r9, r1
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	d125      	bne.n	8004240 <_dtoa_r+0x5f0>
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <_dtoa_r+0x614>)
 80041f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041fa:	f7fc f847 	bl	800028c <__adddf3>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4640      	mov	r0, r8
 8004204:	4649      	mov	r1, r9
 8004206:	f7fc fc83 	bl	8000b10 <__aeabi_dcmpgt>
 800420a:	2800      	cmp	r0, #0
 800420c:	d175      	bne.n	80042fa <_dtoa_r+0x6aa>
 800420e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004212:	2000      	movs	r0, #0
 8004214:	4913      	ldr	r1, [pc, #76]	; (8004264 <_dtoa_r+0x614>)
 8004216:	f7fc f837 	bl	8000288 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4640      	mov	r0, r8
 8004220:	4649      	mov	r1, r9
 8004222:	f7fc fc57 	bl	8000ad4 <__aeabi_dcmplt>
 8004226:	2800      	cmp	r0, #0
 8004228:	f43f af2f 	beq.w	800408a <_dtoa_r+0x43a>
 800422c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004230:	2b30      	cmp	r3, #48	; 0x30
 8004232:	f105 32ff 	add.w	r2, r5, #4294967295
 8004236:	d001      	beq.n	800423c <_dtoa_r+0x5ec>
 8004238:	46bb      	mov	fp, r7
 800423a:	e04d      	b.n	80042d8 <_dtoa_r+0x688>
 800423c:	4615      	mov	r5, r2
 800423e:	e7f5      	b.n	800422c <_dtoa_r+0x5dc>
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_dtoa_r+0x608>)
 8004242:	f7fc f9d5 	bl	80005f0 <__aeabi_dmul>
 8004246:	e9cd 0100 	strd	r0, r1, [sp]
 800424a:	e7bc      	b.n	80041c6 <_dtoa_r+0x576>
 800424c:	08005bb0 	.word	0x08005bb0
 8004250:	08005b88 	.word	0x08005b88
 8004254:	3ff00000 	.word	0x3ff00000
 8004258:	40240000 	.word	0x40240000
 800425c:	401c0000 	.word	0x401c0000
 8004260:	40140000 	.word	0x40140000
 8004264:	3fe00000 	.word	0x3fe00000
 8004268:	e9dd 6700 	ldrd	r6, r7, [sp]
 800426c:	9d02      	ldr	r5, [sp, #8]
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	4630      	mov	r0, r6
 8004274:	4639      	mov	r1, r7
 8004276:	f7fc fae5 	bl	8000844 <__aeabi_ddiv>
 800427a:	f7fc fc69 	bl	8000b50 <__aeabi_d2iz>
 800427e:	9000      	str	r0, [sp, #0]
 8004280:	f7fc f950 	bl	8000524 <__aeabi_i2d>
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	f7fc f9b2 	bl	80005f0 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4630      	mov	r0, r6
 8004292:	4639      	mov	r1, r7
 8004294:	f7fb fff8 	bl	8000288 <__aeabi_dsub>
 8004298:	9e00      	ldr	r6, [sp, #0]
 800429a:	9f03      	ldr	r7, [sp, #12]
 800429c:	3630      	adds	r6, #48	; 0x30
 800429e:	f805 6b01 	strb.w	r6, [r5], #1
 80042a2:	9e02      	ldr	r6, [sp, #8]
 80042a4:	1bae      	subs	r6, r5, r6
 80042a6:	42b7      	cmp	r7, r6
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	d138      	bne.n	8004320 <_dtoa_r+0x6d0>
 80042ae:	f7fb ffed 	bl	800028c <__adddf3>
 80042b2:	4606      	mov	r6, r0
 80042b4:	460f      	mov	r7, r1
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4640      	mov	r0, r8
 80042bc:	4649      	mov	r1, r9
 80042be:	f7fc fc09 	bl	8000ad4 <__aeabi_dcmplt>
 80042c2:	b9c8      	cbnz	r0, 80042f8 <_dtoa_r+0x6a8>
 80042c4:	4632      	mov	r2, r6
 80042c6:	463b      	mov	r3, r7
 80042c8:	4640      	mov	r0, r8
 80042ca:	4649      	mov	r1, r9
 80042cc:	f7fc fbf8 	bl	8000ac0 <__aeabi_dcmpeq>
 80042d0:	b110      	cbz	r0, 80042d8 <_dtoa_r+0x688>
 80042d2:	9b00      	ldr	r3, [sp, #0]
 80042d4:	07db      	lsls	r3, r3, #31
 80042d6:	d40f      	bmi.n	80042f8 <_dtoa_r+0x6a8>
 80042d8:	4651      	mov	r1, sl
 80042da:	4620      	mov	r0, r4
 80042dc:	f000 fcea 	bl	8004cb4 <_Bfree>
 80042e0:	2300      	movs	r3, #0
 80042e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042e4:	702b      	strb	r3, [r5, #0]
 80042e6:	f10b 0301 	add.w	r3, fp, #1
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f43f acf8 	beq.w	8003ce4 <_dtoa_r+0x94>
 80042f4:	601d      	str	r5, [r3, #0]
 80042f6:	e4f5      	b.n	8003ce4 <_dtoa_r+0x94>
 80042f8:	465f      	mov	r7, fp
 80042fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80042fe:	2a39      	cmp	r2, #57	; 0x39
 8004300:	f105 33ff 	add.w	r3, r5, #4294967295
 8004304:	d106      	bne.n	8004314 <_dtoa_r+0x6c4>
 8004306:	9a02      	ldr	r2, [sp, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	d107      	bne.n	800431c <_dtoa_r+0x6cc>
 800430c:	2330      	movs	r3, #48	; 0x30
 800430e:	7013      	strb	r3, [r2, #0]
 8004310:	3701      	adds	r7, #1
 8004312:	4613      	mov	r3, r2
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	3201      	adds	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e78d      	b.n	8004238 <_dtoa_r+0x5e8>
 800431c:	461d      	mov	r5, r3
 800431e:	e7ec      	b.n	80042fa <_dtoa_r+0x6aa>
 8004320:	2200      	movs	r2, #0
 8004322:	4ba4      	ldr	r3, [pc, #656]	; (80045b4 <_dtoa_r+0x964>)
 8004324:	f7fc f964 	bl	80005f0 <__aeabi_dmul>
 8004328:	2200      	movs	r2, #0
 800432a:	2300      	movs	r3, #0
 800432c:	4606      	mov	r6, r0
 800432e:	460f      	mov	r7, r1
 8004330:	f7fc fbc6 	bl	8000ac0 <__aeabi_dcmpeq>
 8004334:	2800      	cmp	r0, #0
 8004336:	d09a      	beq.n	800426e <_dtoa_r+0x61e>
 8004338:	e7ce      	b.n	80042d8 <_dtoa_r+0x688>
 800433a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800433c:	2a00      	cmp	r2, #0
 800433e:	f000 80cd 	beq.w	80044dc <_dtoa_r+0x88c>
 8004342:	9a07      	ldr	r2, [sp, #28]
 8004344:	2a01      	cmp	r2, #1
 8004346:	f300 80af 	bgt.w	80044a8 <_dtoa_r+0x858>
 800434a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800434c:	2a00      	cmp	r2, #0
 800434e:	f000 80a7 	beq.w	80044a0 <_dtoa_r+0x850>
 8004352:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004356:	9e08      	ldr	r6, [sp, #32]
 8004358:	9d05      	ldr	r5, [sp, #20]
 800435a:	9a05      	ldr	r2, [sp, #20]
 800435c:	441a      	add	r2, r3
 800435e:	9205      	str	r2, [sp, #20]
 8004360:	9a06      	ldr	r2, [sp, #24]
 8004362:	2101      	movs	r1, #1
 8004364:	441a      	add	r2, r3
 8004366:	4620      	mov	r0, r4
 8004368:	9206      	str	r2, [sp, #24]
 800436a:	f000 fd43 	bl	8004df4 <__i2b>
 800436e:	4607      	mov	r7, r0
 8004370:	2d00      	cmp	r5, #0
 8004372:	dd0c      	ble.n	800438e <_dtoa_r+0x73e>
 8004374:	9b06      	ldr	r3, [sp, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	dd09      	ble.n	800438e <_dtoa_r+0x73e>
 800437a:	42ab      	cmp	r3, r5
 800437c:	9a05      	ldr	r2, [sp, #20]
 800437e:	bfa8      	it	ge
 8004380:	462b      	movge	r3, r5
 8004382:	1ad2      	subs	r2, r2, r3
 8004384:	9205      	str	r2, [sp, #20]
 8004386:	9a06      	ldr	r2, [sp, #24]
 8004388:	1aed      	subs	r5, r5, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	9306      	str	r3, [sp, #24]
 800438e:	9b08      	ldr	r3, [sp, #32]
 8004390:	b1f3      	cbz	r3, 80043d0 <_dtoa_r+0x780>
 8004392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a5 	beq.w	80044e4 <_dtoa_r+0x894>
 800439a:	2e00      	cmp	r6, #0
 800439c:	dd10      	ble.n	80043c0 <_dtoa_r+0x770>
 800439e:	4639      	mov	r1, r7
 80043a0:	4632      	mov	r2, r6
 80043a2:	4620      	mov	r0, r4
 80043a4:	f000 fdbc 	bl	8004f20 <__pow5mult>
 80043a8:	4652      	mov	r2, sl
 80043aa:	4601      	mov	r1, r0
 80043ac:	4607      	mov	r7, r0
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fd29 	bl	8004e06 <__multiply>
 80043b4:	4651      	mov	r1, sl
 80043b6:	4680      	mov	r8, r0
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fc7b 	bl	8004cb4 <_Bfree>
 80043be:	46c2      	mov	sl, r8
 80043c0:	9b08      	ldr	r3, [sp, #32]
 80043c2:	1b9a      	subs	r2, r3, r6
 80043c4:	d004      	beq.n	80043d0 <_dtoa_r+0x780>
 80043c6:	4651      	mov	r1, sl
 80043c8:	4620      	mov	r0, r4
 80043ca:	f000 fda9 	bl	8004f20 <__pow5mult>
 80043ce:	4682      	mov	sl, r0
 80043d0:	2101      	movs	r1, #1
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 fd0e 	bl	8004df4 <__i2b>
 80043d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	4606      	mov	r6, r0
 80043de:	f340 8083 	ble.w	80044e8 <_dtoa_r+0x898>
 80043e2:	461a      	mov	r2, r3
 80043e4:	4601      	mov	r1, r0
 80043e6:	4620      	mov	r0, r4
 80043e8:	f000 fd9a 	bl	8004f20 <__pow5mult>
 80043ec:	9b07      	ldr	r3, [sp, #28]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	4606      	mov	r6, r0
 80043f2:	dd7c      	ble.n	80044ee <_dtoa_r+0x89e>
 80043f4:	f04f 0800 	mov.w	r8, #0
 80043f8:	6933      	ldr	r3, [r6, #16]
 80043fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80043fe:	6918      	ldr	r0, [r3, #16]
 8004400:	f000 fcaa 	bl	8004d58 <__hi0bits>
 8004404:	f1c0 0020 	rsb	r0, r0, #32
 8004408:	9b06      	ldr	r3, [sp, #24]
 800440a:	4418      	add	r0, r3
 800440c:	f010 001f 	ands.w	r0, r0, #31
 8004410:	f000 8096 	beq.w	8004540 <_dtoa_r+0x8f0>
 8004414:	f1c0 0320 	rsb	r3, r0, #32
 8004418:	2b04      	cmp	r3, #4
 800441a:	f340 8087 	ble.w	800452c <_dtoa_r+0x8dc>
 800441e:	9b05      	ldr	r3, [sp, #20]
 8004420:	f1c0 001c 	rsb	r0, r0, #28
 8004424:	4403      	add	r3, r0
 8004426:	9305      	str	r3, [sp, #20]
 8004428:	9b06      	ldr	r3, [sp, #24]
 800442a:	4405      	add	r5, r0
 800442c:	4403      	add	r3, r0
 800442e:	9306      	str	r3, [sp, #24]
 8004430:	9b05      	ldr	r3, [sp, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	dd05      	ble.n	8004442 <_dtoa_r+0x7f2>
 8004436:	4651      	mov	r1, sl
 8004438:	461a      	mov	r2, r3
 800443a:	4620      	mov	r0, r4
 800443c:	f000 fdbe 	bl	8004fbc <__lshift>
 8004440:	4682      	mov	sl, r0
 8004442:	9b06      	ldr	r3, [sp, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	dd05      	ble.n	8004454 <_dtoa_r+0x804>
 8004448:	4631      	mov	r1, r6
 800444a:	461a      	mov	r2, r3
 800444c:	4620      	mov	r0, r4
 800444e:	f000 fdb5 	bl	8004fbc <__lshift>
 8004452:	4606      	mov	r6, r0
 8004454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004456:	2b00      	cmp	r3, #0
 8004458:	d074      	beq.n	8004544 <_dtoa_r+0x8f4>
 800445a:	4631      	mov	r1, r6
 800445c:	4650      	mov	r0, sl
 800445e:	f000 fdfe 	bl	800505e <__mcmp>
 8004462:	2800      	cmp	r0, #0
 8004464:	da6e      	bge.n	8004544 <_dtoa_r+0x8f4>
 8004466:	2300      	movs	r3, #0
 8004468:	4651      	mov	r1, sl
 800446a:	220a      	movs	r2, #10
 800446c:	4620      	mov	r0, r4
 800446e:	f000 fc38 	bl	8004ce2 <__multadd>
 8004472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004478:	4682      	mov	sl, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 81a8 	beq.w	80047d0 <_dtoa_r+0xb80>
 8004480:	2300      	movs	r3, #0
 8004482:	4639      	mov	r1, r7
 8004484:	220a      	movs	r2, #10
 8004486:	4620      	mov	r0, r4
 8004488:	f000 fc2b 	bl	8004ce2 <__multadd>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	4607      	mov	r7, r0
 8004492:	f300 80c8 	bgt.w	8004626 <_dtoa_r+0x9d6>
 8004496:	9b07      	ldr	r3, [sp, #28]
 8004498:	2b02      	cmp	r3, #2
 800449a:	f340 80c4 	ble.w	8004626 <_dtoa_r+0x9d6>
 800449e:	e059      	b.n	8004554 <_dtoa_r+0x904>
 80044a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044a6:	e756      	b.n	8004356 <_dtoa_r+0x706>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	1e5e      	subs	r6, r3, #1
 80044ac:	9b08      	ldr	r3, [sp, #32]
 80044ae:	42b3      	cmp	r3, r6
 80044b0:	bfbf      	itttt	lt
 80044b2:	9b08      	ldrlt	r3, [sp, #32]
 80044b4:	9608      	strlt	r6, [sp, #32]
 80044b6:	1af2      	sublt	r2, r6, r3
 80044b8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80044ba:	bfb6      	itet	lt
 80044bc:	189b      	addlt	r3, r3, r2
 80044be:	1b9e      	subge	r6, r3, r6
 80044c0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80044c2:	9b03      	ldr	r3, [sp, #12]
 80044c4:	bfb8      	it	lt
 80044c6:	2600      	movlt	r6, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bfb9      	ittee	lt
 80044cc:	9b05      	ldrlt	r3, [sp, #20]
 80044ce:	9a03      	ldrlt	r2, [sp, #12]
 80044d0:	9d05      	ldrge	r5, [sp, #20]
 80044d2:	9b03      	ldrge	r3, [sp, #12]
 80044d4:	bfbc      	itt	lt
 80044d6:	1a9d      	sublt	r5, r3, r2
 80044d8:	2300      	movlt	r3, #0
 80044da:	e73e      	b.n	800435a <_dtoa_r+0x70a>
 80044dc:	9e08      	ldr	r6, [sp, #32]
 80044de:	9d05      	ldr	r5, [sp, #20]
 80044e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80044e2:	e745      	b.n	8004370 <_dtoa_r+0x720>
 80044e4:	9a08      	ldr	r2, [sp, #32]
 80044e6:	e76e      	b.n	80043c6 <_dtoa_r+0x776>
 80044e8:	9b07      	ldr	r3, [sp, #28]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	dc19      	bgt.n	8004522 <_dtoa_r+0x8d2>
 80044ee:	9b00      	ldr	r3, [sp, #0]
 80044f0:	b9bb      	cbnz	r3, 8004522 <_dtoa_r+0x8d2>
 80044f2:	9b01      	ldr	r3, [sp, #4]
 80044f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f8:	b99b      	cbnz	r3, 8004522 <_dtoa_r+0x8d2>
 80044fa:	9b01      	ldr	r3, [sp, #4]
 80044fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004500:	0d1b      	lsrs	r3, r3, #20
 8004502:	051b      	lsls	r3, r3, #20
 8004504:	b183      	cbz	r3, 8004528 <_dtoa_r+0x8d8>
 8004506:	9b05      	ldr	r3, [sp, #20]
 8004508:	3301      	adds	r3, #1
 800450a:	9305      	str	r3, [sp, #20]
 800450c:	9b06      	ldr	r3, [sp, #24]
 800450e:	3301      	adds	r3, #1
 8004510:	9306      	str	r3, [sp, #24]
 8004512:	f04f 0801 	mov.w	r8, #1
 8004516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	f47f af6d 	bne.w	80043f8 <_dtoa_r+0x7a8>
 800451e:	2001      	movs	r0, #1
 8004520:	e772      	b.n	8004408 <_dtoa_r+0x7b8>
 8004522:	f04f 0800 	mov.w	r8, #0
 8004526:	e7f6      	b.n	8004516 <_dtoa_r+0x8c6>
 8004528:	4698      	mov	r8, r3
 800452a:	e7f4      	b.n	8004516 <_dtoa_r+0x8c6>
 800452c:	d080      	beq.n	8004430 <_dtoa_r+0x7e0>
 800452e:	9a05      	ldr	r2, [sp, #20]
 8004530:	331c      	adds	r3, #28
 8004532:	441a      	add	r2, r3
 8004534:	9205      	str	r2, [sp, #20]
 8004536:	9a06      	ldr	r2, [sp, #24]
 8004538:	441a      	add	r2, r3
 800453a:	441d      	add	r5, r3
 800453c:	4613      	mov	r3, r2
 800453e:	e776      	b.n	800442e <_dtoa_r+0x7de>
 8004540:	4603      	mov	r3, r0
 8004542:	e7f4      	b.n	800452e <_dtoa_r+0x8de>
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	dc36      	bgt.n	80045b8 <_dtoa_r+0x968>
 800454a:	9b07      	ldr	r3, [sp, #28]
 800454c:	2b02      	cmp	r3, #2
 800454e:	dd33      	ble.n	80045b8 <_dtoa_r+0x968>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	9b04      	ldr	r3, [sp, #16]
 8004556:	b963      	cbnz	r3, 8004572 <_dtoa_r+0x922>
 8004558:	4631      	mov	r1, r6
 800455a:	2205      	movs	r2, #5
 800455c:	4620      	mov	r0, r4
 800455e:	f000 fbc0 	bl	8004ce2 <__multadd>
 8004562:	4601      	mov	r1, r0
 8004564:	4606      	mov	r6, r0
 8004566:	4650      	mov	r0, sl
 8004568:	f000 fd79 	bl	800505e <__mcmp>
 800456c:	2800      	cmp	r0, #0
 800456e:	f73f adb6 	bgt.w	80040de <_dtoa_r+0x48e>
 8004572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004574:	9d02      	ldr	r5, [sp, #8]
 8004576:	ea6f 0b03 	mvn.w	fp, r3
 800457a:	2300      	movs	r3, #0
 800457c:	9303      	str	r3, [sp, #12]
 800457e:	4631      	mov	r1, r6
 8004580:	4620      	mov	r0, r4
 8004582:	f000 fb97 	bl	8004cb4 <_Bfree>
 8004586:	2f00      	cmp	r7, #0
 8004588:	f43f aea6 	beq.w	80042d8 <_dtoa_r+0x688>
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	b12b      	cbz	r3, 800459c <_dtoa_r+0x94c>
 8004590:	42bb      	cmp	r3, r7
 8004592:	d003      	beq.n	800459c <_dtoa_r+0x94c>
 8004594:	4619      	mov	r1, r3
 8004596:	4620      	mov	r0, r4
 8004598:	f000 fb8c 	bl	8004cb4 <_Bfree>
 800459c:	4639      	mov	r1, r7
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 fb88 	bl	8004cb4 <_Bfree>
 80045a4:	e698      	b.n	80042d8 <_dtoa_r+0x688>
 80045a6:	2600      	movs	r6, #0
 80045a8:	4637      	mov	r7, r6
 80045aa:	e7e2      	b.n	8004572 <_dtoa_r+0x922>
 80045ac:	46bb      	mov	fp, r7
 80045ae:	4637      	mov	r7, r6
 80045b0:	e595      	b.n	80040de <_dtoa_r+0x48e>
 80045b2:	bf00      	nop
 80045b4:	40240000 	.word	0x40240000
 80045b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ba:	bb93      	cbnz	r3, 8004622 <_dtoa_r+0x9d2>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	9d02      	ldr	r5, [sp, #8]
 80045c2:	4631      	mov	r1, r6
 80045c4:	4650      	mov	r0, sl
 80045c6:	f7ff fab7 	bl	8003b38 <quorem>
 80045ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80045ce:	f805 9b01 	strb.w	r9, [r5], #1
 80045d2:	9b02      	ldr	r3, [sp, #8]
 80045d4:	9a04      	ldr	r2, [sp, #16]
 80045d6:	1aeb      	subs	r3, r5, r3
 80045d8:	429a      	cmp	r2, r3
 80045da:	f300 80dc 	bgt.w	8004796 <_dtoa_r+0xb46>
 80045de:	9b02      	ldr	r3, [sp, #8]
 80045e0:	2a01      	cmp	r2, #1
 80045e2:	bfac      	ite	ge
 80045e4:	189b      	addge	r3, r3, r2
 80045e6:	3301      	addlt	r3, #1
 80045e8:	4698      	mov	r8, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	9303      	str	r3, [sp, #12]
 80045ee:	4651      	mov	r1, sl
 80045f0:	2201      	movs	r2, #1
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 fce2 	bl	8004fbc <__lshift>
 80045f8:	4631      	mov	r1, r6
 80045fa:	4682      	mov	sl, r0
 80045fc:	f000 fd2f 	bl	800505e <__mcmp>
 8004600:	2800      	cmp	r0, #0
 8004602:	f300 808d 	bgt.w	8004720 <_dtoa_r+0xad0>
 8004606:	d103      	bne.n	8004610 <_dtoa_r+0x9c0>
 8004608:	f019 0f01 	tst.w	r9, #1
 800460c:	f040 8088 	bne.w	8004720 <_dtoa_r+0xad0>
 8004610:	4645      	mov	r5, r8
 8004612:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004616:	2b30      	cmp	r3, #48	; 0x30
 8004618:	f105 32ff 	add.w	r2, r5, #4294967295
 800461c:	d1af      	bne.n	800457e <_dtoa_r+0x92e>
 800461e:	4615      	mov	r5, r2
 8004620:	e7f7      	b.n	8004612 <_dtoa_r+0x9c2>
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	2d00      	cmp	r5, #0
 8004628:	dd05      	ble.n	8004636 <_dtoa_r+0x9e6>
 800462a:	4639      	mov	r1, r7
 800462c:	462a      	mov	r2, r5
 800462e:	4620      	mov	r0, r4
 8004630:	f000 fcc4 	bl	8004fbc <__lshift>
 8004634:	4607      	mov	r7, r0
 8004636:	f1b8 0f00 	cmp.w	r8, #0
 800463a:	d04c      	beq.n	80046d6 <_dtoa_r+0xa86>
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4620      	mov	r0, r4
 8004640:	f000 fb04 	bl	8004c4c <_Balloc>
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	3202      	adds	r2, #2
 8004648:	4605      	mov	r5, r0
 800464a:	0092      	lsls	r2, r2, #2
 800464c:	f107 010c 	add.w	r1, r7, #12
 8004650:	300c      	adds	r0, #12
 8004652:	f7fe fa35 	bl	8002ac0 <memcpy>
 8004656:	2201      	movs	r2, #1
 8004658:	4629      	mov	r1, r5
 800465a:	4620      	mov	r0, r4
 800465c:	f000 fcae 	bl	8004fbc <__lshift>
 8004660:	9b00      	ldr	r3, [sp, #0]
 8004662:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004666:	9703      	str	r7, [sp, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	4607      	mov	r7, r0
 800466e:	9305      	str	r3, [sp, #20]
 8004670:	4631      	mov	r1, r6
 8004672:	4650      	mov	r0, sl
 8004674:	f7ff fa60 	bl	8003b38 <quorem>
 8004678:	9903      	ldr	r1, [sp, #12]
 800467a:	4605      	mov	r5, r0
 800467c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004680:	4650      	mov	r0, sl
 8004682:	f000 fcec 	bl	800505e <__mcmp>
 8004686:	463a      	mov	r2, r7
 8004688:	9000      	str	r0, [sp, #0]
 800468a:	4631      	mov	r1, r6
 800468c:	4620      	mov	r0, r4
 800468e:	f000 fd00 	bl	8005092 <__mdiff>
 8004692:	68c3      	ldr	r3, [r0, #12]
 8004694:	4602      	mov	r2, r0
 8004696:	bb03      	cbnz	r3, 80046da <_dtoa_r+0xa8a>
 8004698:	4601      	mov	r1, r0
 800469a:	9006      	str	r0, [sp, #24]
 800469c:	4650      	mov	r0, sl
 800469e:	f000 fcde 	bl	800505e <__mcmp>
 80046a2:	9a06      	ldr	r2, [sp, #24]
 80046a4:	4603      	mov	r3, r0
 80046a6:	4611      	mov	r1, r2
 80046a8:	4620      	mov	r0, r4
 80046aa:	9306      	str	r3, [sp, #24]
 80046ac:	f000 fb02 	bl	8004cb4 <_Bfree>
 80046b0:	9b06      	ldr	r3, [sp, #24]
 80046b2:	b9a3      	cbnz	r3, 80046de <_dtoa_r+0xa8e>
 80046b4:	9a07      	ldr	r2, [sp, #28]
 80046b6:	b992      	cbnz	r2, 80046de <_dtoa_r+0xa8e>
 80046b8:	9a05      	ldr	r2, [sp, #20]
 80046ba:	b982      	cbnz	r2, 80046de <_dtoa_r+0xa8e>
 80046bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046c0:	d029      	beq.n	8004716 <_dtoa_r+0xac6>
 80046c2:	9b00      	ldr	r3, [sp, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	dd01      	ble.n	80046cc <_dtoa_r+0xa7c>
 80046c8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80046cc:	f108 0501 	add.w	r5, r8, #1
 80046d0:	f888 9000 	strb.w	r9, [r8]
 80046d4:	e753      	b.n	800457e <_dtoa_r+0x92e>
 80046d6:	4638      	mov	r0, r7
 80046d8:	e7c2      	b.n	8004660 <_dtoa_r+0xa10>
 80046da:	2301      	movs	r3, #1
 80046dc:	e7e3      	b.n	80046a6 <_dtoa_r+0xa56>
 80046de:	9a00      	ldr	r2, [sp, #0]
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	db04      	blt.n	80046ee <_dtoa_r+0xa9e>
 80046e4:	d125      	bne.n	8004732 <_dtoa_r+0xae2>
 80046e6:	9a07      	ldr	r2, [sp, #28]
 80046e8:	bb1a      	cbnz	r2, 8004732 <_dtoa_r+0xae2>
 80046ea:	9a05      	ldr	r2, [sp, #20]
 80046ec:	bb0a      	cbnz	r2, 8004732 <_dtoa_r+0xae2>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	ddec      	ble.n	80046cc <_dtoa_r+0xa7c>
 80046f2:	4651      	mov	r1, sl
 80046f4:	2201      	movs	r2, #1
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 fc60 	bl	8004fbc <__lshift>
 80046fc:	4631      	mov	r1, r6
 80046fe:	4682      	mov	sl, r0
 8004700:	f000 fcad 	bl	800505e <__mcmp>
 8004704:	2800      	cmp	r0, #0
 8004706:	dc03      	bgt.n	8004710 <_dtoa_r+0xac0>
 8004708:	d1e0      	bne.n	80046cc <_dtoa_r+0xa7c>
 800470a:	f019 0f01 	tst.w	r9, #1
 800470e:	d0dd      	beq.n	80046cc <_dtoa_r+0xa7c>
 8004710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004714:	d1d8      	bne.n	80046c8 <_dtoa_r+0xa78>
 8004716:	2339      	movs	r3, #57	; 0x39
 8004718:	f888 3000 	strb.w	r3, [r8]
 800471c:	f108 0801 	add.w	r8, r8, #1
 8004720:	4645      	mov	r5, r8
 8004722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004726:	2b39      	cmp	r3, #57	; 0x39
 8004728:	f105 32ff 	add.w	r2, r5, #4294967295
 800472c:	d03b      	beq.n	80047a6 <_dtoa_r+0xb56>
 800472e:	3301      	adds	r3, #1
 8004730:	e040      	b.n	80047b4 <_dtoa_r+0xb64>
 8004732:	2b00      	cmp	r3, #0
 8004734:	f108 0501 	add.w	r5, r8, #1
 8004738:	dd05      	ble.n	8004746 <_dtoa_r+0xaf6>
 800473a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800473e:	d0ea      	beq.n	8004716 <_dtoa_r+0xac6>
 8004740:	f109 0901 	add.w	r9, r9, #1
 8004744:	e7c4      	b.n	80046d0 <_dtoa_r+0xa80>
 8004746:	9b02      	ldr	r3, [sp, #8]
 8004748:	9a04      	ldr	r2, [sp, #16]
 800474a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800474e:	1aeb      	subs	r3, r5, r3
 8004750:	4293      	cmp	r3, r2
 8004752:	46a8      	mov	r8, r5
 8004754:	f43f af4b 	beq.w	80045ee <_dtoa_r+0x99e>
 8004758:	4651      	mov	r1, sl
 800475a:	2300      	movs	r3, #0
 800475c:	220a      	movs	r2, #10
 800475e:	4620      	mov	r0, r4
 8004760:	f000 fabf 	bl	8004ce2 <__multadd>
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	9903      	ldr	r1, [sp, #12]
 8004768:	42bb      	cmp	r3, r7
 800476a:	4682      	mov	sl, r0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	f04f 020a 	mov.w	r2, #10
 8004774:	4620      	mov	r0, r4
 8004776:	d104      	bne.n	8004782 <_dtoa_r+0xb32>
 8004778:	f000 fab3 	bl	8004ce2 <__multadd>
 800477c:	9003      	str	r0, [sp, #12]
 800477e:	4607      	mov	r7, r0
 8004780:	e776      	b.n	8004670 <_dtoa_r+0xa20>
 8004782:	f000 faae 	bl	8004ce2 <__multadd>
 8004786:	2300      	movs	r3, #0
 8004788:	9003      	str	r0, [sp, #12]
 800478a:	220a      	movs	r2, #10
 800478c:	4639      	mov	r1, r7
 800478e:	4620      	mov	r0, r4
 8004790:	f000 faa7 	bl	8004ce2 <__multadd>
 8004794:	e7f3      	b.n	800477e <_dtoa_r+0xb2e>
 8004796:	4651      	mov	r1, sl
 8004798:	2300      	movs	r3, #0
 800479a:	220a      	movs	r2, #10
 800479c:	4620      	mov	r0, r4
 800479e:	f000 faa0 	bl	8004ce2 <__multadd>
 80047a2:	4682      	mov	sl, r0
 80047a4:	e70d      	b.n	80045c2 <_dtoa_r+0x972>
 80047a6:	9b02      	ldr	r3, [sp, #8]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d105      	bne.n	80047b8 <_dtoa_r+0xb68>
 80047ac:	9a02      	ldr	r2, [sp, #8]
 80047ae:	f10b 0b01 	add.w	fp, fp, #1
 80047b2:	2331      	movs	r3, #49	; 0x31
 80047b4:	7013      	strb	r3, [r2, #0]
 80047b6:	e6e2      	b.n	800457e <_dtoa_r+0x92e>
 80047b8:	4615      	mov	r5, r2
 80047ba:	e7b2      	b.n	8004722 <_dtoa_r+0xad2>
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <_dtoa_r+0xb94>)
 80047be:	f7ff baae 	b.w	8003d1e <_dtoa_r+0xce>
 80047c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f aa88 	bne.w	8003cda <_dtoa_r+0x8a>
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <_dtoa_r+0xb98>)
 80047cc:	f7ff baa7 	b.w	8003d1e <_dtoa_r+0xce>
 80047d0:	9b04      	ldr	r3, [sp, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f73f aef4 	bgt.w	80045c0 <_dtoa_r+0x970>
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	f77f aef0 	ble.w	80045c0 <_dtoa_r+0x970>
 80047e0:	e6b8      	b.n	8004554 <_dtoa_r+0x904>
 80047e2:	bf00      	nop
 80047e4:	08005b56 	.word	0x08005b56
 80047e8:	08005b78 	.word	0x08005b78

080047ec <_localeconv_r>:
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <_localeconv_r+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a18      	ldr	r0, [r3, #32]
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <_localeconv_r+0x18>)
 80047f4:	2800      	cmp	r0, #0
 80047f6:	bf08      	it	eq
 80047f8:	4618      	moveq	r0, r3
 80047fa:	30f0      	adds	r0, #240	; 0xf0
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000000 	.word	0x20000000
 8004804:	20000504 	.word	0x20000504

08004808 <malloc>:
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <malloc+0xc>)
 800480a:	4601      	mov	r1, r0
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f000 b803 	b.w	8004818 <_malloc_r>
 8004812:	bf00      	nop
 8004814:	20000000 	.word	0x20000000

08004818 <_malloc_r>:
 8004818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	f101 040b 	add.w	r4, r1, #11
 8004820:	2c16      	cmp	r4, #22
 8004822:	4681      	mov	r9, r0
 8004824:	d907      	bls.n	8004836 <_malloc_r+0x1e>
 8004826:	f034 0407 	bics.w	r4, r4, #7
 800482a:	d505      	bpl.n	8004838 <_malloc_r+0x20>
 800482c:	230c      	movs	r3, #12
 800482e:	f8c9 3000 	str.w	r3, [r9]
 8004832:	2600      	movs	r6, #0
 8004834:	e131      	b.n	8004a9a <_malloc_r+0x282>
 8004836:	2410      	movs	r4, #16
 8004838:	428c      	cmp	r4, r1
 800483a:	d3f7      	bcc.n	800482c <_malloc_r+0x14>
 800483c:	4648      	mov	r0, r9
 800483e:	f000 f9f9 	bl	8004c34 <__malloc_lock>
 8004842:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004846:	4d9c      	ldr	r5, [pc, #624]	; (8004ab8 <_malloc_r+0x2a0>)
 8004848:	d236      	bcs.n	80048b8 <_malloc_r+0xa0>
 800484a:	f104 0208 	add.w	r2, r4, #8
 800484e:	442a      	add	r2, r5
 8004850:	f1a2 0108 	sub.w	r1, r2, #8
 8004854:	6856      	ldr	r6, [r2, #4]
 8004856:	428e      	cmp	r6, r1
 8004858:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800485c:	d102      	bne.n	8004864 <_malloc_r+0x4c>
 800485e:	68d6      	ldr	r6, [r2, #12]
 8004860:	42b2      	cmp	r2, r6
 8004862:	d010      	beq.n	8004886 <_malloc_r+0x6e>
 8004864:	6873      	ldr	r3, [r6, #4]
 8004866:	68f2      	ldr	r2, [r6, #12]
 8004868:	68b1      	ldr	r1, [r6, #8]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60ca      	str	r2, [r1, #12]
 8004870:	4433      	add	r3, r6
 8004872:	6091      	str	r1, [r2, #8]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	605a      	str	r2, [r3, #4]
 800487c:	4648      	mov	r0, r9
 800487e:	f000 f9df 	bl	8004c40 <__malloc_unlock>
 8004882:	3608      	adds	r6, #8
 8004884:	e109      	b.n	8004a9a <_malloc_r+0x282>
 8004886:	3302      	adds	r3, #2
 8004888:	4a8c      	ldr	r2, [pc, #560]	; (8004abc <_malloc_r+0x2a4>)
 800488a:	692e      	ldr	r6, [r5, #16]
 800488c:	4296      	cmp	r6, r2
 800488e:	4611      	mov	r1, r2
 8004890:	d06d      	beq.n	800496e <_malloc_r+0x156>
 8004892:	6870      	ldr	r0, [r6, #4]
 8004894:	f020 0003 	bic.w	r0, r0, #3
 8004898:	1b07      	subs	r7, r0, r4
 800489a:	2f0f      	cmp	r7, #15
 800489c:	dd47      	ble.n	800492e <_malloc_r+0x116>
 800489e:	1933      	adds	r3, r6, r4
 80048a0:	f044 0401 	orr.w	r4, r4, #1
 80048a4:	6074      	str	r4, [r6, #4]
 80048a6:	616b      	str	r3, [r5, #20]
 80048a8:	612b      	str	r3, [r5, #16]
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	609a      	str	r2, [r3, #8]
 80048ae:	f047 0201 	orr.w	r2, r7, #1
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	5037      	str	r7, [r6, r0]
 80048b6:	e7e1      	b.n	800487c <_malloc_r+0x64>
 80048b8:	0a63      	lsrs	r3, r4, #9
 80048ba:	d02a      	beq.n	8004912 <_malloc_r+0xfa>
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d812      	bhi.n	80048e6 <_malloc_r+0xce>
 80048c0:	09a3      	lsrs	r3, r4, #6
 80048c2:	3338      	adds	r3, #56	; 0x38
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80048ca:	f1a2 0008 	sub.w	r0, r2, #8
 80048ce:	6856      	ldr	r6, [r2, #4]
 80048d0:	4286      	cmp	r6, r0
 80048d2:	d006      	beq.n	80048e2 <_malloc_r+0xca>
 80048d4:	6872      	ldr	r2, [r6, #4]
 80048d6:	f022 0203 	bic.w	r2, r2, #3
 80048da:	1b11      	subs	r1, r2, r4
 80048dc:	290f      	cmp	r1, #15
 80048de:	dd1c      	ble.n	800491a <_malloc_r+0x102>
 80048e0:	3b01      	subs	r3, #1
 80048e2:	3301      	adds	r3, #1
 80048e4:	e7d0      	b.n	8004888 <_malloc_r+0x70>
 80048e6:	2b14      	cmp	r3, #20
 80048e8:	d801      	bhi.n	80048ee <_malloc_r+0xd6>
 80048ea:	335b      	adds	r3, #91	; 0x5b
 80048ec:	e7ea      	b.n	80048c4 <_malloc_r+0xac>
 80048ee:	2b54      	cmp	r3, #84	; 0x54
 80048f0:	d802      	bhi.n	80048f8 <_malloc_r+0xe0>
 80048f2:	0b23      	lsrs	r3, r4, #12
 80048f4:	336e      	adds	r3, #110	; 0x6e
 80048f6:	e7e5      	b.n	80048c4 <_malloc_r+0xac>
 80048f8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80048fc:	d802      	bhi.n	8004904 <_malloc_r+0xec>
 80048fe:	0be3      	lsrs	r3, r4, #15
 8004900:	3377      	adds	r3, #119	; 0x77
 8004902:	e7df      	b.n	80048c4 <_malloc_r+0xac>
 8004904:	f240 5254 	movw	r2, #1364	; 0x554
 8004908:	4293      	cmp	r3, r2
 800490a:	d804      	bhi.n	8004916 <_malloc_r+0xfe>
 800490c:	0ca3      	lsrs	r3, r4, #18
 800490e:	337c      	adds	r3, #124	; 0x7c
 8004910:	e7d8      	b.n	80048c4 <_malloc_r+0xac>
 8004912:	233f      	movs	r3, #63	; 0x3f
 8004914:	e7d6      	b.n	80048c4 <_malloc_r+0xac>
 8004916:	237e      	movs	r3, #126	; 0x7e
 8004918:	e7d4      	b.n	80048c4 <_malloc_r+0xac>
 800491a:	2900      	cmp	r1, #0
 800491c:	68f1      	ldr	r1, [r6, #12]
 800491e:	db04      	blt.n	800492a <_malloc_r+0x112>
 8004920:	68b3      	ldr	r3, [r6, #8]
 8004922:	60d9      	str	r1, [r3, #12]
 8004924:	608b      	str	r3, [r1, #8]
 8004926:	18b3      	adds	r3, r6, r2
 8004928:	e7a4      	b.n	8004874 <_malloc_r+0x5c>
 800492a:	460e      	mov	r6, r1
 800492c:	e7d0      	b.n	80048d0 <_malloc_r+0xb8>
 800492e:	2f00      	cmp	r7, #0
 8004930:	616a      	str	r2, [r5, #20]
 8004932:	612a      	str	r2, [r5, #16]
 8004934:	db05      	blt.n	8004942 <_malloc_r+0x12a>
 8004936:	4430      	add	r0, r6
 8004938:	6843      	ldr	r3, [r0, #4]
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6043      	str	r3, [r0, #4]
 8004940:	e79c      	b.n	800487c <_malloc_r+0x64>
 8004942:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004946:	d244      	bcs.n	80049d2 <_malloc_r+0x1ba>
 8004948:	08c0      	lsrs	r0, r0, #3
 800494a:	1087      	asrs	r7, r0, #2
 800494c:	2201      	movs	r2, #1
 800494e:	fa02 f707 	lsl.w	r7, r2, r7
 8004952:	686a      	ldr	r2, [r5, #4]
 8004954:	3001      	adds	r0, #1
 8004956:	433a      	orrs	r2, r7
 8004958:	606a      	str	r2, [r5, #4]
 800495a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800495e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004962:	60b7      	str	r7, [r6, #8]
 8004964:	3a08      	subs	r2, #8
 8004966:	60f2      	str	r2, [r6, #12]
 8004968:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800496c:	60fe      	str	r6, [r7, #12]
 800496e:	2001      	movs	r0, #1
 8004970:	109a      	asrs	r2, r3, #2
 8004972:	fa00 f202 	lsl.w	r2, r0, r2
 8004976:	6868      	ldr	r0, [r5, #4]
 8004978:	4282      	cmp	r2, r0
 800497a:	f200 80a1 	bhi.w	8004ac0 <_malloc_r+0x2a8>
 800497e:	4202      	tst	r2, r0
 8004980:	d106      	bne.n	8004990 <_malloc_r+0x178>
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	0052      	lsls	r2, r2, #1
 8004988:	4202      	tst	r2, r0
 800498a:	f103 0304 	add.w	r3, r3, #4
 800498e:	d0fa      	beq.n	8004986 <_malloc_r+0x16e>
 8004990:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004994:	46e0      	mov	r8, ip
 8004996:	469e      	mov	lr, r3
 8004998:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800499c:	4546      	cmp	r6, r8
 800499e:	d153      	bne.n	8004a48 <_malloc_r+0x230>
 80049a0:	f10e 0e01 	add.w	lr, lr, #1
 80049a4:	f01e 0f03 	tst.w	lr, #3
 80049a8:	f108 0808 	add.w	r8, r8, #8
 80049ac:	d1f4      	bne.n	8004998 <_malloc_r+0x180>
 80049ae:	0798      	lsls	r0, r3, #30
 80049b0:	d179      	bne.n	8004aa6 <_malloc_r+0x28e>
 80049b2:	686b      	ldr	r3, [r5, #4]
 80049b4:	ea23 0302 	bic.w	r3, r3, r2
 80049b8:	606b      	str	r3, [r5, #4]
 80049ba:	6868      	ldr	r0, [r5, #4]
 80049bc:	0052      	lsls	r2, r2, #1
 80049be:	4282      	cmp	r2, r0
 80049c0:	d87e      	bhi.n	8004ac0 <_malloc_r+0x2a8>
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	d07c      	beq.n	8004ac0 <_malloc_r+0x2a8>
 80049c6:	4673      	mov	r3, lr
 80049c8:	4202      	tst	r2, r0
 80049ca:	d1e1      	bne.n	8004990 <_malloc_r+0x178>
 80049cc:	3304      	adds	r3, #4
 80049ce:	0052      	lsls	r2, r2, #1
 80049d0:	e7fa      	b.n	80049c8 <_malloc_r+0x1b0>
 80049d2:	0a42      	lsrs	r2, r0, #9
 80049d4:	2a04      	cmp	r2, #4
 80049d6:	d815      	bhi.n	8004a04 <_malloc_r+0x1ec>
 80049d8:	0982      	lsrs	r2, r0, #6
 80049da:	3238      	adds	r2, #56	; 0x38
 80049dc:	1c57      	adds	r7, r2, #1
 80049de:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80049e2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80049e6:	45be      	cmp	lr, r7
 80049e8:	d126      	bne.n	8004a38 <_malloc_r+0x220>
 80049ea:	2001      	movs	r0, #1
 80049ec:	1092      	asrs	r2, r2, #2
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	6868      	ldr	r0, [r5, #4]
 80049f4:	4310      	orrs	r0, r2
 80049f6:	6068      	str	r0, [r5, #4]
 80049f8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80049fc:	60b7      	str	r7, [r6, #8]
 80049fe:	f8ce 6008 	str.w	r6, [lr, #8]
 8004a02:	e7b3      	b.n	800496c <_malloc_r+0x154>
 8004a04:	2a14      	cmp	r2, #20
 8004a06:	d801      	bhi.n	8004a0c <_malloc_r+0x1f4>
 8004a08:	325b      	adds	r2, #91	; 0x5b
 8004a0a:	e7e7      	b.n	80049dc <_malloc_r+0x1c4>
 8004a0c:	2a54      	cmp	r2, #84	; 0x54
 8004a0e:	d802      	bhi.n	8004a16 <_malloc_r+0x1fe>
 8004a10:	0b02      	lsrs	r2, r0, #12
 8004a12:	326e      	adds	r2, #110	; 0x6e
 8004a14:	e7e2      	b.n	80049dc <_malloc_r+0x1c4>
 8004a16:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004a1a:	d802      	bhi.n	8004a22 <_malloc_r+0x20a>
 8004a1c:	0bc2      	lsrs	r2, r0, #15
 8004a1e:	3277      	adds	r2, #119	; 0x77
 8004a20:	e7dc      	b.n	80049dc <_malloc_r+0x1c4>
 8004a22:	f240 5754 	movw	r7, #1364	; 0x554
 8004a26:	42ba      	cmp	r2, r7
 8004a28:	bf9a      	itte	ls
 8004a2a:	0c82      	lsrls	r2, r0, #18
 8004a2c:	327c      	addls	r2, #124	; 0x7c
 8004a2e:	227e      	movhi	r2, #126	; 0x7e
 8004a30:	e7d4      	b.n	80049dc <_malloc_r+0x1c4>
 8004a32:	68bf      	ldr	r7, [r7, #8]
 8004a34:	45be      	cmp	lr, r7
 8004a36:	d004      	beq.n	8004a42 <_malloc_r+0x22a>
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	f022 0203 	bic.w	r2, r2, #3
 8004a3e:	4290      	cmp	r0, r2
 8004a40:	d3f7      	bcc.n	8004a32 <_malloc_r+0x21a>
 8004a42:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004a46:	e7d7      	b.n	80049f8 <_malloc_r+0x1e0>
 8004a48:	6870      	ldr	r0, [r6, #4]
 8004a4a:	68f7      	ldr	r7, [r6, #12]
 8004a4c:	f020 0003 	bic.w	r0, r0, #3
 8004a50:	eba0 0a04 	sub.w	sl, r0, r4
 8004a54:	f1ba 0f0f 	cmp.w	sl, #15
 8004a58:	dd10      	ble.n	8004a7c <_malloc_r+0x264>
 8004a5a:	68b2      	ldr	r2, [r6, #8]
 8004a5c:	1933      	adds	r3, r6, r4
 8004a5e:	f044 0401 	orr.w	r4, r4, #1
 8004a62:	6074      	str	r4, [r6, #4]
 8004a64:	60d7      	str	r7, [r2, #12]
 8004a66:	60ba      	str	r2, [r7, #8]
 8004a68:	f04a 0201 	orr.w	r2, sl, #1
 8004a6c:	616b      	str	r3, [r5, #20]
 8004a6e:	612b      	str	r3, [r5, #16]
 8004a70:	60d9      	str	r1, [r3, #12]
 8004a72:	6099      	str	r1, [r3, #8]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	f846 a000 	str.w	sl, [r6, r0]
 8004a7a:	e6ff      	b.n	800487c <_malloc_r+0x64>
 8004a7c:	f1ba 0f00 	cmp.w	sl, #0
 8004a80:	db0f      	blt.n	8004aa2 <_malloc_r+0x28a>
 8004a82:	4430      	add	r0, r6
 8004a84:	6843      	ldr	r3, [r0, #4]
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	6043      	str	r3, [r0, #4]
 8004a8c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004a90:	4648      	mov	r0, r9
 8004a92:	60df      	str	r7, [r3, #12]
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	f000 f8d3 	bl	8004c40 <__malloc_unlock>
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	b003      	add	sp, #12
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	463e      	mov	r6, r7
 8004aa4:	e77a      	b.n	800499c <_malloc_r+0x184>
 8004aa6:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004aaa:	4584      	cmp	ip, r0
 8004aac:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ab0:	f43f af7d 	beq.w	80049ae <_malloc_r+0x196>
 8004ab4:	e781      	b.n	80049ba <_malloc_r+0x1a2>
 8004ab6:	bf00      	nop
 8004ab8:	200000f4 	.word	0x200000f4
 8004abc:	200000fc 	.word	0x200000fc
 8004ac0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004ac4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004ac8:	f026 0603 	bic.w	r6, r6, #3
 8004acc:	42b4      	cmp	r4, r6
 8004ace:	d803      	bhi.n	8004ad8 <_malloc_r+0x2c0>
 8004ad0:	1b33      	subs	r3, r6, r4
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	f300 8096 	bgt.w	8004c04 <_malloc_r+0x3ec>
 8004ad8:	4a4f      	ldr	r2, [pc, #316]	; (8004c18 <_malloc_r+0x400>)
 8004ada:	6817      	ldr	r7, [r2, #0]
 8004adc:	4a4f      	ldr	r2, [pc, #316]	; (8004c1c <_malloc_r+0x404>)
 8004ade:	6811      	ldr	r1, [r2, #0]
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	3101      	adds	r1, #1
 8004ae4:	eb0b 0306 	add.w	r3, fp, r6
 8004ae8:	4427      	add	r7, r4
 8004aea:	d005      	beq.n	8004af8 <_malloc_r+0x2e0>
 8004aec:	494c      	ldr	r1, [pc, #304]	; (8004c20 <_malloc_r+0x408>)
 8004aee:	3901      	subs	r1, #1
 8004af0:	440f      	add	r7, r1
 8004af2:	3101      	adds	r1, #1
 8004af4:	4249      	negs	r1, r1
 8004af6:	400f      	ands	r7, r1
 8004af8:	4639      	mov	r1, r7
 8004afa:	4648      	mov	r0, r9
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	f000 fb74 	bl	80051ec <_sbrk_r>
 8004b04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b08:	4680      	mov	r8, r0
 8004b0a:	d056      	beq.n	8004bba <_malloc_r+0x3a2>
 8004b0c:	9b00      	ldr	r3, [sp, #0]
 8004b0e:	9a01      	ldr	r2, [sp, #4]
 8004b10:	4283      	cmp	r3, r0
 8004b12:	d901      	bls.n	8004b18 <_malloc_r+0x300>
 8004b14:	45ab      	cmp	fp, r5
 8004b16:	d150      	bne.n	8004bba <_malloc_r+0x3a2>
 8004b18:	4842      	ldr	r0, [pc, #264]	; (8004c24 <_malloc_r+0x40c>)
 8004b1a:	6801      	ldr	r1, [r0, #0]
 8004b1c:	4543      	cmp	r3, r8
 8004b1e:	eb07 0e01 	add.w	lr, r7, r1
 8004b22:	f8c0 e000 	str.w	lr, [r0]
 8004b26:	4940      	ldr	r1, [pc, #256]	; (8004c28 <_malloc_r+0x410>)
 8004b28:	4682      	mov	sl, r0
 8004b2a:	d113      	bne.n	8004b54 <_malloc_r+0x33c>
 8004b2c:	420b      	tst	r3, r1
 8004b2e:	d111      	bne.n	8004b54 <_malloc_r+0x33c>
 8004b30:	68ab      	ldr	r3, [r5, #8]
 8004b32:	443e      	add	r6, r7
 8004b34:	f046 0601 	orr.w	r6, r6, #1
 8004b38:	605e      	str	r6, [r3, #4]
 8004b3a:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <_malloc_r+0x414>)
 8004b3c:	f8da 3000 	ldr.w	r3, [sl]
 8004b40:	6811      	ldr	r1, [r2, #0]
 8004b42:	428b      	cmp	r3, r1
 8004b44:	bf88      	it	hi
 8004b46:	6013      	strhi	r3, [r2, #0]
 8004b48:	4a39      	ldr	r2, [pc, #228]	; (8004c30 <_malloc_r+0x418>)
 8004b4a:	6811      	ldr	r1, [r2, #0]
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	bf88      	it	hi
 8004b50:	6013      	strhi	r3, [r2, #0]
 8004b52:	e032      	b.n	8004bba <_malloc_r+0x3a2>
 8004b54:	6810      	ldr	r0, [r2, #0]
 8004b56:	3001      	adds	r0, #1
 8004b58:	bf1b      	ittet	ne
 8004b5a:	eba8 0303 	subne.w	r3, r8, r3
 8004b5e:	4473      	addne	r3, lr
 8004b60:	f8c2 8000 	streq.w	r8, [r2]
 8004b64:	f8ca 3000 	strne.w	r3, [sl]
 8004b68:	f018 0007 	ands.w	r0, r8, #7
 8004b6c:	bf1c      	itt	ne
 8004b6e:	f1c0 0008 	rsbne	r0, r0, #8
 8004b72:	4480      	addne	r8, r0
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <_malloc_r+0x408>)
 8004b76:	4447      	add	r7, r8
 8004b78:	4418      	add	r0, r3
 8004b7a:	400f      	ands	r7, r1
 8004b7c:	1bc7      	subs	r7, r0, r7
 8004b7e:	4639      	mov	r1, r7
 8004b80:	4648      	mov	r0, r9
 8004b82:	f000 fb33 	bl	80051ec <_sbrk_r>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	bf08      	it	eq
 8004b8a:	4640      	moveq	r0, r8
 8004b8c:	f8da 3000 	ldr.w	r3, [sl]
 8004b90:	f8c5 8008 	str.w	r8, [r5, #8]
 8004b94:	bf08      	it	eq
 8004b96:	2700      	moveq	r7, #0
 8004b98:	eba0 0008 	sub.w	r0, r0, r8
 8004b9c:	443b      	add	r3, r7
 8004b9e:	4407      	add	r7, r0
 8004ba0:	f047 0701 	orr.w	r7, r7, #1
 8004ba4:	45ab      	cmp	fp, r5
 8004ba6:	f8ca 3000 	str.w	r3, [sl]
 8004baa:	f8c8 7004 	str.w	r7, [r8, #4]
 8004bae:	d0c4      	beq.n	8004b3a <_malloc_r+0x322>
 8004bb0:	2e0f      	cmp	r6, #15
 8004bb2:	d810      	bhi.n	8004bd6 <_malloc_r+0x3be>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f8c8 3004 	str.w	r3, [r8, #4]
 8004bba:	68ab      	ldr	r3, [r5, #8]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	f022 0203 	bic.w	r2, r2, #3
 8004bc2:	4294      	cmp	r4, r2
 8004bc4:	eba2 0304 	sub.w	r3, r2, r4
 8004bc8:	d801      	bhi.n	8004bce <_malloc_r+0x3b6>
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	dc1a      	bgt.n	8004c04 <_malloc_r+0x3ec>
 8004bce:	4648      	mov	r0, r9
 8004bd0:	f000 f836 	bl	8004c40 <__malloc_unlock>
 8004bd4:	e62d      	b.n	8004832 <_malloc_r+0x1a>
 8004bd6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004bda:	3e0c      	subs	r6, #12
 8004bdc:	f026 0607 	bic.w	r6, r6, #7
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	4333      	orrs	r3, r6
 8004be6:	f8cb 3004 	str.w	r3, [fp, #4]
 8004bea:	eb0b 0306 	add.w	r3, fp, r6
 8004bee:	2205      	movs	r2, #5
 8004bf0:	2e0f      	cmp	r6, #15
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	d9a0      	bls.n	8004b3a <_malloc_r+0x322>
 8004bf8:	f10b 0108 	add.w	r1, fp, #8
 8004bfc:	4648      	mov	r0, r9
 8004bfe:	f000 fc03 	bl	8005408 <_free_r>
 8004c02:	e79a      	b.n	8004b3a <_malloc_r+0x322>
 8004c04:	68ae      	ldr	r6, [r5, #8]
 8004c06:	f044 0201 	orr.w	r2, r4, #1
 8004c0a:	4434      	add	r4, r6
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6072      	str	r2, [r6, #4]
 8004c12:	60ac      	str	r4, [r5, #8]
 8004c14:	6063      	str	r3, [r4, #4]
 8004c16:	e631      	b.n	800487c <_malloc_r+0x64>
 8004c18:	20000c80 	.word	0x20000c80
 8004c1c:	200004fc 	.word	0x200004fc
 8004c20:	00000080 	.word	0x00000080
 8004c24:	20000c50 	.word	0x20000c50
 8004c28:	0000007f 	.word	0x0000007f
 8004c2c:	20000c78 	.word	0x20000c78
 8004c30:	20000c7c 	.word	0x20000c7c

08004c34 <__malloc_lock>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__malloc_lock+0x8>)
 8004c36:	f000 bca3 	b.w	8005580 <__retarget_lock_acquire_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000d34 	.word	0x20000d34

08004c40 <__malloc_unlock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__malloc_unlock+0x8>)
 8004c42:	f000 bc9e 	b.w	8005582 <__retarget_lock_release_recursive>
 8004c46:	bf00      	nop
 8004c48:	20000d34 	.word	0x20000d34

08004c4c <_Balloc>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c50:	4604      	mov	r4, r0
 8004c52:	460e      	mov	r6, r1
 8004c54:	b93d      	cbnz	r5, 8004c66 <_Balloc+0x1a>
 8004c56:	2010      	movs	r0, #16
 8004c58:	f7ff fdd6 	bl	8004808 <malloc>
 8004c5c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c5e:	6045      	str	r5, [r0, #4]
 8004c60:	6085      	str	r5, [r0, #8]
 8004c62:	6005      	str	r5, [r0, #0]
 8004c64:	60c5      	str	r5, [r0, #12]
 8004c66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c68:	68eb      	ldr	r3, [r5, #12]
 8004c6a:	b183      	cbz	r3, 8004c8e <_Balloc+0x42>
 8004c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004c74:	b9b8      	cbnz	r0, 8004ca6 <_Balloc+0x5a>
 8004c76:	2101      	movs	r1, #1
 8004c78:	fa01 f506 	lsl.w	r5, r1, r6
 8004c7c:	1d6a      	adds	r2, r5, #5
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 fb3d 	bl	8005300 <_calloc_r>
 8004c86:	b160      	cbz	r0, 8004ca2 <_Balloc+0x56>
 8004c88:	6046      	str	r6, [r0, #4]
 8004c8a:	6085      	str	r5, [r0, #8]
 8004c8c:	e00e      	b.n	8004cac <_Balloc+0x60>
 8004c8e:	2221      	movs	r2, #33	; 0x21
 8004c90:	2104      	movs	r1, #4
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fb34 	bl	8005300 <_calloc_r>
 8004c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9a:	60e8      	str	r0, [r5, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e4      	bne.n	8004c6c <_Balloc+0x20>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
 8004ca6:	6802      	ldr	r2, [r0, #0]
 8004ca8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004cac:	2300      	movs	r3, #0
 8004cae:	6103      	str	r3, [r0, #16]
 8004cb0:	60c3      	str	r3, [r0, #12]
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}

08004cb4 <_Bfree>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004cb8:	4606      	mov	r6, r0
 8004cba:	460d      	mov	r5, r1
 8004cbc:	b93c      	cbnz	r4, 8004cce <_Bfree+0x1a>
 8004cbe:	2010      	movs	r0, #16
 8004cc0:	f7ff fda2 	bl	8004808 <malloc>
 8004cc4:	6270      	str	r0, [r6, #36]	; 0x24
 8004cc6:	6044      	str	r4, [r0, #4]
 8004cc8:	6084      	str	r4, [r0, #8]
 8004cca:	6004      	str	r4, [r0, #0]
 8004ccc:	60c4      	str	r4, [r0, #12]
 8004cce:	b13d      	cbz	r5, 8004ce0 <_Bfree+0x2c>
 8004cd0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004cd2:	686a      	ldr	r2, [r5, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cda:	6029      	str	r1, [r5, #0]
 8004cdc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}

08004ce2 <__multadd>:
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	690d      	ldr	r5, [r1, #16]
 8004ce8:	461f      	mov	r7, r3
 8004cea:	4606      	mov	r6, r0
 8004cec:	460c      	mov	r4, r1
 8004cee:	f101 0e14 	add.w	lr, r1, #20
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8de 0000 	ldr.w	r0, [lr]
 8004cf8:	b281      	uxth	r1, r0
 8004cfa:	fb02 7101 	mla	r1, r2, r1, r7
 8004cfe:	0c0f      	lsrs	r7, r1, #16
 8004d00:	0c00      	lsrs	r0, r0, #16
 8004d02:	fb02 7000 	mla	r0, r2, r0, r7
 8004d06:	b289      	uxth	r1, r1
 8004d08:	3301      	adds	r3, #1
 8004d0a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004d0e:	429d      	cmp	r5, r3
 8004d10:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004d14:	f84e 1b04 	str.w	r1, [lr], #4
 8004d18:	dcec      	bgt.n	8004cf4 <__multadd+0x12>
 8004d1a:	b1d7      	cbz	r7, 8004d52 <__multadd+0x70>
 8004d1c:	68a3      	ldr	r3, [r4, #8]
 8004d1e:	429d      	cmp	r5, r3
 8004d20:	db12      	blt.n	8004d48 <__multadd+0x66>
 8004d22:	6861      	ldr	r1, [r4, #4]
 8004d24:	4630      	mov	r0, r6
 8004d26:	3101      	adds	r1, #1
 8004d28:	f7ff ff90 	bl	8004c4c <_Balloc>
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	3202      	adds	r2, #2
 8004d30:	f104 010c 	add.w	r1, r4, #12
 8004d34:	4680      	mov	r8, r0
 8004d36:	0092      	lsls	r2, r2, #2
 8004d38:	300c      	adds	r0, #12
 8004d3a:	f7fd fec1 	bl	8002ac0 <memcpy>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7ff ffb7 	bl	8004cb4 <_Bfree>
 8004d46:	4644      	mov	r4, r8
 8004d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	615f      	str	r7, [r3, #20]
 8004d50:	6125      	str	r5, [r4, #16]
 8004d52:	4620      	mov	r0, r4
 8004d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d58 <__hi0bits>:
 8004d58:	0c02      	lsrs	r2, r0, #16
 8004d5a:	0412      	lsls	r2, r2, #16
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	b9b2      	cbnz	r2, 8004d8e <__hi0bits+0x36>
 8004d60:	0403      	lsls	r3, r0, #16
 8004d62:	2010      	movs	r0, #16
 8004d64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d68:	bf04      	itt	eq
 8004d6a:	021b      	lsleq	r3, r3, #8
 8004d6c:	3008      	addeq	r0, #8
 8004d6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d72:	bf04      	itt	eq
 8004d74:	011b      	lsleq	r3, r3, #4
 8004d76:	3004      	addeq	r0, #4
 8004d78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d7c:	bf04      	itt	eq
 8004d7e:	009b      	lsleq	r3, r3, #2
 8004d80:	3002      	addeq	r0, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	db06      	blt.n	8004d94 <__hi0bits+0x3c>
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	d503      	bpl.n	8004d92 <__hi0bits+0x3a>
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	4770      	bx	lr
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7e8      	b.n	8004d64 <__hi0bits+0xc>
 8004d92:	2020      	movs	r0, #32
 8004d94:	4770      	bx	lr

08004d96 <__lo0bits>:
 8004d96:	6803      	ldr	r3, [r0, #0]
 8004d98:	f013 0207 	ands.w	r2, r3, #7
 8004d9c:	4601      	mov	r1, r0
 8004d9e:	d00b      	beq.n	8004db8 <__lo0bits+0x22>
 8004da0:	07da      	lsls	r2, r3, #31
 8004da2:	d423      	bmi.n	8004dec <__lo0bits+0x56>
 8004da4:	0798      	lsls	r0, r3, #30
 8004da6:	bf49      	itett	mi
 8004da8:	085b      	lsrmi	r3, r3, #1
 8004daa:	089b      	lsrpl	r3, r3, #2
 8004dac:	2001      	movmi	r0, #1
 8004dae:	600b      	strmi	r3, [r1, #0]
 8004db0:	bf5c      	itt	pl
 8004db2:	600b      	strpl	r3, [r1, #0]
 8004db4:	2002      	movpl	r0, #2
 8004db6:	4770      	bx	lr
 8004db8:	b298      	uxth	r0, r3
 8004dba:	b9a8      	cbnz	r0, 8004de8 <__lo0bits+0x52>
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	2010      	movs	r0, #16
 8004dc0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004dc4:	bf04      	itt	eq
 8004dc6:	0a1b      	lsreq	r3, r3, #8
 8004dc8:	3008      	addeq	r0, #8
 8004dca:	071a      	lsls	r2, r3, #28
 8004dcc:	bf04      	itt	eq
 8004dce:	091b      	lsreq	r3, r3, #4
 8004dd0:	3004      	addeq	r0, #4
 8004dd2:	079a      	lsls	r2, r3, #30
 8004dd4:	bf04      	itt	eq
 8004dd6:	089b      	lsreq	r3, r3, #2
 8004dd8:	3002      	addeq	r0, #2
 8004dda:	07da      	lsls	r2, r3, #31
 8004ddc:	d402      	bmi.n	8004de4 <__lo0bits+0x4e>
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	d006      	beq.n	8004df0 <__lo0bits+0x5a>
 8004de2:	3001      	adds	r0, #1
 8004de4:	600b      	str	r3, [r1, #0]
 8004de6:	4770      	bx	lr
 8004de8:	4610      	mov	r0, r2
 8004dea:	e7e9      	b.n	8004dc0 <__lo0bits+0x2a>
 8004dec:	2000      	movs	r0, #0
 8004dee:	4770      	bx	lr
 8004df0:	2020      	movs	r0, #32
 8004df2:	4770      	bx	lr

08004df4 <__i2b>:
 8004df4:	b510      	push	{r4, lr}
 8004df6:	460c      	mov	r4, r1
 8004df8:	2101      	movs	r1, #1
 8004dfa:	f7ff ff27 	bl	8004c4c <_Balloc>
 8004dfe:	2201      	movs	r2, #1
 8004e00:	6144      	str	r4, [r0, #20]
 8004e02:	6102      	str	r2, [r0, #16]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__multiply>:
 8004e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	690a      	ldr	r2, [r1, #16]
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bfb8      	it	lt
 8004e14:	460b      	movlt	r3, r1
 8004e16:	4689      	mov	r9, r1
 8004e18:	bfbc      	itt	lt
 8004e1a:	46a1      	movlt	r9, r4
 8004e1c:	461c      	movlt	r4, r3
 8004e1e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004e22:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004e26:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004e2a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e2e:	eb07 060a 	add.w	r6, r7, sl
 8004e32:	429e      	cmp	r6, r3
 8004e34:	bfc8      	it	gt
 8004e36:	3101      	addgt	r1, #1
 8004e38:	f7ff ff08 	bl	8004c4c <_Balloc>
 8004e3c:	f100 0514 	add.w	r5, r0, #20
 8004e40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e44:	462b      	mov	r3, r5
 8004e46:	2200      	movs	r2, #0
 8004e48:	4543      	cmp	r3, r8
 8004e4a:	d316      	bcc.n	8004e7a <__multiply+0x74>
 8004e4c:	f104 0214 	add.w	r2, r4, #20
 8004e50:	f109 0114 	add.w	r1, r9, #20
 8004e54:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004e58:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	9c01      	ldr	r4, [sp, #4]
 8004e60:	4294      	cmp	r4, r2
 8004e62:	4613      	mov	r3, r2
 8004e64:	d80c      	bhi.n	8004e80 <__multiply+0x7a>
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	dd03      	ble.n	8004e72 <__multiply+0x6c>
 8004e6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d054      	beq.n	8004f1c <__multiply+0x116>
 8004e72:	6106      	str	r6, [r0, #16]
 8004e74:	b003      	add	sp, #12
 8004e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7a:	f843 2b04 	str.w	r2, [r3], #4
 8004e7e:	e7e3      	b.n	8004e48 <__multiply+0x42>
 8004e80:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e84:	3204      	adds	r2, #4
 8004e86:	f1ba 0f00 	cmp.w	sl, #0
 8004e8a:	d020      	beq.n	8004ece <__multiply+0xc8>
 8004e8c:	46ae      	mov	lr, r5
 8004e8e:	4689      	mov	r9, r1
 8004e90:	f04f 0c00 	mov.w	ip, #0
 8004e94:	f859 4b04 	ldr.w	r4, [r9], #4
 8004e98:	f8be b000 	ldrh.w	fp, [lr]
 8004e9c:	b2a3      	uxth	r3, r4
 8004e9e:	fb0a b303 	mla	r3, sl, r3, fp
 8004ea2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004ea6:	f8de 4000 	ldr.w	r4, [lr]
 8004eaa:	4463      	add	r3, ip
 8004eac:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004eb0:	fb0a c40b 	mla	r4, sl, fp, ip
 8004eb4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ebe:	454f      	cmp	r7, r9
 8004ec0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004ec4:	f84e 3b04 	str.w	r3, [lr], #4
 8004ec8:	d8e4      	bhi.n	8004e94 <__multiply+0x8e>
 8004eca:	f8ce c000 	str.w	ip, [lr]
 8004ece:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004ed2:	f1b9 0f00 	cmp.w	r9, #0
 8004ed6:	d01f      	beq.n	8004f18 <__multiply+0x112>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	46ae      	mov	lr, r5
 8004edc:	468c      	mov	ip, r1
 8004ede:	f04f 0a00 	mov.w	sl, #0
 8004ee2:	f8bc 4000 	ldrh.w	r4, [ip]
 8004ee6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004eea:	fb09 b404 	mla	r4, r9, r4, fp
 8004eee:	44a2      	add	sl, r4
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004ef6:	f84e 3b04 	str.w	r3, [lr], #4
 8004efa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004efe:	f8be 4000 	ldrh.w	r4, [lr]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	fb09 4303 	mla	r3, r9, r3, r4
 8004f08:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004f0c:	4567      	cmp	r7, ip
 8004f0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f12:	d8e6      	bhi.n	8004ee2 <__multiply+0xdc>
 8004f14:	f8ce 3000 	str.w	r3, [lr]
 8004f18:	3504      	adds	r5, #4
 8004f1a:	e7a0      	b.n	8004e5e <__multiply+0x58>
 8004f1c:	3e01      	subs	r6, #1
 8004f1e:	e7a2      	b.n	8004e66 <__multiply+0x60>

08004f20 <__pow5mult>:
 8004f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f24:	4615      	mov	r5, r2
 8004f26:	f012 0203 	ands.w	r2, r2, #3
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	d007      	beq.n	8004f40 <__pow5mult+0x20>
 8004f30:	3a01      	subs	r2, #1
 8004f32:	4c21      	ldr	r4, [pc, #132]	; (8004fb8 <__pow5mult+0x98>)
 8004f34:	2300      	movs	r3, #0
 8004f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f3a:	f7ff fed2 	bl	8004ce2 <__multadd>
 8004f3e:	4607      	mov	r7, r0
 8004f40:	10ad      	asrs	r5, r5, #2
 8004f42:	d035      	beq.n	8004fb0 <__pow5mult+0x90>
 8004f44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f46:	b93c      	cbnz	r4, 8004f58 <__pow5mult+0x38>
 8004f48:	2010      	movs	r0, #16
 8004f4a:	f7ff fc5d 	bl	8004808 <malloc>
 8004f4e:	6270      	str	r0, [r6, #36]	; 0x24
 8004f50:	6044      	str	r4, [r0, #4]
 8004f52:	6084      	str	r4, [r0, #8]
 8004f54:	6004      	str	r4, [r0, #0]
 8004f56:	60c4      	str	r4, [r0, #12]
 8004f58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f60:	b94c      	cbnz	r4, 8004f76 <__pow5mult+0x56>
 8004f62:	f240 2171 	movw	r1, #625	; 0x271
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7ff ff44 	bl	8004df4 <__i2b>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f72:	4604      	mov	r4, r0
 8004f74:	6003      	str	r3, [r0, #0]
 8004f76:	f04f 0800 	mov.w	r8, #0
 8004f7a:	07eb      	lsls	r3, r5, #31
 8004f7c:	d50a      	bpl.n	8004f94 <__pow5mult+0x74>
 8004f7e:	4639      	mov	r1, r7
 8004f80:	4622      	mov	r2, r4
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ff3f 	bl	8004e06 <__multiply>
 8004f88:	4639      	mov	r1, r7
 8004f8a:	4681      	mov	r9, r0
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f7ff fe91 	bl	8004cb4 <_Bfree>
 8004f92:	464f      	mov	r7, r9
 8004f94:	106d      	asrs	r5, r5, #1
 8004f96:	d00b      	beq.n	8004fb0 <__pow5mult+0x90>
 8004f98:	6820      	ldr	r0, [r4, #0]
 8004f9a:	b938      	cbnz	r0, 8004fac <__pow5mult+0x8c>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7ff ff30 	bl	8004e06 <__multiply>
 8004fa6:	6020      	str	r0, [r4, #0]
 8004fa8:	f8c0 8000 	str.w	r8, [r0]
 8004fac:	4604      	mov	r4, r0
 8004fae:	e7e4      	b.n	8004f7a <__pow5mult+0x5a>
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb6:	bf00      	nop
 8004fb8:	08005c78 	.word	0x08005c78

08004fbc <__lshift>:
 8004fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	6849      	ldr	r1, [r1, #4]
 8004fca:	eb0a 0903 	add.w	r9, sl, r3
 8004fce:	68a3      	ldr	r3, [r4, #8]
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	f109 0501 	add.w	r5, r9, #1
 8004fd8:	42ab      	cmp	r3, r5
 8004fda:	db31      	blt.n	8005040 <__lshift+0x84>
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f7ff fe35 	bl	8004c4c <_Balloc>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	f100 0314 	add.w	r3, r0, #20
 8004fea:	4611      	mov	r1, r2
 8004fec:	4552      	cmp	r2, sl
 8004fee:	db2a      	blt.n	8005046 <__lshift+0x8a>
 8004ff0:	6920      	ldr	r0, [r4, #16]
 8004ff2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ff6:	f104 0114 	add.w	r1, r4, #20
 8004ffa:	f016 021f 	ands.w	r2, r6, #31
 8004ffe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005002:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005006:	d022      	beq.n	800504e <__lshift+0x92>
 8005008:	f1c2 0c20 	rsb	ip, r2, #32
 800500c:	2000      	movs	r0, #0
 800500e:	680e      	ldr	r6, [r1, #0]
 8005010:	4096      	lsls	r6, r2
 8005012:	4330      	orrs	r0, r6
 8005014:	f843 0b04 	str.w	r0, [r3], #4
 8005018:	f851 0b04 	ldr.w	r0, [r1], #4
 800501c:	458e      	cmp	lr, r1
 800501e:	fa20 f00c 	lsr.w	r0, r0, ip
 8005022:	d8f4      	bhi.n	800500e <__lshift+0x52>
 8005024:	6018      	str	r0, [r3, #0]
 8005026:	b108      	cbz	r0, 800502c <__lshift+0x70>
 8005028:	f109 0502 	add.w	r5, r9, #2
 800502c:	3d01      	subs	r5, #1
 800502e:	4638      	mov	r0, r7
 8005030:	f8c8 5010 	str.w	r5, [r8, #16]
 8005034:	4621      	mov	r1, r4
 8005036:	f7ff fe3d 	bl	8004cb4 <_Bfree>
 800503a:	4640      	mov	r0, r8
 800503c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005040:	3101      	adds	r1, #1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	e7c8      	b.n	8004fd8 <__lshift+0x1c>
 8005046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800504a:	3201      	adds	r2, #1
 800504c:	e7ce      	b.n	8004fec <__lshift+0x30>
 800504e:	3b04      	subs	r3, #4
 8005050:	f851 2b04 	ldr.w	r2, [r1], #4
 8005054:	f843 2f04 	str.w	r2, [r3, #4]!
 8005058:	458e      	cmp	lr, r1
 800505a:	d8f9      	bhi.n	8005050 <__lshift+0x94>
 800505c:	e7e6      	b.n	800502c <__lshift+0x70>

0800505e <__mcmp>:
 800505e:	6903      	ldr	r3, [r0, #16]
 8005060:	690a      	ldr	r2, [r1, #16]
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	b530      	push	{r4, r5, lr}
 8005066:	d10c      	bne.n	8005082 <__mcmp+0x24>
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	3014      	adds	r0, #20
 800506c:	3114      	adds	r1, #20
 800506e:	1884      	adds	r4, r0, r2
 8005070:	4411      	add	r1, r2
 8005072:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005076:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800507a:	4295      	cmp	r5, r2
 800507c:	d003      	beq.n	8005086 <__mcmp+0x28>
 800507e:	d305      	bcc.n	800508c <__mcmp+0x2e>
 8005080:	2301      	movs	r3, #1
 8005082:	4618      	mov	r0, r3
 8005084:	bd30      	pop	{r4, r5, pc}
 8005086:	42a0      	cmp	r0, r4
 8005088:	d3f3      	bcc.n	8005072 <__mcmp+0x14>
 800508a:	e7fa      	b.n	8005082 <__mcmp+0x24>
 800508c:	f04f 33ff 	mov.w	r3, #4294967295
 8005090:	e7f7      	b.n	8005082 <__mcmp+0x24>

08005092 <__mdiff>:
 8005092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005096:	460d      	mov	r5, r1
 8005098:	4607      	mov	r7, r0
 800509a:	4611      	mov	r1, r2
 800509c:	4628      	mov	r0, r5
 800509e:	4614      	mov	r4, r2
 80050a0:	f7ff ffdd 	bl	800505e <__mcmp>
 80050a4:	1e06      	subs	r6, r0, #0
 80050a6:	d108      	bne.n	80050ba <__mdiff+0x28>
 80050a8:	4631      	mov	r1, r6
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7ff fdce 	bl	8004c4c <_Balloc>
 80050b0:	2301      	movs	r3, #1
 80050b2:	6103      	str	r3, [r0, #16]
 80050b4:	6146      	str	r6, [r0, #20]
 80050b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ba:	bfa4      	itt	ge
 80050bc:	4623      	movge	r3, r4
 80050be:	462c      	movge	r4, r5
 80050c0:	4638      	mov	r0, r7
 80050c2:	6861      	ldr	r1, [r4, #4]
 80050c4:	bfa6      	itte	ge
 80050c6:	461d      	movge	r5, r3
 80050c8:	2600      	movge	r6, #0
 80050ca:	2601      	movlt	r6, #1
 80050cc:	f7ff fdbe 	bl	8004c4c <_Balloc>
 80050d0:	692b      	ldr	r3, [r5, #16]
 80050d2:	60c6      	str	r6, [r0, #12]
 80050d4:	6926      	ldr	r6, [r4, #16]
 80050d6:	f105 0914 	add.w	r9, r5, #20
 80050da:	f104 0214 	add.w	r2, r4, #20
 80050de:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80050e2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80050e6:	f100 0514 	add.w	r5, r0, #20
 80050ea:	f04f 0c00 	mov.w	ip, #0
 80050ee:	f852 ab04 	ldr.w	sl, [r2], #4
 80050f2:	f859 4b04 	ldr.w	r4, [r9], #4
 80050f6:	fa1c f18a 	uxtah	r1, ip, sl
 80050fa:	b2a3      	uxth	r3, r4
 80050fc:	1ac9      	subs	r1, r1, r3
 80050fe:	0c23      	lsrs	r3, r4, #16
 8005100:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005104:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005108:	b289      	uxth	r1, r1
 800510a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800510e:	45c8      	cmp	r8, r9
 8005110:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005114:	4696      	mov	lr, r2
 8005116:	f845 3b04 	str.w	r3, [r5], #4
 800511a:	d8e8      	bhi.n	80050ee <__mdiff+0x5c>
 800511c:	45be      	cmp	lr, r7
 800511e:	d305      	bcc.n	800512c <__mdiff+0x9a>
 8005120:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005124:	b18b      	cbz	r3, 800514a <__mdiff+0xb8>
 8005126:	6106      	str	r6, [r0, #16]
 8005128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005130:	fa1c f381 	uxtah	r3, ip, r1
 8005134:	141a      	asrs	r2, r3, #16
 8005136:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800513a:	b29b      	uxth	r3, r3
 800513c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005140:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005144:	f845 3b04 	str.w	r3, [r5], #4
 8005148:	e7e8      	b.n	800511c <__mdiff+0x8a>
 800514a:	3e01      	subs	r6, #1
 800514c:	e7e8      	b.n	8005120 <__mdiff+0x8e>

0800514e <__d2b>:
 800514e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005152:	460e      	mov	r6, r1
 8005154:	2101      	movs	r1, #1
 8005156:	ec59 8b10 	vmov	r8, r9, d0
 800515a:	4615      	mov	r5, r2
 800515c:	f7ff fd76 	bl	8004c4c <_Balloc>
 8005160:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005164:	4607      	mov	r7, r0
 8005166:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800516a:	bb34      	cbnz	r4, 80051ba <__d2b+0x6c>
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	f1b8 0f00 	cmp.w	r8, #0
 8005172:	d027      	beq.n	80051c4 <__d2b+0x76>
 8005174:	a802      	add	r0, sp, #8
 8005176:	f840 8d08 	str.w	r8, [r0, #-8]!
 800517a:	f7ff fe0c 	bl	8004d96 <__lo0bits>
 800517e:	9900      	ldr	r1, [sp, #0]
 8005180:	b1f0      	cbz	r0, 80051c0 <__d2b+0x72>
 8005182:	9a01      	ldr	r2, [sp, #4]
 8005184:	f1c0 0320 	rsb	r3, r0, #32
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	430b      	orrs	r3, r1
 800518e:	40c2      	lsrs	r2, r0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	9201      	str	r2, [sp, #4]
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf14      	ite	ne
 800519c:	2102      	movne	r1, #2
 800519e:	2101      	moveq	r1, #1
 80051a0:	6139      	str	r1, [r7, #16]
 80051a2:	b1c4      	cbz	r4, 80051d6 <__d2b+0x88>
 80051a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80051a8:	4404      	add	r4, r0
 80051aa:	6034      	str	r4, [r6, #0]
 80051ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80051b0:	6028      	str	r0, [r5, #0]
 80051b2:	4638      	mov	r0, r7
 80051b4:	b003      	add	sp, #12
 80051b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051be:	e7d5      	b.n	800516c <__d2b+0x1e>
 80051c0:	6179      	str	r1, [r7, #20]
 80051c2:	e7e7      	b.n	8005194 <__d2b+0x46>
 80051c4:	a801      	add	r0, sp, #4
 80051c6:	f7ff fde6 	bl	8004d96 <__lo0bits>
 80051ca:	9b01      	ldr	r3, [sp, #4]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	2101      	movs	r1, #1
 80051d0:	6139      	str	r1, [r7, #16]
 80051d2:	3020      	adds	r0, #32
 80051d4:	e7e5      	b.n	80051a2 <__d2b+0x54>
 80051d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80051da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80051de:	6030      	str	r0, [r6, #0]
 80051e0:	6918      	ldr	r0, [r3, #16]
 80051e2:	f7ff fdb9 	bl	8004d58 <__hi0bits>
 80051e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80051ea:	e7e1      	b.n	80051b0 <__d2b+0x62>

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4c06      	ldr	r4, [pc, #24]	; (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4605      	mov	r5, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	f000 fb64 	bl	80058c4 <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000d3c 	.word	0x20000d3c

0800520c <__ssprint_r>:
 800520c:	6893      	ldr	r3, [r2, #8]
 800520e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005212:	4681      	mov	r9, r0
 8005214:	460c      	mov	r4, r1
 8005216:	4617      	mov	r7, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d060      	beq.n	80052de <__ssprint_r+0xd2>
 800521c:	f04f 0b00 	mov.w	fp, #0
 8005220:	f8d2 a000 	ldr.w	sl, [r2]
 8005224:	465e      	mov	r6, fp
 8005226:	b356      	cbz	r6, 800527e <__ssprint_r+0x72>
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	429e      	cmp	r6, r3
 800522c:	d344      	bcc.n	80052b8 <__ssprint_r+0xac>
 800522e:	89a2      	ldrh	r2, [r4, #12]
 8005230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005234:	d03e      	beq.n	80052b4 <__ssprint_r+0xa8>
 8005236:	6825      	ldr	r5, [r4, #0]
 8005238:	6921      	ldr	r1, [r4, #16]
 800523a:	eba5 0801 	sub.w	r8, r5, r1
 800523e:	6965      	ldr	r5, [r4, #20]
 8005240:	2302      	movs	r3, #2
 8005242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005246:	fb95 f5f3 	sdiv	r5, r5, r3
 800524a:	f108 0301 	add.w	r3, r8, #1
 800524e:	4433      	add	r3, r6
 8005250:	429d      	cmp	r5, r3
 8005252:	bf38      	it	cc
 8005254:	461d      	movcc	r5, r3
 8005256:	0553      	lsls	r3, r2, #21
 8005258:	d546      	bpl.n	80052e8 <__ssprint_r+0xdc>
 800525a:	4629      	mov	r1, r5
 800525c:	4648      	mov	r0, r9
 800525e:	f7ff fadb 	bl	8004818 <_malloc_r>
 8005262:	b998      	cbnz	r0, 800528c <__ssprint_r+0x80>
 8005264:	230c      	movs	r3, #12
 8005266:	f8c9 3000 	str.w	r3, [r9]
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	607b      	str	r3, [r7, #4]
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	e031      	b.n	80052e2 <__ssprint_r+0xd6>
 800527e:	f8da b000 	ldr.w	fp, [sl]
 8005282:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005286:	f10a 0a08 	add.w	sl, sl, #8
 800528a:	e7cc      	b.n	8005226 <__ssprint_r+0x1a>
 800528c:	4642      	mov	r2, r8
 800528e:	6921      	ldr	r1, [r4, #16]
 8005290:	9001      	str	r0, [sp, #4]
 8005292:	f7fd fc15 	bl	8002ac0 <memcpy>
 8005296:	89a2      	ldrh	r2, [r4, #12]
 8005298:	9b01      	ldr	r3, [sp, #4]
 800529a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800529e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052a2:	81a2      	strh	r2, [r4, #12]
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	6165      	str	r5, [r4, #20]
 80052a8:	4443      	add	r3, r8
 80052aa:	eba5 0508 	sub.w	r5, r5, r8
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	60a5      	str	r5, [r4, #8]
 80052b2:	4633      	mov	r3, r6
 80052b4:	429e      	cmp	r6, r3
 80052b6:	d200      	bcs.n	80052ba <__ssprint_r+0xae>
 80052b8:	4633      	mov	r3, r6
 80052ba:	461a      	mov	r2, r3
 80052bc:	4659      	mov	r1, fp
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	f7fd fc08 	bl	8002ad6 <memmove>
 80052c6:	68a2      	ldr	r2, [r4, #8]
 80052c8:	9b01      	ldr	r3, [sp, #4]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	60a2      	str	r2, [r4, #8]
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	4413      	add	r3, r2
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	1b9e      	subs	r6, r3, r6
 80052d8:	60be      	str	r6, [r7, #8]
 80052da:	2e00      	cmp	r6, #0
 80052dc:	d1cf      	bne.n	800527e <__ssprint_r+0x72>
 80052de:	2000      	movs	r0, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	b003      	add	sp, #12
 80052e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e8:	462a      	mov	r2, r5
 80052ea:	4648      	mov	r0, r9
 80052ec:	f000 f95c 	bl	80055a8 <_realloc_r>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1d6      	bne.n	80052a4 <__ssprint_r+0x98>
 80052f6:	6921      	ldr	r1, [r4, #16]
 80052f8:	4648      	mov	r0, r9
 80052fa:	f000 f885 	bl	8005408 <_free_r>
 80052fe:	e7b1      	b.n	8005264 <__ssprint_r+0x58>

08005300 <_calloc_r>:
 8005300:	b510      	push	{r4, lr}
 8005302:	4351      	muls	r1, r2
 8005304:	f7ff fa88 	bl	8004818 <_malloc_r>
 8005308:	4604      	mov	r4, r0
 800530a:	b198      	cbz	r0, 8005334 <_calloc_r+0x34>
 800530c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005310:	f022 0203 	bic.w	r2, r2, #3
 8005314:	3a04      	subs	r2, #4
 8005316:	2a24      	cmp	r2, #36	; 0x24
 8005318:	d81b      	bhi.n	8005352 <_calloc_r+0x52>
 800531a:	2a13      	cmp	r2, #19
 800531c:	d917      	bls.n	800534e <_calloc_r+0x4e>
 800531e:	2100      	movs	r1, #0
 8005320:	2a1b      	cmp	r2, #27
 8005322:	6001      	str	r1, [r0, #0]
 8005324:	6041      	str	r1, [r0, #4]
 8005326:	d807      	bhi.n	8005338 <_calloc_r+0x38>
 8005328:	f100 0308 	add.w	r3, r0, #8
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	4620      	mov	r0, r4
 8005336:	bd10      	pop	{r4, pc}
 8005338:	2a24      	cmp	r2, #36	; 0x24
 800533a:	6081      	str	r1, [r0, #8]
 800533c:	60c1      	str	r1, [r0, #12]
 800533e:	bf11      	iteee	ne
 8005340:	f100 0310 	addne.w	r3, r0, #16
 8005344:	6101      	streq	r1, [r0, #16]
 8005346:	f100 0318 	addeq.w	r3, r0, #24
 800534a:	6141      	streq	r1, [r0, #20]
 800534c:	e7ee      	b.n	800532c <_calloc_r+0x2c>
 800534e:	4603      	mov	r3, r0
 8005350:	e7ec      	b.n	800532c <_calloc_r+0x2c>
 8005352:	2100      	movs	r1, #0
 8005354:	f7fd fbd9 	bl	8002b0a <memset>
 8005358:	e7ec      	b.n	8005334 <_calloc_r+0x34>
	...

0800535c <_malloc_trim_r>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	4f25      	ldr	r7, [pc, #148]	; (80053f8 <_malloc_trim_r+0x9c>)
 8005362:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005404 <_malloc_trim_r+0xa8>
 8005366:	4689      	mov	r9, r1
 8005368:	4606      	mov	r6, r0
 800536a:	f7ff fc63 	bl	8004c34 <__malloc_lock>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	685d      	ldr	r5, [r3, #4]
 8005372:	f1a8 0411 	sub.w	r4, r8, #17
 8005376:	f025 0503 	bic.w	r5, r5, #3
 800537a:	eba4 0409 	sub.w	r4, r4, r9
 800537e:	442c      	add	r4, r5
 8005380:	fbb4 f4f8 	udiv	r4, r4, r8
 8005384:	3c01      	subs	r4, #1
 8005386:	fb08 f404 	mul.w	r4, r8, r4
 800538a:	4544      	cmp	r4, r8
 800538c:	da05      	bge.n	800539a <_malloc_trim_r+0x3e>
 800538e:	4630      	mov	r0, r6
 8005390:	f7ff fc56 	bl	8004c40 <__malloc_unlock>
 8005394:	2000      	movs	r0, #0
 8005396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800539a:	2100      	movs	r1, #0
 800539c:	4630      	mov	r0, r6
 800539e:	f7ff ff25 	bl	80051ec <_sbrk_r>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	442b      	add	r3, r5
 80053a6:	4298      	cmp	r0, r3
 80053a8:	d1f1      	bne.n	800538e <_malloc_trim_r+0x32>
 80053aa:	4261      	negs	r1, r4
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7ff ff1d 	bl	80051ec <_sbrk_r>
 80053b2:	3001      	adds	r0, #1
 80053b4:	d110      	bne.n	80053d8 <_malloc_trim_r+0x7c>
 80053b6:	2100      	movs	r1, #0
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7ff ff17 	bl	80051ec <_sbrk_r>
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	1a83      	subs	r3, r0, r2
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	dde3      	ble.n	800538e <_malloc_trim_r+0x32>
 80053c6:	490d      	ldr	r1, [pc, #52]	; (80053fc <_malloc_trim_r+0xa0>)
 80053c8:	6809      	ldr	r1, [r1, #0]
 80053ca:	1a40      	subs	r0, r0, r1
 80053cc:	490c      	ldr	r1, [pc, #48]	; (8005400 <_malloc_trim_r+0xa4>)
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	6008      	str	r0, [r1, #0]
 80053d4:	6053      	str	r3, [r2, #4]
 80053d6:	e7da      	b.n	800538e <_malloc_trim_r+0x32>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <_malloc_trim_r+0xa4>)
 80053dc:	1b2d      	subs	r5, r5, r4
 80053de:	f045 0501 	orr.w	r5, r5, #1
 80053e2:	605d      	str	r5, [r3, #4]
 80053e4:	6813      	ldr	r3, [r2, #0]
 80053e6:	4630      	mov	r0, r6
 80053e8:	1b1c      	subs	r4, r3, r4
 80053ea:	6014      	str	r4, [r2, #0]
 80053ec:	f7ff fc28 	bl	8004c40 <__malloc_unlock>
 80053f0:	2001      	movs	r0, #1
 80053f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f6:	bf00      	nop
 80053f8:	200000f4 	.word	0x200000f4
 80053fc:	200004fc 	.word	0x200004fc
 8005400:	20000c50 	.word	0x20000c50
 8005404:	00000080 	.word	0x00000080

08005408 <_free_r>:
 8005408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540c:	4604      	mov	r4, r0
 800540e:	4688      	mov	r8, r1
 8005410:	2900      	cmp	r1, #0
 8005412:	f000 80ab 	beq.w	800556c <_free_r+0x164>
 8005416:	f7ff fc0d 	bl	8004c34 <__malloc_lock>
 800541a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800541e:	4d54      	ldr	r5, [pc, #336]	; (8005570 <_free_r+0x168>)
 8005420:	f022 0001 	bic.w	r0, r2, #1
 8005424:	f1a8 0308 	sub.w	r3, r8, #8
 8005428:	181f      	adds	r7, r3, r0
 800542a:	68a9      	ldr	r1, [r5, #8]
 800542c:	687e      	ldr	r6, [r7, #4]
 800542e:	428f      	cmp	r7, r1
 8005430:	f026 0603 	bic.w	r6, r6, #3
 8005434:	f002 0201 	and.w	r2, r2, #1
 8005438:	d11b      	bne.n	8005472 <_free_r+0x6a>
 800543a:	4430      	add	r0, r6
 800543c:	b93a      	cbnz	r2, 800544e <_free_r+0x46>
 800543e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	4410      	add	r0, r2
 8005446:	6899      	ldr	r1, [r3, #8]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	60ca      	str	r2, [r1, #12]
 800544c:	6091      	str	r1, [r2, #8]
 800544e:	f040 0201 	orr.w	r2, r0, #1
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	60ab      	str	r3, [r5, #8]
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <_free_r+0x16c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4298      	cmp	r0, r3
 800545c:	d304      	bcc.n	8005468 <_free_r+0x60>
 800545e:	4b46      	ldr	r3, [pc, #280]	; (8005578 <_free_r+0x170>)
 8005460:	4620      	mov	r0, r4
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	f7ff ff7a 	bl	800535c <_malloc_trim_r>
 8005468:	4620      	mov	r0, r4
 800546a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546e:	f7ff bbe7 	b.w	8004c40 <__malloc_unlock>
 8005472:	607e      	str	r6, [r7, #4]
 8005474:	2a00      	cmp	r2, #0
 8005476:	d139      	bne.n	80054ec <_free_r+0xe4>
 8005478:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800547c:	1a5b      	subs	r3, r3, r1
 800547e:	4408      	add	r0, r1
 8005480:	6899      	ldr	r1, [r3, #8]
 8005482:	f105 0e08 	add.w	lr, r5, #8
 8005486:	4571      	cmp	r1, lr
 8005488:	d032      	beq.n	80054f0 <_free_r+0xe8>
 800548a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800548e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005492:	f8ce 1008 	str.w	r1, [lr, #8]
 8005496:	19b9      	adds	r1, r7, r6
 8005498:	6849      	ldr	r1, [r1, #4]
 800549a:	07c9      	lsls	r1, r1, #31
 800549c:	d40a      	bmi.n	80054b4 <_free_r+0xac>
 800549e:	4430      	add	r0, r6
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	bb3a      	cbnz	r2, 80054f4 <_free_r+0xec>
 80054a4:	4e35      	ldr	r6, [pc, #212]	; (800557c <_free_r+0x174>)
 80054a6:	42b1      	cmp	r1, r6
 80054a8:	d124      	bne.n	80054f4 <_free_r+0xec>
 80054aa:	616b      	str	r3, [r5, #20]
 80054ac:	612b      	str	r3, [r5, #16]
 80054ae:	2201      	movs	r2, #1
 80054b0:	60d9      	str	r1, [r3, #12]
 80054b2:	6099      	str	r1, [r3, #8]
 80054b4:	f040 0101 	orr.w	r1, r0, #1
 80054b8:	6059      	str	r1, [r3, #4]
 80054ba:	5018      	str	r0, [r3, r0]
 80054bc:	2a00      	cmp	r2, #0
 80054be:	d1d3      	bne.n	8005468 <_free_r+0x60>
 80054c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80054c4:	d21a      	bcs.n	80054fc <_free_r+0xf4>
 80054c6:	08c0      	lsrs	r0, r0, #3
 80054c8:	1081      	asrs	r1, r0, #2
 80054ca:	2201      	movs	r2, #1
 80054cc:	408a      	lsls	r2, r1
 80054ce:	6869      	ldr	r1, [r5, #4]
 80054d0:	3001      	adds	r0, #1
 80054d2:	430a      	orrs	r2, r1
 80054d4:	606a      	str	r2, [r5, #4]
 80054d6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80054da:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80054de:	6099      	str	r1, [r3, #8]
 80054e0:	3a08      	subs	r2, #8
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80054e8:	60cb      	str	r3, [r1, #12]
 80054ea:	e7bd      	b.n	8005468 <_free_r+0x60>
 80054ec:	2200      	movs	r2, #0
 80054ee:	e7d2      	b.n	8005496 <_free_r+0x8e>
 80054f0:	2201      	movs	r2, #1
 80054f2:	e7d0      	b.n	8005496 <_free_r+0x8e>
 80054f4:	68fe      	ldr	r6, [r7, #12]
 80054f6:	60ce      	str	r6, [r1, #12]
 80054f8:	60b1      	str	r1, [r6, #8]
 80054fa:	e7db      	b.n	80054b4 <_free_r+0xac>
 80054fc:	0a42      	lsrs	r2, r0, #9
 80054fe:	2a04      	cmp	r2, #4
 8005500:	d813      	bhi.n	800552a <_free_r+0x122>
 8005502:	0982      	lsrs	r2, r0, #6
 8005504:	3238      	adds	r2, #56	; 0x38
 8005506:	1c51      	adds	r1, r2, #1
 8005508:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800550c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005510:	428e      	cmp	r6, r1
 8005512:	d124      	bne.n	800555e <_free_r+0x156>
 8005514:	2001      	movs	r0, #1
 8005516:	1092      	asrs	r2, r2, #2
 8005518:	fa00 f202 	lsl.w	r2, r0, r2
 800551c:	6868      	ldr	r0, [r5, #4]
 800551e:	4302      	orrs	r2, r0
 8005520:	606a      	str	r2, [r5, #4]
 8005522:	60de      	str	r6, [r3, #12]
 8005524:	6099      	str	r1, [r3, #8]
 8005526:	60b3      	str	r3, [r6, #8]
 8005528:	e7de      	b.n	80054e8 <_free_r+0xe0>
 800552a:	2a14      	cmp	r2, #20
 800552c:	d801      	bhi.n	8005532 <_free_r+0x12a>
 800552e:	325b      	adds	r2, #91	; 0x5b
 8005530:	e7e9      	b.n	8005506 <_free_r+0xfe>
 8005532:	2a54      	cmp	r2, #84	; 0x54
 8005534:	d802      	bhi.n	800553c <_free_r+0x134>
 8005536:	0b02      	lsrs	r2, r0, #12
 8005538:	326e      	adds	r2, #110	; 0x6e
 800553a:	e7e4      	b.n	8005506 <_free_r+0xfe>
 800553c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005540:	d802      	bhi.n	8005548 <_free_r+0x140>
 8005542:	0bc2      	lsrs	r2, r0, #15
 8005544:	3277      	adds	r2, #119	; 0x77
 8005546:	e7de      	b.n	8005506 <_free_r+0xfe>
 8005548:	f240 5154 	movw	r1, #1364	; 0x554
 800554c:	428a      	cmp	r2, r1
 800554e:	bf9a      	itte	ls
 8005550:	0c82      	lsrls	r2, r0, #18
 8005552:	327c      	addls	r2, #124	; 0x7c
 8005554:	227e      	movhi	r2, #126	; 0x7e
 8005556:	e7d6      	b.n	8005506 <_free_r+0xfe>
 8005558:	6889      	ldr	r1, [r1, #8]
 800555a:	428e      	cmp	r6, r1
 800555c:	d004      	beq.n	8005568 <_free_r+0x160>
 800555e:	684a      	ldr	r2, [r1, #4]
 8005560:	f022 0203 	bic.w	r2, r2, #3
 8005564:	4290      	cmp	r0, r2
 8005566:	d3f7      	bcc.n	8005558 <_free_r+0x150>
 8005568:	68ce      	ldr	r6, [r1, #12]
 800556a:	e7da      	b.n	8005522 <_free_r+0x11a>
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	200000f4 	.word	0x200000f4
 8005574:	20000500 	.word	0x20000500
 8005578:	20000c80 	.word	0x20000c80
 800557c:	200000fc 	.word	0x200000fc

08005580 <__retarget_lock_acquire_recursive>:
 8005580:	4770      	bx	lr

08005582 <__retarget_lock_release_recursive>:
 8005582:	4770      	bx	lr

08005584 <__ascii_mbtowc>:
 8005584:	b082      	sub	sp, #8
 8005586:	b901      	cbnz	r1, 800558a <__ascii_mbtowc+0x6>
 8005588:	a901      	add	r1, sp, #4
 800558a:	b142      	cbz	r2, 800559e <__ascii_mbtowc+0x1a>
 800558c:	b14b      	cbz	r3, 80055a2 <__ascii_mbtowc+0x1e>
 800558e:	7813      	ldrb	r3, [r2, #0]
 8005590:	600b      	str	r3, [r1, #0]
 8005592:	7812      	ldrb	r2, [r2, #0]
 8005594:	1c10      	adds	r0, r2, #0
 8005596:	bf18      	it	ne
 8005598:	2001      	movne	r0, #1
 800559a:	b002      	add	sp, #8
 800559c:	4770      	bx	lr
 800559e:	4610      	mov	r0, r2
 80055a0:	e7fb      	b.n	800559a <__ascii_mbtowc+0x16>
 80055a2:	f06f 0001 	mvn.w	r0, #1
 80055a6:	e7f8      	b.n	800559a <__ascii_mbtowc+0x16>

080055a8 <_realloc_r>:
 80055a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	4682      	mov	sl, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	b929      	cbnz	r1, 80055be <_realloc_r+0x16>
 80055b2:	4611      	mov	r1, r2
 80055b4:	b003      	add	sp, #12
 80055b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	f7ff b92d 	b.w	8004818 <_malloc_r>
 80055be:	9201      	str	r2, [sp, #4]
 80055c0:	f7ff fb38 	bl	8004c34 <__malloc_lock>
 80055c4:	9a01      	ldr	r2, [sp, #4]
 80055c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80055ca:	f102 080b 	add.w	r8, r2, #11
 80055ce:	f1b8 0f16 	cmp.w	r8, #22
 80055d2:	f1a4 0908 	sub.w	r9, r4, #8
 80055d6:	f025 0603 	bic.w	r6, r5, #3
 80055da:	d90a      	bls.n	80055f2 <_realloc_r+0x4a>
 80055dc:	f038 0807 	bics.w	r8, r8, #7
 80055e0:	d509      	bpl.n	80055f6 <_realloc_r+0x4e>
 80055e2:	230c      	movs	r3, #12
 80055e4:	f8ca 3000 	str.w	r3, [sl]
 80055e8:	2700      	movs	r7, #0
 80055ea:	4638      	mov	r0, r7
 80055ec:	b003      	add	sp, #12
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f2:	f04f 0810 	mov.w	r8, #16
 80055f6:	4590      	cmp	r8, r2
 80055f8:	d3f3      	bcc.n	80055e2 <_realloc_r+0x3a>
 80055fa:	45b0      	cmp	r8, r6
 80055fc:	f340 8145 	ble.w	800588a <_realloc_r+0x2e2>
 8005600:	4ba8      	ldr	r3, [pc, #672]	; (80058a4 <_realloc_r+0x2fc>)
 8005602:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005606:	eb09 0106 	add.w	r1, r9, r6
 800560a:	4571      	cmp	r1, lr
 800560c:	469b      	mov	fp, r3
 800560e:	684b      	ldr	r3, [r1, #4]
 8005610:	d005      	beq.n	800561e <_realloc_r+0x76>
 8005612:	f023 0001 	bic.w	r0, r3, #1
 8005616:	4408      	add	r0, r1
 8005618:	6840      	ldr	r0, [r0, #4]
 800561a:	07c7      	lsls	r7, r0, #31
 800561c:	d447      	bmi.n	80056ae <_realloc_r+0x106>
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	4571      	cmp	r1, lr
 8005624:	eb06 0703 	add.w	r7, r6, r3
 8005628:	d119      	bne.n	800565e <_realloc_r+0xb6>
 800562a:	f108 0010 	add.w	r0, r8, #16
 800562e:	4287      	cmp	r7, r0
 8005630:	db3f      	blt.n	80056b2 <_realloc_r+0x10a>
 8005632:	eb09 0308 	add.w	r3, r9, r8
 8005636:	eba7 0708 	sub.w	r7, r7, r8
 800563a:	f047 0701 	orr.w	r7, r7, #1
 800563e:	f8cb 3008 	str.w	r3, [fp, #8]
 8005642:	605f      	str	r7, [r3, #4]
 8005644:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	ea43 0308 	orr.w	r3, r3, r8
 8005650:	f844 3c04 	str.w	r3, [r4, #-4]
 8005654:	4650      	mov	r0, sl
 8005656:	f7ff faf3 	bl	8004c40 <__malloc_unlock>
 800565a:	4627      	mov	r7, r4
 800565c:	e7c5      	b.n	80055ea <_realloc_r+0x42>
 800565e:	45b8      	cmp	r8, r7
 8005660:	dc27      	bgt.n	80056b2 <_realloc_r+0x10a>
 8005662:	68cb      	ldr	r3, [r1, #12]
 8005664:	688a      	ldr	r2, [r1, #8]
 8005666:	60d3      	str	r3, [r2, #12]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	eba7 0008 	sub.w	r0, r7, r8
 800566e:	280f      	cmp	r0, #15
 8005670:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005674:	eb09 0207 	add.w	r2, r9, r7
 8005678:	f240 8109 	bls.w	800588e <_realloc_r+0x2e6>
 800567c:	eb09 0108 	add.w	r1, r9, r8
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	ea43 0308 	orr.w	r3, r3, r8
 8005688:	f040 0001 	orr.w	r0, r0, #1
 800568c:	f8c9 3004 	str.w	r3, [r9, #4]
 8005690:	6048      	str	r0, [r1, #4]
 8005692:	6853      	ldr	r3, [r2, #4]
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6053      	str	r3, [r2, #4]
 800569a:	3108      	adds	r1, #8
 800569c:	4650      	mov	r0, sl
 800569e:	f7ff feb3 	bl	8005408 <_free_r>
 80056a2:	4650      	mov	r0, sl
 80056a4:	f7ff facc 	bl	8004c40 <__malloc_unlock>
 80056a8:	f109 0708 	add.w	r7, r9, #8
 80056ac:	e79d      	b.n	80055ea <_realloc_r+0x42>
 80056ae:	2300      	movs	r3, #0
 80056b0:	4619      	mov	r1, r3
 80056b2:	07e8      	lsls	r0, r5, #31
 80056b4:	f100 8084 	bmi.w	80057c0 <_realloc_r+0x218>
 80056b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80056bc:	eba9 0505 	sub.w	r5, r9, r5
 80056c0:	6868      	ldr	r0, [r5, #4]
 80056c2:	f020 0003 	bic.w	r0, r0, #3
 80056c6:	4430      	add	r0, r6
 80056c8:	2900      	cmp	r1, #0
 80056ca:	d076      	beq.n	80057ba <_realloc_r+0x212>
 80056cc:	4571      	cmp	r1, lr
 80056ce:	d150      	bne.n	8005772 <_realloc_r+0x1ca>
 80056d0:	4403      	add	r3, r0
 80056d2:	f108 0110 	add.w	r1, r8, #16
 80056d6:	428b      	cmp	r3, r1
 80056d8:	db6f      	blt.n	80057ba <_realloc_r+0x212>
 80056da:	462f      	mov	r7, r5
 80056dc:	68ea      	ldr	r2, [r5, #12]
 80056de:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80056e2:	60ca      	str	r2, [r1, #12]
 80056e4:	6091      	str	r1, [r2, #8]
 80056e6:	1f32      	subs	r2, r6, #4
 80056e8:	2a24      	cmp	r2, #36	; 0x24
 80056ea:	d83b      	bhi.n	8005764 <_realloc_r+0x1bc>
 80056ec:	2a13      	cmp	r2, #19
 80056ee:	d936      	bls.n	800575e <_realloc_r+0x1b6>
 80056f0:	6821      	ldr	r1, [r4, #0]
 80056f2:	60a9      	str	r1, [r5, #8]
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	60e9      	str	r1, [r5, #12]
 80056f8:	2a1b      	cmp	r2, #27
 80056fa:	d81c      	bhi.n	8005736 <_realloc_r+0x18e>
 80056fc:	f105 0210 	add.w	r2, r5, #16
 8005700:	f104 0108 	add.w	r1, r4, #8
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	6010      	str	r0, [r2, #0]
 8005708:	6848      	ldr	r0, [r1, #4]
 800570a:	6050      	str	r0, [r2, #4]
 800570c:	6889      	ldr	r1, [r1, #8]
 800570e:	6091      	str	r1, [r2, #8]
 8005710:	eb05 0208 	add.w	r2, r5, r8
 8005714:	eba3 0308 	sub.w	r3, r3, r8
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	f8cb 2008 	str.w	r2, [fp, #8]
 8005720:	6053      	str	r3, [r2, #4]
 8005722:	686b      	ldr	r3, [r5, #4]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	ea43 0308 	orr.w	r3, r3, r8
 800572c:	606b      	str	r3, [r5, #4]
 800572e:	4650      	mov	r0, sl
 8005730:	f7ff fa86 	bl	8004c40 <__malloc_unlock>
 8005734:	e759      	b.n	80055ea <_realloc_r+0x42>
 8005736:	68a1      	ldr	r1, [r4, #8]
 8005738:	6129      	str	r1, [r5, #16]
 800573a:	68e1      	ldr	r1, [r4, #12]
 800573c:	6169      	str	r1, [r5, #20]
 800573e:	2a24      	cmp	r2, #36	; 0x24
 8005740:	bf01      	itttt	eq
 8005742:	6922      	ldreq	r2, [r4, #16]
 8005744:	61aa      	streq	r2, [r5, #24]
 8005746:	6960      	ldreq	r0, [r4, #20]
 8005748:	61e8      	streq	r0, [r5, #28]
 800574a:	bf19      	ittee	ne
 800574c:	f105 0218 	addne.w	r2, r5, #24
 8005750:	f104 0110 	addne.w	r1, r4, #16
 8005754:	f105 0220 	addeq.w	r2, r5, #32
 8005758:	f104 0118 	addeq.w	r1, r4, #24
 800575c:	e7d2      	b.n	8005704 <_realloc_r+0x15c>
 800575e:	463a      	mov	r2, r7
 8005760:	4621      	mov	r1, r4
 8005762:	e7cf      	b.n	8005704 <_realloc_r+0x15c>
 8005764:	4621      	mov	r1, r4
 8005766:	4638      	mov	r0, r7
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	f7fd f9b4 	bl	8002ad6 <memmove>
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	e7ce      	b.n	8005710 <_realloc_r+0x168>
 8005772:	18c7      	adds	r7, r0, r3
 8005774:	45b8      	cmp	r8, r7
 8005776:	dc20      	bgt.n	80057ba <_realloc_r+0x212>
 8005778:	68cb      	ldr	r3, [r1, #12]
 800577a:	688a      	ldr	r2, [r1, #8]
 800577c:	60d3      	str	r3, [r2, #12]
 800577e:	609a      	str	r2, [r3, #8]
 8005780:	4628      	mov	r0, r5
 8005782:	68eb      	ldr	r3, [r5, #12]
 8005784:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005788:	60d3      	str	r3, [r2, #12]
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	1f32      	subs	r2, r6, #4
 800578e:	2a24      	cmp	r2, #36	; 0x24
 8005790:	d842      	bhi.n	8005818 <_realloc_r+0x270>
 8005792:	2a13      	cmp	r2, #19
 8005794:	d93e      	bls.n	8005814 <_realloc_r+0x26c>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	60ab      	str	r3, [r5, #8]
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	60eb      	str	r3, [r5, #12]
 800579e:	2a1b      	cmp	r2, #27
 80057a0:	d824      	bhi.n	80057ec <_realloc_r+0x244>
 80057a2:	f105 0010 	add.w	r0, r5, #16
 80057a6:	f104 0308 	add.w	r3, r4, #8
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	6002      	str	r2, [r0, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	6042      	str	r2, [r0, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	6083      	str	r3, [r0, #8]
 80057b6:	46a9      	mov	r9, r5
 80057b8:	e757      	b.n	800566a <_realloc_r+0xc2>
 80057ba:	4580      	cmp	r8, r0
 80057bc:	4607      	mov	r7, r0
 80057be:	dddf      	ble.n	8005780 <_realloc_r+0x1d8>
 80057c0:	4611      	mov	r1, r2
 80057c2:	4650      	mov	r0, sl
 80057c4:	f7ff f828 	bl	8004818 <_malloc_r>
 80057c8:	4607      	mov	r7, r0
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d0af      	beq.n	800572e <_realloc_r+0x186>
 80057ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	f1a0 0208 	sub.w	r2, r0, #8
 80057da:	444b      	add	r3, r9
 80057dc:	429a      	cmp	r2, r3
 80057de:	d11f      	bne.n	8005820 <_realloc_r+0x278>
 80057e0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80057e4:	f027 0703 	bic.w	r7, r7, #3
 80057e8:	4437      	add	r7, r6
 80057ea:	e73e      	b.n	800566a <_realloc_r+0xc2>
 80057ec:	68a3      	ldr	r3, [r4, #8]
 80057ee:	612b      	str	r3, [r5, #16]
 80057f0:	68e3      	ldr	r3, [r4, #12]
 80057f2:	616b      	str	r3, [r5, #20]
 80057f4:	2a24      	cmp	r2, #36	; 0x24
 80057f6:	bf01      	itttt	eq
 80057f8:	6923      	ldreq	r3, [r4, #16]
 80057fa:	61ab      	streq	r3, [r5, #24]
 80057fc:	6962      	ldreq	r2, [r4, #20]
 80057fe:	61ea      	streq	r2, [r5, #28]
 8005800:	bf19      	ittee	ne
 8005802:	f105 0018 	addne.w	r0, r5, #24
 8005806:	f104 0310 	addne.w	r3, r4, #16
 800580a:	f105 0020 	addeq.w	r0, r5, #32
 800580e:	f104 0318 	addeq.w	r3, r4, #24
 8005812:	e7ca      	b.n	80057aa <_realloc_r+0x202>
 8005814:	4623      	mov	r3, r4
 8005816:	e7c8      	b.n	80057aa <_realloc_r+0x202>
 8005818:	4621      	mov	r1, r4
 800581a:	f7fd f95c 	bl	8002ad6 <memmove>
 800581e:	e7ca      	b.n	80057b6 <_realloc_r+0x20e>
 8005820:	1f32      	subs	r2, r6, #4
 8005822:	2a24      	cmp	r2, #36	; 0x24
 8005824:	d82d      	bhi.n	8005882 <_realloc_r+0x2da>
 8005826:	2a13      	cmp	r2, #19
 8005828:	d928      	bls.n	800587c <_realloc_r+0x2d4>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	6003      	str	r3, [r0, #0]
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	6043      	str	r3, [r0, #4]
 8005832:	2a1b      	cmp	r2, #27
 8005834:	d80e      	bhi.n	8005854 <_realloc_r+0x2ac>
 8005836:	f100 0308 	add.w	r3, r0, #8
 800583a:	f104 0208 	add.w	r2, r4, #8
 800583e:	6811      	ldr	r1, [r2, #0]
 8005840:	6019      	str	r1, [r3, #0]
 8005842:	6851      	ldr	r1, [r2, #4]
 8005844:	6059      	str	r1, [r3, #4]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	609a      	str	r2, [r3, #8]
 800584a:	4621      	mov	r1, r4
 800584c:	4650      	mov	r0, sl
 800584e:	f7ff fddb 	bl	8005408 <_free_r>
 8005852:	e76c      	b.n	800572e <_realloc_r+0x186>
 8005854:	68a3      	ldr	r3, [r4, #8]
 8005856:	6083      	str	r3, [r0, #8]
 8005858:	68e3      	ldr	r3, [r4, #12]
 800585a:	60c3      	str	r3, [r0, #12]
 800585c:	2a24      	cmp	r2, #36	; 0x24
 800585e:	bf01      	itttt	eq
 8005860:	6923      	ldreq	r3, [r4, #16]
 8005862:	6103      	streq	r3, [r0, #16]
 8005864:	6961      	ldreq	r1, [r4, #20]
 8005866:	6141      	streq	r1, [r0, #20]
 8005868:	bf19      	ittee	ne
 800586a:	f100 0310 	addne.w	r3, r0, #16
 800586e:	f104 0210 	addne.w	r2, r4, #16
 8005872:	f100 0318 	addeq.w	r3, r0, #24
 8005876:	f104 0218 	addeq.w	r2, r4, #24
 800587a:	e7e0      	b.n	800583e <_realloc_r+0x296>
 800587c:	4603      	mov	r3, r0
 800587e:	4622      	mov	r2, r4
 8005880:	e7dd      	b.n	800583e <_realloc_r+0x296>
 8005882:	4621      	mov	r1, r4
 8005884:	f7fd f927 	bl	8002ad6 <memmove>
 8005888:	e7df      	b.n	800584a <_realloc_r+0x2a2>
 800588a:	4637      	mov	r7, r6
 800588c:	e6ed      	b.n	800566a <_realloc_r+0xc2>
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	431f      	orrs	r7, r3
 8005894:	f8c9 7004 	str.w	r7, [r9, #4]
 8005898:	6853      	ldr	r3, [r2, #4]
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6053      	str	r3, [r2, #4]
 80058a0:	e6ff      	b.n	80056a2 <_realloc_r+0xfa>
 80058a2:	bf00      	nop
 80058a4:	200000f4 	.word	0x200000f4

080058a8 <__ascii_wctomb>:
 80058a8:	b149      	cbz	r1, 80058be <__ascii_wctomb+0x16>
 80058aa:	2aff      	cmp	r2, #255	; 0xff
 80058ac:	bf85      	ittet	hi
 80058ae:	238a      	movhi	r3, #138	; 0x8a
 80058b0:	6003      	strhi	r3, [r0, #0]
 80058b2:	700a      	strbls	r2, [r1, #0]
 80058b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80058b8:	bf98      	it	ls
 80058ba:	2001      	movls	r0, #1
 80058bc:	4770      	bx	lr
 80058be:	4608      	mov	r0, r1
 80058c0:	4770      	bx	lr
	...

080058c4 <_sbrk>:
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <_sbrk+0x14>)
 80058c6:	6819      	ldr	r1, [r3, #0]
 80058c8:	4602      	mov	r2, r0
 80058ca:	b909      	cbnz	r1, 80058d0 <_sbrk+0xc>
 80058cc:	4903      	ldr	r1, [pc, #12]	; (80058dc <_sbrk+0x18>)
 80058ce:	6019      	str	r1, [r3, #0]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	4402      	add	r2, r0
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	4770      	bx	lr
 80058d8:	20000c84 	.word	0x20000c84
 80058dc:	20000d40 	.word	0x20000d40

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
